{"version":3,"file":"getWasmBoyTsCore.iife.js","sources":["core.esm.js","../../core/portable/getTsCore.js"],"sourcesContent":["// Banner placed by rollup to mock out some items on our esm build\n// This is useful for things like wasmmemory\n\nconst wasmboyMemorySize = 0x8b0000;\n\n// Simply initialized to the size we need\nconst wasmByteMemory = new Uint8ClampedArray(wasmboyMemorySize);\n\n// Memory mock\nexport const memory = {\n  size: () => {\n    return wasmboyMemorySize;\n  },\n  grow: () => {},\n  wasmByteMemory: wasmByteMemory\n};\n\nconst load = offset => {\n  return wasmByteMemory[offset];\n};\n\nconst store = (offset, value) => {\n  wasmByteMemory[offset] = value;\n};\n\nconst abs = value => {\n  return Math.abs(value);\n};\n\nconst ceil = value => {\n  return Math.ceil(value);\n};\n\n// Constants that will be shared by the wasm core of the emulator\n// And libraries built around the wasm (such as the official JS), or @CryZe wasmboy-rs\n// ----------------------------------\n// Wasmboy Memory Map\n// https://docs.google.com/spreadsheets/d/17xrEzJk5-sCB9J2mMJcVnzhbE-XH_NvczVSQH9OHvRk/edit?usp=sharing\n// ----------------------------------\n// AssemblyScript\nvar ASSEMBLYSCRIPT_MEMORY_LOCATION = 0x000000;\nvar ASSEMBLYSCRIPT_MEMORY_SIZE = 0x000400;\n// WasmBoy States\nvar WASMBOY_STATE_LOCATION = ASSEMBLYSCRIPT_MEMORY_LOCATION + ASSEMBLYSCRIPT_MEMORY_SIZE;\nvar WASMBOY_STATE_SIZE = 0x000400;\n// Gameboy Internal Memory\nvar VIDEO_RAM_LOCATION = WASMBOY_STATE_LOCATION + WASMBOY_STATE_SIZE;\nvar VIDEO_RAM_SIZE = 0x004000;\nvar WORK_RAM_LOCATION = VIDEO_RAM_LOCATION + VIDEO_RAM_SIZE;\nvar WORK_RAM_SIZE = 0x008000;\nvar OTHER_GAMEBOY_INTERNAL_MEMORY_LOCATION = WORK_RAM_LOCATION + WORK_RAM_SIZE;\nvar OTHER_GAMEBOY_INTERNAL_MEMORY_SIZE = 0x004000;\n// General Gameboy Internal Memory\nvar GAMEBOY_INTERNAL_MEMORY_LOCATION = VIDEO_RAM_LOCATION;\nvar GAMEBOY_INTERNAL_MEMORY_SIZE = OTHER_GAMEBOY_INTERNAL_MEMORY_LOCATION - VIDEO_RAM_LOCATION + OTHER_GAMEBOY_INTERNAL_MEMORY_SIZE;\n// Graphics Output\nvar GBC_PALETTE_LOCATION = OTHER_GAMEBOY_INTERNAL_MEMORY_LOCATION + OTHER_GAMEBOY_INTERNAL_MEMORY_SIZE;\nvar GBC_PALETTE_SIZE = 0x000080;\nvar BG_PRIORITY_MAP_LOCATION = GBC_PALETTE_LOCATION + GBC_PALETTE_SIZE;\nvar BG_PRIORITY_MAP_SIZE = 0x005c00;\nvar FRAME_LOCATION = BG_PRIORITY_MAP_LOCATION + BG_PRIORITY_MAP_SIZE;\nvar FRAME_SIZE = 0x016c00;\nvar BACKGROUND_MAP_LOCATION = FRAME_LOCATION + FRAME_SIZE;\nvar BACKGROUND_MAP_SIZE = 0x030000;\nvar TILE_DATA_LOCATION = BACKGROUND_MAP_LOCATION + BACKGROUND_MAP_SIZE;\nvar TILE_DATA_SIZE = 0x024000;\nvar OAM_TILES_LOCATION = TILE_DATA_LOCATION + TILE_DATA_SIZE;\nvar OAM_TILES_SIZE = 0x003c00;\n// General Graphics Output\nvar GRAPHICS_OUTPUT_LOCATION = GBC_PALETTE_LOCATION;\nvar GRAPHICS_OUTPUT_SIZE = OAM_TILES_LOCATION - GBC_PALETTE_LOCATION + OAM_TILES_SIZE;\n// Audio Output\nvar CHANNEL_1_BUFFER_LOCATION = OAM_TILES_LOCATION + OAM_TILES_SIZE;\nvar CHANNEL_1_BUFFER_SIZE = 0x020000;\nvar CHANNEL_2_BUFFER_LOCATION = CHANNEL_1_BUFFER_LOCATION + CHANNEL_1_BUFFER_SIZE;\nvar CHANNEL_2_BUFFER_SIZE = 0x020000;\nvar CHANNEL_3_BUFFER_LOCATION = CHANNEL_2_BUFFER_LOCATION + CHANNEL_2_BUFFER_SIZE;\nvar CHANNEL_3_BUFFER_SIZE = 0x020000;\nvar CHANNEL_4_BUFFER_LOCATION = CHANNEL_3_BUFFER_LOCATION + CHANNEL_3_BUFFER_SIZE;\nvar CHANNEL_4_BUFFER_SIZE = 0x020000;\nvar AUDIO_BUFFER_LOCATION = CHANNEL_4_BUFFER_LOCATION + CHANNEL_4_BUFFER_SIZE;\nvar AUDIO_BUFFER_SIZE = 0x020000;\n// Catridge Ram\nvar CARTRIDGE_RAM_LOCATION = AUDIO_BUFFER_LOCATION + AUDIO_BUFFER_SIZE;\nvar CARTRIDGE_RAM_SIZE = 0x020000;\n// Boot ROM\n// http://gbdev.gg8.se/files/roms/bootroms/\n// Largest Boot rom is GBC, at 2.5KB\nvar BOOT_ROM_LOCATION = CARTRIDGE_RAM_LOCATION + CARTRIDGE_RAM_SIZE;\nvar BOOT_ROM_SIZE = 0x000a00;\n// Cartridge ROM\nvar CARTRIDGE_ROM_LOCATION = BOOT_ROM_LOCATION + BOOT_ROM_SIZE;\nvar CARTRIDGE_ROM_SIZE = 0x7e0400;\n// Debug Memory\nvar DEBUG_GAMEBOY_MEMORY_LOCATION = CARTRIDGE_ROM_LOCATION + CARTRIDGE_ROM_SIZE;\nvar DEBUG_GAMEBOY_MEMORY_SIZE = 0xffff;\n// Final General Size\nvar WASMBOY_MEMORY_LOCATION = 0x000000;\nvar WASMBOY_MEMORY_SIZE = DEBUG_GAMEBOY_MEMORY_LOCATION + DEBUG_GAMEBOY_MEMORY_SIZE + 1;\nvar WASMBOY_WASM_PAGES = ceil(WASMBOY_MEMORY_SIZE / 1024 / 64) + 1;\n\nvar Config = /** @class */ (function () {\n    function Config() {\n    }\n    // Boot Rom\n    Config.enableBootRom = false;\n    // GBC Options\n    Config.useGbcWhenAvailable = true;\n    // Batch Processing\n    Config.audioBatchProcessing = false;\n    Config.graphicsBatchProcessing = false;\n    Config.timersBatchProcessing = false;\n    // Scanline Rendering\n    Config.graphicsDisableScanlineRendering = false;\n    // Acumulate Sound Samples\n    Config.audioAccumulateSamples = false;\n    // Tile Rednering\n    Config.tileRendering = false;\n    Config.tileCaching = false;\n    // Audio Debugging\n    Config.enableAudioDebugging = false;\n    return Config;\n}());\n\n// Portable Code for JS Wasm Benchmarking\n// https://github.com/AssemblyScript/assemblyscript/wiki/Writing-portable-code\n// https://github.com/AssemblyScript/assemblyscript/blob/master/std/portable/index.js\nfunction u8Portable(param) {\n    return param & 0xff;\n}\nfunction u16Portable(param) {\n    return param & 0xffff;\n}\nfunction i8Portable(param) {\n    return (param << 24) >> 24;\n}\nfunction i32Portable(param) {\n    return param | 0;\n}\n\n// Set flag bit on on register F. For instance set zero flag to zero -> (7, 0)\nfunction setFlagBit(flagBit, flagValue) {\n    var bitwiseOperand = u8Portable(1 << flagBit);\n    if (flagValue > 0) {\n        Cpu.registerF = Cpu.registerF | bitwiseOperand;\n    }\n    else {\n        // XOR out the two ones\n        bitwiseOperand = 0xff ^ bitwiseOperand;\n        Cpu.registerF = Cpu.registerF & bitwiseOperand;\n    }\n    return Cpu.registerF;\n}\n// Overload the set flag bit for ease of use\nfunction setZeroFlag$$1(value) {\n    setFlagBit(7, value);\n}\nfunction setSubtractFlag(value) {\n    setFlagBit(6, value);\n}\nfunction setHalfCarryFlag(value) {\n    setFlagBit(5, value);\n}\nfunction setCarryFlag(value) {\n    setFlagBit(4, value);\n}\n// Getters for flags\nfunction getZeroFlag$$1() {\n    return (Cpu.registerF >> 7) & 0x01;\n}\nfunction getSubtractFlag() {\n    return (Cpu.registerF >> 6) & 0x01;\n}\nfunction getHalfCarryFlag() {\n    return (Cpu.registerF >> 5) & 0x01;\n}\nfunction getCarryFlag$$1() {\n    return (Cpu.registerF >> 4) & 0x01;\n}\n// Must be run before the register actually performs the add\n// amountToAdd i16, since max number can be an u8\nfunction checkAndSetEightBitHalfCarryFlag(value, amountToAdd) {\n    if (amountToAdd >= 0) {\n        // https://robdor.com/2016/08/10/gameboy-emulator-half-carry-flag/\n        var result = u8Portable((value & 0x0f) + (amountToAdd & 0x0f)) & 0x10;\n        setHalfCarryFlag((result !== 0x00));\n    }\n    else {\n        // From: https://github.com/djhworld/gomeboycolor/blob/master/src/cpu/index.go\n        // CTRL+F \"subBytes(a, b byte)\"\n        setHalfCarryFlag(((abs(amountToAdd) & 0x0f) > (value & 0x0f)));\n    }\n}\nfunction checkAndSetEightBitCarryFlag(value, amountToAdd) {\n    if (amountToAdd >= 0) {\n        var result = u8Portable(value + amountToAdd);\n        setCarryFlag((value > result));\n    }\n    else {\n        setCarryFlag((abs(amountToAdd) > value));\n    }\n}\n// Function to handle 16 bit addition overflow, and set the carry flags accordingly\n// i32 on valueTwo to support passing signed immedaite values\nfunction checkAndSetSixteenBitFlagsAddOverflow(valueOne, valueTwo, useStackPointerBits) {\n    // need to differentiate between HL and SP\n    // HL carries are at 11 and 15, SP carries are at 3 and 7 :p\n    if (useStackPointerBits) {\n        // Logic from : https://github.com/nakardo/node-gameboy/blob/master/lib/cpu/opcodes.js\n        // CTRL+F add_sp_n\n        // using the stack pointer bits means we can safely assume the value is signed\n        var signedValueOne = valueOne;\n        var result = signedValueOne + valueTwo;\n        var flagXor = signedValueOne ^ valueTwo ^ result;\n        setHalfCarryFlag(((flagXor & 0x10) !== 0));\n        setCarryFlag(((flagXor & 0x100) !== 0));\n    }\n    else {\n        // Logic from: https://github.com/djhworld/gomeboycolor/blob/master/src/cpu/index.go\n        // CTRL+F addWords\n        // Value two is not signed\n        var result = u16Portable(valueOne + valueTwo);\n        // Check the carry flag by allowing the overflow\n        setCarryFlag((result < valueOne));\n        // To check for half carry flag (bit 15), by XOR'ing valyes, and and'ing the bit in question\n        var halfCarryXor = valueOne ^ valueTwo ^ result;\n        var halfCarryAnd = u16Portable(halfCarryXor & 0x1000);\n        setHalfCarryFlag((halfCarryAnd !== 0x00));\n    }\n}\n\n// File for all of the colors for different GB Palletes\n// https://i.imgur.com/HupBY.png\n// https://www.libretro.com/index.php/gambatte-progress-report/\n// https://tcrf.net/Notes:Game_Boy_Color_Bootstrap_ROM\n// Our default wasmboy gb colors\nvar WasmBoyGBColors = /** @class */ (function () {\n    function WasmBoyGBColors() {\n    }\n    //Bg\n    WasmBoyGBColors.bgWhite = 0xf2f2f2;\n    WasmBoyGBColors.bgLightGrey = 0xa0a0a0;\n    WasmBoyGBColors.bgDarkGrey = 0x585858;\n    WasmBoyGBColors.bgBlack = 0x080808;\n    // Obj 0\n    WasmBoyGBColors.obj0White = 0xf2f2f2;\n    WasmBoyGBColors.obj0LightGrey = 0xa0a0a0;\n    WasmBoyGBColors.obj0DarkGrey = 0x585858;\n    WasmBoyGBColors.obj0Black = 0x080808;\n    // Obj1\n    WasmBoyGBColors.obj1White = 0xf2f2f2;\n    WasmBoyGBColors.obj1LightGrey = 0xa0a0a0;\n    WasmBoyGBColors.obj1DarkGrey = 0x585858;\n    WasmBoyGBColors.obj1Black = 0x080808;\n    return WasmBoyGBColors;\n}());\n// Action Button: Right\nvar GreenColors = /** @class */ (function () {\n    function GreenColors() {\n    }\n    //Bg\n    GreenColors.bgWhite = 0xffffff;\n    GreenColors.bgLightGrey = 0x52ff00;\n    GreenColors.bgDarkGrey = 0xff4200;\n    GreenColors.bgBlack = 0x000000;\n    // Obj 0\n    GreenColors.obj0White = 0xffffff;\n    GreenColors.obj0LightGrey = 0x52ff00;\n    GreenColors.obj0DarkGrey = 0xff4200;\n    GreenColors.obj0Black = 0x000000;\n    // Obj1\n    GreenColors.obj1White = 0xffffff;\n    GreenColors.obj1LightGrey = 0x52ff00;\n    GreenColors.obj1DarkGrey = 0xff4200;\n    GreenColors.obj1Black = 0x000000;\n    return GreenColors;\n}());\n// Action Button: A + Down\nvar OrangeColors = /** @class */ (function () {\n    function OrangeColors() {\n    }\n    //Bg\n    OrangeColors.bgWhite = 0xffffff;\n    OrangeColors.bgLightGrey = 0xffff00;\n    OrangeColors.bgDarkGrey = 0xff0000;\n    OrangeColors.bgBlack = 0x000000;\n    // Obj 0\n    OrangeColors.obj0White = 0xffffff;\n    OrangeColors.obj0LightGrey = 0xffff00;\n    OrangeColors.obj0DarkGrey = 0xff0000;\n    OrangeColors.obj0Black = 0x000000;\n    // Obj1\n    OrangeColors.obj1White = 0xffffff;\n    OrangeColors.obj1LightGrey = 0xffff00;\n    OrangeColors.obj1DarkGrey = 0xff0000;\n    OrangeColors.obj1Black = 0x000000;\n    return OrangeColors;\n}());\n// Action Button: Up\nvar BrownColors = /** @class */ (function () {\n    function BrownColors() {\n    }\n    //Bg\n    BrownColors.bgWhite = 0xffffff;\n    BrownColors.bgLightGrey = 0xffad63;\n    BrownColors.bgDarkGrey = 0x843100;\n    BrownColors.bgBlack = 0x000000;\n    // Obj 0\n    BrownColors.obj0White = 0xffffff;\n    BrownColors.obj0LightGrey = 0xffad63;\n    BrownColors.obj0DarkGrey = 0x843100;\n    BrownColors.obj0Black = 0x000000;\n    // Obj1\n    BrownColors.obj1White = 0xffffff;\n    BrownColors.obj1LightGrey = 0xffad63;\n    BrownColors.obj1DarkGrey = 0x843100;\n    BrownColors.obj1Black = 0x000000;\n    return BrownColors;\n}());\n// Action Button: B + Right\nvar InvertedColors = /** @class */ (function () {\n    function InvertedColors() {\n    }\n    //Bg\n    InvertedColors.bgWhite = 0x000000;\n    InvertedColors.bgLightGrey = 0x008484;\n    InvertedColors.bgDarkGrey = 0xffde00;\n    InvertedColors.bgBlack = 0xffffff;\n    // Obj 0\n    InvertedColors.obj0White = 0x000000;\n    InvertedColors.obj0LightGrey = 0x008484;\n    InvertedColors.obj0DarkGrey = 0xffde00;\n    InvertedColors.obj0Black = 0xffffff;\n    // Obj1\n    InvertedColors.obj1White = 0x000000;\n    InvertedColors.obj1LightGrey = 0x008484;\n    InvertedColors.obj1DarkGrey = 0xffde00;\n    InvertedColors.obj1Black = 0xffffff;\n    return InvertedColors;\n}());\n// Action Button: B + Left\nvar GrayscaleColors = /** @class */ (function () {\n    function GrayscaleColors() {\n    }\n    //Bg\n    GrayscaleColors.bgWhite = 0xffffff;\n    GrayscaleColors.bgLightGrey = 0xa5a5a5;\n    GrayscaleColors.bgDarkGrey = 0x525252;\n    GrayscaleColors.bgBlack = 0x000000;\n    // Obj 0\n    GrayscaleColors.obj0White = 0xffffff;\n    GrayscaleColors.obj0LightGrey = 0xa5a5a5;\n    GrayscaleColors.obj0DarkGrey = 0x525252;\n    GrayscaleColors.obj0Black = 0x000000;\n    // Obj1\n    GrayscaleColors.obj1White = 0xffffff;\n    GrayscaleColors.obj1LightGrey = 0xa5a5a5;\n    GrayscaleColors.obj1DarkGrey = 0x525252;\n    GrayscaleColors.obj1Black = 0x000000;\n    return GrayscaleColors;\n}());\n// Action Button: Down\nvar PastelMixColors = /** @class */ (function () {\n    function PastelMixColors() {\n    }\n    //Bg\n    PastelMixColors.bgWhite = 0xffffa5;\n    PastelMixColors.bgLightGrey = 0xff9494;\n    PastelMixColors.bgDarkGrey = 0x9494ff;\n    PastelMixColors.bgBlack = 0x000000;\n    // Obj 0\n    PastelMixColors.obj0White = 0xffffa5;\n    PastelMixColors.obj0LightGrey = 0xff9494;\n    PastelMixColors.obj0DarkGrey = 0x9494ff;\n    PastelMixColors.obj0Black = 0x000000;\n    // Obj1\n    PastelMixColors.obj1White = 0xffffa5;\n    PastelMixColors.obj1LightGrey = 0xff9494;\n    PastelMixColors.obj1DarkGrey = 0x9494ff;\n    PastelMixColors.obj1Black = 0x000000;\n    return PastelMixColors;\n}());\n// Action Button: B + Up\nvar DarkBrownColors = /** @class */ (function () {\n    function DarkBrownColors() {\n    }\n    //Bg\n    DarkBrownColors.bgWhite = 0xffe6c5;\n    DarkBrownColors.bgLightGrey = 0xce9c84;\n    DarkBrownColors.bgDarkGrey = 0x846b29;\n    DarkBrownColors.bgBlack = 0x5a3108;\n    // Obj 0\n    DarkBrownColors.obj0White = 0xffffff;\n    DarkBrownColors.obj0LightGrey = 0xffad63;\n    DarkBrownColors.obj0DarkGrey = 0x843100;\n    DarkBrownColors.obj0Black = 0x000000;\n    // Obj1\n    DarkBrownColors.obj1White = 0xffffff;\n    DarkBrownColors.obj1LightGrey = 0xffad63;\n    DarkBrownColors.obj1DarkGrey = 0x843100;\n    DarkBrownColors.obj1Black = 0x000000;\n    return DarkBrownColors;\n}());\n// Action Button: A + Right\nvar DarkGreenColors = /** @class */ (function () {\n    function DarkGreenColors() {\n    }\n    //Bg\n    DarkGreenColors.bgWhite = 0xffffff;\n    DarkGreenColors.bgLightGrey = 0x7bff31;\n    DarkGreenColors.bgDarkGrey = 0x0063c5;\n    DarkGreenColors.bgBlack = 0x000000;\n    // Obj 0\n    DarkGreenColors.obj0White = 0xffffff;\n    DarkGreenColors.obj0LightGrey = 0xff8484;\n    DarkGreenColors.obj0DarkGrey = 0x943a3a;\n    DarkGreenColors.obj0Black = 0x000000;\n    // Obj1\n    DarkGreenColors.obj1White = 0xffffff;\n    DarkGreenColors.obj1LightGrey = 0xff8484;\n    DarkGreenColors.obj1DarkGrey = 0x943a3a;\n    DarkGreenColors.obj1Black = 0x000000;\n    return DarkGreenColors;\n}());\n// Action Button: A + Left\nvar DarkBlueColors = /** @class */ (function () {\n    function DarkBlueColors() {\n    }\n    //Bg\n    DarkBlueColors.bgWhite = 0xffffff;\n    DarkBlueColors.bgLightGrey = 0x8c8cde;\n    DarkBlueColors.bgDarkGrey = 0x52528c;\n    DarkBlueColors.bgBlack = 0x000000;\n    // Obj 0\n    DarkBlueColors.obj0White = 0xffffff;\n    DarkBlueColors.obj0LightGrey = 0xff8484;\n    DarkBlueColors.obj0DarkGrey = 0x943a3a;\n    DarkBlueColors.obj0Black = 0x000000;\n    // Obj1\n    DarkBlueColors.obj1White = 0xffffff;\n    DarkBlueColors.obj1LightGrey = 0xffad63;\n    DarkBlueColors.obj1DarkGrey = 0x843100;\n    DarkBlueColors.obj1Black = 0x000000;\n    return DarkBlueColors;\n}());\n// Action Button: A + Up\nvar RedColors = /** @class */ (function () {\n    function RedColors() {\n    }\n    //Bg\n    RedColors.bgWhite = 0xffffff;\n    RedColors.bgLightGrey = 0xff8484;\n    RedColors.bgDarkGrey = 0x943a3a;\n    RedColors.bgBlack = 0x000000;\n    // Obj 0\n    RedColors.obj0White = 0xffffff;\n    RedColors.obj0LightGrey = 0x7bff31;\n    RedColors.obj0DarkGrey = 0x008400;\n    RedColors.obj0Black = 0x000000;\n    // Obj1\n    RedColors.obj1White = 0xffffff;\n    RedColors.obj1LightGrey = 0x63a5ff;\n    RedColors.obj1DarkGrey = 0x0000ff;\n    RedColors.obj1Black = 0x000000;\n    return RedColors;\n}());\n// Action Button: Left\nvar BlueColors = /** @class */ (function () {\n    function BlueColors() {\n    }\n    //Bg\n    BlueColors.bgWhite = 0xffffff;\n    BlueColors.bgLightGrey = 0x63a5ff;\n    BlueColors.bgDarkGrey = 0x0000ff;\n    BlueColors.bgBlack = 0x000000;\n    // Obj 0\n    BlueColors.obj0White = 0xffffff;\n    BlueColors.obj0LightGrey = 0xff8484;\n    BlueColors.obj0DarkGrey = 0x943a3a;\n    BlueColors.obj0Black = 0x000000;\n    // Obj1\n    BlueColors.obj1White = 0xffffff;\n    BlueColors.obj1LightGrey = 0x7bff31;\n    BlueColors.obj1DarkGrey = 0x008400;\n    BlueColors.obj1Black = 0x000000;\n    return BlueColors;\n}());\n// Action Button: B + Down\nvar YellowColors = /** @class */ (function () {\n    function YellowColors() {\n    }\n    //Bg\n    YellowColors.bgWhite = 0xffffff;\n    YellowColors.bgLightGrey = 0xffff00;\n    YellowColors.bgDarkGrey = 0x7b4a00;\n    YellowColors.bgBlack = 0x000000;\n    // Obj 0\n    YellowColors.obj0White = 0xffffff;\n    YellowColors.obj0LightGrey = 0x63a5ff;\n    YellowColors.obj0DarkGrey = 0x0000ff;\n    YellowColors.obj0Black = 0x000000;\n    // Obj1\n    YellowColors.obj1White = 0xffffff;\n    YellowColors.obj1LightGrey = 0x7bff31;\n    YellowColors.obj1DarkGrey = 0x008400;\n    YellowColors.obj1Black = 0x000000;\n    return YellowColors;\n}());\n// Assigned Color Palettes\n// Alleyway\nvar Table00Entry08Colors = /** @class */ (function () {\n    function Table00Entry08Colors() {\n    }\n    //Bg\n    Table00Entry08Colors.bgWhite = 0xa59cff;\n    Table00Entry08Colors.bgLightGrey = 0xffff00;\n    Table00Entry08Colors.bgDarkGrey = 0x006300;\n    Table00Entry08Colors.bgBlack = 0x000000;\n    // Obj 0\n    Table00Entry08Colors.obj0White = 0xa59cff;\n    Table00Entry08Colors.obj0LightGrey = 0xffff00;\n    Table00Entry08Colors.obj0DarkGrey = 0x006300;\n    Table00Entry08Colors.obj0Black = 0x000000;\n    // Obj1\n    Table00Entry08Colors.obj1White = 0xa59cff;\n    Table00Entry08Colors.obj1LightGrey = 0xffff00;\n    Table00Entry08Colors.obj1DarkGrey = 0x006300;\n    Table00Entry08Colors.obj1Black = 0x000000;\n    return Table00Entry08Colors;\n}());\n// Pokemon Blue\nvar Table01Entry0BColors = /** @class */ (function () {\n    function Table01Entry0BColors() {\n    }\n    //Bg\n    Table01Entry0BColors.bgWhite = 0xffffff;\n    Table01Entry0BColors.bgLightGrey = 0x63a5ff;\n    Table01Entry0BColors.bgDarkGrey = 0x0000ff;\n    Table01Entry0BColors.bgBlack = 0x000000;\n    // Obj 0\n    Table01Entry0BColors.obj0White = 0xffffff;\n    Table01Entry0BColors.obj0LightGrey = 0xff8484;\n    Table01Entry0BColors.obj0DarkGrey = 0x943a3a;\n    Table01Entry0BColors.obj0Black = 0x000000;\n    // Obj1\n    Table01Entry0BColors.obj1White = 0xffffff;\n    Table01Entry0BColors.obj1LightGrey = 0x63a5ff;\n    Table01Entry0BColors.obj1DarkGrey = 0x0000ff;\n    Table01Entry0BColors.obj1Black = 0x000000;\n    return Table01Entry0BColors;\n}());\n// Pokemon Red\nvar Table01Entry10Colors = /** @class */ (function () {\n    function Table01Entry10Colors() {\n    }\n    //Bg\n    Table01Entry10Colors.bgWhite = 0xffffff;\n    Table01Entry10Colors.bgLightGrey = 0xff8484;\n    Table01Entry10Colors.bgDarkGrey = 0x943a3a;\n    Table01Entry10Colors.bgBlack = 0x000000;\n    // Obj 0\n    Table01Entry10Colors.obj0White = 0xffffff;\n    Table01Entry10Colors.obj0LightGrey = 0x7bff31;\n    Table01Entry10Colors.obj0DarkGrey = 0x008400;\n    Table01Entry10Colors.obj0Black = 0x000000;\n    // Obj1\n    Table01Entry10Colors.obj1White = 0xffffff;\n    Table01Entry10Colors.obj1LightGrey = 0xff8484;\n    Table01Entry10Colors.obj1DarkGrey = 0x943a3a;\n    Table01Entry10Colors.obj1Black = 0x000000;\n    return Table01Entry10Colors;\n}());\n// Super Mario Land\nvar Table03Entry0AColors = /** @class */ (function () {\n    function Table03Entry0AColors() {\n    }\n    //Bg\n    Table03Entry0AColors.bgWhite = 0xb5b5ff;\n    Table03Entry0AColors.bgLightGrey = 0xffff94;\n    Table03Entry0AColors.bgDarkGrey = 0xad5a42;\n    Table03Entry0AColors.bgBlack = 0x000000;\n    // Obj 0\n    Table03Entry0AColors.obj0White = 0x000000;\n    Table03Entry0AColors.obj0LightGrey = 0xffffff;\n    Table03Entry0AColors.obj0DarkGrey = 0xff8484;\n    Table03Entry0AColors.obj0Black = 0x943a3a;\n    // Obj1\n    Table03Entry0AColors.obj1White = 0x000000;\n    Table03Entry0AColors.obj1LightGrey = 0xffffff;\n    Table03Entry0AColors.obj1DarkGrey = 0xff8484;\n    Table03Entry0AColors.obj1Black = 0x943a3a;\n    return Table03Entry0AColors;\n}());\n// Super Mario Land 3 - WarioLand\nvar Table05Entry00Colors = /** @class */ (function () {\n    function Table05Entry00Colors() {\n    }\n    //Bg\n    Table05Entry00Colors.bgWhite = 0xffffff;\n    Table05Entry00Colors.bgLightGrey = 0xadad84;\n    Table05Entry00Colors.bgDarkGrey = 0x42737b;\n    Table05Entry00Colors.bgBlack = 0x000000;\n    // Obj 0\n    Table05Entry00Colors.obj0White = 0xffffff;\n    Table05Entry00Colors.obj0LightGrey = 0xff7300;\n    Table05Entry00Colors.obj0DarkGrey = 0x944200;\n    Table05Entry00Colors.obj0Black = 0x000000;\n    // Obj1\n    Table05Entry00Colors.obj1White = 0xffffff;\n    Table05Entry00Colors.obj1LightGrey = 0x5abdff;\n    Table05Entry00Colors.obj1DarkGrey = 0xff0000;\n    Table05Entry00Colors.obj1Black = 0x0000ff;\n    return Table05Entry00Colors;\n}());\n// Donkey Kong\nvar Table05Entry01Colors = /** @class */ (function () {\n    function Table05Entry01Colors() {\n    }\n    //Bg\n    Table05Entry01Colors.bgWhite = 0xffff9c;\n    Table05Entry01Colors.bgLightGrey = 0x94b5ff;\n    Table05Entry01Colors.bgDarkGrey = 0x639473;\n    Table05Entry01Colors.bgBlack = 0x003a3a;\n    // Obj 0\n    Table05Entry01Colors.obj0White = 0xffc542;\n    Table05Entry01Colors.obj0LightGrey = 0xffd600;\n    Table05Entry01Colors.obj0DarkGrey = 0x943a00;\n    Table05Entry01Colors.obj0Black = 0x4a0000;\n    // Obj1\n    Table05Entry01Colors.obj1White = 0xffffff;\n    Table05Entry01Colors.obj1LightGrey = 0xff8484;\n    Table05Entry01Colors.obj1DarkGrey = 0x943a3a;\n    Table05Entry01Colors.obj1Black = 0x000000;\n    return Table05Entry01Colors;\n}());\n// Tennis\nvar Table05Entry02Colors = /** @class */ (function () {\n    function Table05Entry02Colors() {\n    }\n    //Bg\n    Table05Entry02Colors.bgWhite = 0x6bff00;\n    Table05Entry02Colors.bgLightGrey = 0xffffff;\n    Table05Entry02Colors.bgDarkGrey = 0xff524a;\n    Table05Entry02Colors.bgBlack = 0x000000;\n    // Obj 0\n    Table05Entry02Colors.obj0White = 0xffffff;\n    Table05Entry02Colors.obj0LightGrey = 0xffffff;\n    Table05Entry02Colors.obj0DarkGrey = 0x63a5ff;\n    Table05Entry02Colors.obj0Black = 0x0000ff;\n    // Obj1\n    Table05Entry02Colors.obj1White = 0xffffff;\n    Table05Entry02Colors.obj1LightGrey = 0xffad63;\n    Table05Entry02Colors.obj1DarkGrey = 0x843100;\n    Table05Entry02Colors.obj1Black = 0x000000;\n    return Table05Entry02Colors;\n}());\n// Kirby's Dream Land\nvar Table05Entry08Colors = /** @class */ (function () {\n    function Table05Entry08Colors() {\n    }\n    //Bg\n    Table05Entry08Colors.bgWhite = 0xa59cff;\n    Table05Entry08Colors.bgLightGrey = 0xffff00;\n    Table05Entry08Colors.bgDarkGrey = 0x006300;\n    Table05Entry08Colors.bgBlack = 0x000000;\n    // Obj 0\n    Table05Entry08Colors.obj0White = 0xff6352;\n    Table05Entry08Colors.obj0LightGrey = 0xd60000;\n    Table05Entry08Colors.obj0DarkGrey = 0x630000;\n    Table05Entry08Colors.obj0Black = 0x000000;\n    // Obj1\n    Table05Entry08Colors.obj1White = 0x0000ff;\n    Table05Entry08Colors.obj1LightGrey = 0xffffff;\n    Table05Entry08Colors.obj1DarkGrey = 0xffff7b;\n    Table05Entry08Colors.obj1Black = 0x0084ff;\n    return Table05Entry08Colors;\n}());\n// Super Mario Land 2 BAYYYBEEE\nvar Table05Entry09Colors = /** @class */ (function () {\n    function Table05Entry09Colors() {\n    }\n    //Bg\n    Table05Entry09Colors.bgWhite = 0xffffce;\n    Table05Entry09Colors.bgLightGrey = 0x63efef;\n    Table05Entry09Colors.bgDarkGrey = 0x9c8431;\n    Table05Entry09Colors.bgBlack = 0x5a5a5a;\n    // Obj 0\n    Table05Entry09Colors.obj0White = 0xffffff;\n    Table05Entry09Colors.obj0LightGrey = 0xff7300;\n    Table05Entry09Colors.obj0DarkGrey = 0x944200;\n    Table05Entry09Colors.obj0Black = 0x000000;\n    // Obj1\n    Table05Entry09Colors.obj1White = 0xffffff;\n    Table05Entry09Colors.obj1LightGrey = 0x63a5ff;\n    Table05Entry09Colors.obj1DarkGrey = 0x0000ff;\n    Table05Entry09Colors.obj1Black = 0x000000;\n    return Table05Entry09Colors;\n}());\n// Link's Awakening\nvar Table05Entry11Colors = /** @class */ (function () {\n    function Table05Entry11Colors() {\n    }\n    // Bg\n    Table05Entry11Colors.bgWhite = 0xffffff;\n    Table05Entry11Colors.bgLightGrey = 0xff8484;\n    Table05Entry11Colors.bgDarkGrey = 0x943a3a;\n    Table05Entry11Colors.bgBlack = 0x000000;\n    // Obj 0\n    Table05Entry11Colors.obj0White = 0xffffff;\n    Table05Entry11Colors.obj0LightGrey = 0x00ff00;\n    Table05Entry11Colors.obj0DarkGrey = 0x318400;\n    Table05Entry11Colors.obj0Black = 0x004a00;\n    // Obj1\n    Table05Entry11Colors.obj1White = 0xffffff;\n    Table05Entry11Colors.obj1LightGrey = 0x63a5ff;\n    Table05Entry11Colors.obj1DarkGrey = 0x0000ff;\n    Table05Entry11Colors.obj1Black = 0x000000;\n    return Table05Entry11Colors;\n}());\n// Metroid 2\nvar Table05Entry14Colors = /** @class */ (function () {\n    function Table05Entry14Colors() {\n    }\n    //Bg\n    Table05Entry14Colors.bgWhite = 0xffffff;\n    Table05Entry14Colors.bgLightGrey = 0x63a5ff;\n    Table05Entry14Colors.bgDarkGrey = 0x0000ff;\n    Table05Entry14Colors.bgBlack = 0x000000;\n    // Obj 0\n    Table05Entry14Colors.obj0White = 0xffff00;\n    Table05Entry14Colors.obj0LightGrey = 0xff0000;\n    Table05Entry14Colors.obj0DarkGrey = 0x630000;\n    Table05Entry14Colors.obj0Black = 0x000000;\n    // Obj1\n    Table05Entry14Colors.obj1White = 0xffffff;\n    Table05Entry14Colors.obj1LightGrey = 0x7bff31;\n    Table05Entry14Colors.obj1DarkGrey = 0x008400;\n    Table05Entry14Colors.obj1Black = 0x000000;\n    return Table05Entry14Colors;\n}());\n// WarioLand 2\nvar Table05Entry15Colors = /** @class */ (function () {\n    function Table05Entry15Colors() {\n    }\n    //Bg\n    Table05Entry15Colors.bgWhite = 0xffffff;\n    Table05Entry15Colors.bgLightGrey = 0xadad84;\n    Table05Entry15Colors.bgDarkGrey = 0x42737b;\n    Table05Entry15Colors.bgBlack = 0x000000;\n    // Obj 0\n    Table05Entry15Colors.obj0White = 0xffffff;\n    Table05Entry15Colors.obj0LightGrey = 0xffad63;\n    Table05Entry15Colors.obj0DarkGrey = 0xffad63;\n    Table05Entry15Colors.obj0Black = 0x000000;\n    // Obj1\n    Table05Entry15Colors.obj1White = 0xffffff;\n    Table05Entry15Colors.obj1LightGrey = 0x63a5ff;\n    Table05Entry15Colors.obj1DarkGrey = 0x0000ff;\n    Table05Entry15Colors.obj1Black = 0x000000;\n    return Table05Entry15Colors;\n}());\n\n// File for all of the logic of setting gameboy color plaettes\n// Current / exported color\nvar Colors = /** @class */ (function () {\n    function Colors() {\n    }\n    //Bg\n    Colors.bgWhite = WasmBoyGBColors.bgWhite;\n    Colors.bgLightGrey = WasmBoyGBColors.bgLightGrey;\n    Colors.bgDarkGrey = WasmBoyGBColors.bgDarkGrey;\n    Colors.bgBlack = WasmBoyGBColors.bgBlack;\n    // Obj 0\n    Colors.obj0White = WasmBoyGBColors.obj0White;\n    Colors.obj0LightGrey = WasmBoyGBColors.obj0LightGrey;\n    Colors.obj0DarkGrey = WasmBoyGBColors.obj0DarkGrey;\n    Colors.obj0Black = WasmBoyGBColors.obj0Black;\n    // Obj1\n    Colors.obj1White = WasmBoyGBColors.obj1White;\n    Colors.obj1LightGrey = WasmBoyGBColors.obj1LightGrey;\n    Colors.obj1DarkGrey = WasmBoyGBColors.obj1DarkGrey;\n    Colors.obj1Black = WasmBoyGBColors.obj1Black;\n    return Colors;\n}());\n// Inlined because closure compiler inlines\nfunction initializeColors() {\n    setManualColorizationPalette(0);\n    if (Cpu.GBCEnabled) {\n        // Don't need to continue this if a GBC game\n        return;\n    }\n    if (Cpu.BootROMEnabled) {\n        if (!Cpu.GBCEnabled) {\n            // GB\n            return;\n        }\n    }\n    // Do some automatic color palette swapping if we have a loaded ROM\n    var titleChecksum = 0x00;\n    for (var i = 0x0134; i <= 0x0143; i++) {\n        titleChecksum += eightBitLoadFromGBMemory(i);\n    }\n    // Set the colorization for the game automatically if assigned\n    // https://tcrf.net/Notes:Game_Boy_Color_Bootstrap_ROM\n    var hash = titleChecksum & 0xff;\n    setHashColorizationPalette(hash);\n}\nfunction getRedFromHexColor(color) {\n    return (color & 0xff0000) >> 16;\n}\nfunction getGreenFromHexColor(color) {\n    return (color & 0x00ff00) >> 8;\n}\nfunction getBlueFromHexColor(color) {\n    return color & 0x0000ff;\n}\n// Function to set the colorization\n// By manually pressing buttons\nfunction setManualColorizationPalette(colorizationId) {\n    // Set the colorizationId clockwise according to:\n    // https://en.wikipedia.org/wiki/Game_Boy_Color\n    switch (colorizationId) {\n        case 0:\n            Colors.bgWhite = WasmBoyGBColors.bgWhite;\n            Colors.bgLightGrey = WasmBoyGBColors.bgLightGrey;\n            Colors.bgDarkGrey = WasmBoyGBColors.bgDarkGrey;\n            Colors.bgBlack = WasmBoyGBColors.bgBlack;\n            Colors.obj0White = WasmBoyGBColors.obj0White;\n            Colors.obj0LightGrey = WasmBoyGBColors.obj0LightGrey;\n            Colors.obj0DarkGrey = WasmBoyGBColors.obj0DarkGrey;\n            Colors.obj0Black = WasmBoyGBColors.obj0Black;\n            Colors.obj1White = WasmBoyGBColors.obj1White;\n            Colors.obj1LightGrey = WasmBoyGBColors.obj1LightGrey;\n            Colors.obj1DarkGrey = WasmBoyGBColors.obj1DarkGrey;\n            Colors.obj1Black = WasmBoyGBColors.obj1Black;\n            break;\n        case 1:\n            // Up, Brown\n            Colors.bgWhite = BrownColors.bgWhite;\n            Colors.bgLightGrey = BrownColors.bgLightGrey;\n            Colors.bgDarkGrey = BrownColors.bgDarkGrey;\n            Colors.bgBlack = BrownColors.bgBlack;\n            Colors.obj0White = BrownColors.obj0White;\n            Colors.obj0LightGrey = BrownColors.obj0LightGrey;\n            Colors.obj0DarkGrey = BrownColors.obj0DarkGrey;\n            Colors.obj0Black = BrownColors.obj0Black;\n            Colors.obj1White = BrownColors.obj1White;\n            Colors.obj1LightGrey = BrownColors.obj1LightGrey;\n            Colors.obj1DarkGrey = BrownColors.obj1DarkGrey;\n            Colors.obj1Black = BrownColors.obj1Black;\n            break;\n        case 2:\n            // Up + A, Red\n            Colors.bgWhite = RedColors.bgWhite;\n            Colors.bgLightGrey = RedColors.bgLightGrey;\n            Colors.bgDarkGrey = RedColors.bgDarkGrey;\n            Colors.bgBlack = RedColors.bgBlack;\n            Colors.obj0White = RedColors.obj0White;\n            Colors.obj0LightGrey = RedColors.obj0LightGrey;\n            Colors.obj0DarkGrey = RedColors.obj0DarkGrey;\n            Colors.obj0Black = RedColors.obj0Black;\n            Colors.obj1White = RedColors.obj1White;\n            Colors.obj1LightGrey = RedColors.obj1LightGrey;\n            Colors.obj1DarkGrey = RedColors.obj1DarkGrey;\n            Colors.obj1Black = RedColors.obj1Black;\n            break;\n        case 3:\n            // Up + B, DarkBrown\n            Colors.bgWhite = DarkBrownColors.bgWhite;\n            Colors.bgLightGrey = DarkBrownColors.bgLightGrey;\n            Colors.bgDarkGrey = DarkBrownColors.bgDarkGrey;\n            Colors.bgBlack = DarkBrownColors.bgBlack;\n            Colors.obj0White = DarkBrownColors.obj0White;\n            Colors.obj0LightGrey = DarkBrownColors.obj0LightGrey;\n            Colors.obj0DarkGrey = DarkBrownColors.obj0DarkGrey;\n            Colors.obj0Black = DarkBrownColors.obj0Black;\n            Colors.obj1White = DarkBrownColors.obj1White;\n            Colors.obj1LightGrey = DarkBrownColors.obj1LightGrey;\n            Colors.obj1DarkGrey = DarkBrownColors.obj1DarkGrey;\n            Colors.obj1Black = DarkBrownColors.obj1Black;\n            break;\n        case 4:\n            // Right, Green\n            Colors.bgWhite = GreenColors.bgWhite;\n            Colors.bgLightGrey = GreenColors.bgLightGrey;\n            Colors.bgDarkGrey = GreenColors.bgDarkGrey;\n            Colors.bgBlack = GreenColors.bgBlack;\n            Colors.obj0White = GreenColors.obj0White;\n            Colors.obj0LightGrey = GreenColors.obj0LightGrey;\n            Colors.obj0DarkGrey = GreenColors.obj0DarkGrey;\n            Colors.obj0Black = GreenColors.obj0Black;\n            Colors.obj1White = GreenColors.obj1White;\n            Colors.obj1LightGrey = GreenColors.obj1LightGrey;\n            Colors.obj1DarkGrey = GreenColors.obj1DarkGrey;\n            Colors.obj1Black = GreenColors.obj1Black;\n            break;\n        case 5:\n            // Right + A, DarkGreenColors\n            Colors.bgWhite = DarkGreenColors.bgWhite;\n            Colors.bgLightGrey = DarkGreenColors.bgLightGrey;\n            Colors.bgDarkGrey = DarkGreenColors.bgDarkGrey;\n            Colors.bgBlack = DarkGreenColors.bgBlack;\n            Colors.obj0White = DarkGreenColors.obj0White;\n            Colors.obj0LightGrey = DarkGreenColors.obj0LightGrey;\n            Colors.obj0DarkGrey = DarkGreenColors.obj0DarkGrey;\n            Colors.obj0Black = DarkGreenColors.obj0Black;\n            Colors.obj1White = DarkGreenColors.obj1White;\n            Colors.obj1LightGrey = DarkGreenColors.obj1LightGrey;\n            Colors.obj1DarkGrey = DarkGreenColors.obj1DarkGrey;\n            Colors.obj1Black = DarkGreenColors.obj1Black;\n            break;\n        case 6:\n            // Right + B, InvertedColors\n            Colors.bgWhite = InvertedColors.bgWhite;\n            Colors.bgLightGrey = InvertedColors.bgLightGrey;\n            Colors.bgDarkGrey = InvertedColors.bgDarkGrey;\n            Colors.bgBlack = InvertedColors.bgBlack;\n            Colors.obj0White = InvertedColors.obj0White;\n            Colors.obj0LightGrey = InvertedColors.obj0LightGrey;\n            Colors.obj0DarkGrey = InvertedColors.obj0DarkGrey;\n            Colors.obj0Black = InvertedColors.obj0Black;\n            Colors.obj1White = InvertedColors.obj1White;\n            Colors.obj1LightGrey = InvertedColors.obj1LightGrey;\n            Colors.obj1DarkGrey = InvertedColors.obj1DarkGrey;\n            Colors.obj1Black = InvertedColors.obj1Black;\n            break;\n        case 7:\n            // Down, PastelMixColors\n            Colors.bgWhite = PastelMixColors.bgWhite;\n            Colors.bgLightGrey = PastelMixColors.bgLightGrey;\n            Colors.bgDarkGrey = PastelMixColors.bgDarkGrey;\n            Colors.bgBlack = PastelMixColors.bgBlack;\n            Colors.obj0White = PastelMixColors.obj0White;\n            Colors.obj0LightGrey = PastelMixColors.obj0LightGrey;\n            Colors.obj0DarkGrey = PastelMixColors.obj0DarkGrey;\n            Colors.obj0Black = PastelMixColors.obj0Black;\n            Colors.obj1White = PastelMixColors.obj1White;\n            Colors.obj1LightGrey = PastelMixColors.obj1LightGrey;\n            Colors.obj1DarkGrey = PastelMixColors.obj1DarkGrey;\n            Colors.obj1Black = PastelMixColors.obj1Black;\n            break;\n        case 8:\n            // Down + A, Orange\n            Colors.bgWhite = OrangeColors.bgWhite;\n            Colors.bgLightGrey = OrangeColors.bgLightGrey;\n            Colors.bgDarkGrey = OrangeColors.bgDarkGrey;\n            Colors.bgBlack = OrangeColors.bgBlack;\n            Colors.obj0White = OrangeColors.obj0White;\n            Colors.obj0LightGrey = OrangeColors.obj0LightGrey;\n            Colors.obj0DarkGrey = OrangeColors.obj0DarkGrey;\n            Colors.obj0Black = OrangeColors.obj0Black;\n            Colors.obj1White = OrangeColors.obj1White;\n            Colors.obj1LightGrey = OrangeColors.obj1LightGrey;\n            Colors.obj1DarkGrey = OrangeColors.obj1DarkGrey;\n            Colors.obj1Black = OrangeColors.obj1Black;\n            break;\n        case 9:\n            // Down + B, Yellow\n            Colors.bgWhite = YellowColors.bgWhite;\n            Colors.bgLightGrey = YellowColors.bgLightGrey;\n            Colors.bgDarkGrey = YellowColors.bgDarkGrey;\n            Colors.bgBlack = YellowColors.bgBlack;\n            Colors.obj0White = YellowColors.obj0White;\n            Colors.obj0LightGrey = YellowColors.obj0LightGrey;\n            Colors.obj0DarkGrey = YellowColors.obj0DarkGrey;\n            Colors.obj0Black = YellowColors.obj0Black;\n            Colors.obj1White = YellowColors.obj1White;\n            Colors.obj1LightGrey = YellowColors.obj1LightGrey;\n            Colors.obj1DarkGrey = YellowColors.obj1DarkGrey;\n            Colors.obj1Black = YellowColors.obj1Black;\n            break;\n        case 10:\n            // Left, Blue\n            Colors.bgWhite = BlueColors.bgWhite;\n            Colors.bgLightGrey = BlueColors.bgLightGrey;\n            Colors.bgDarkGrey = BlueColors.bgDarkGrey;\n            Colors.bgBlack = BlueColors.bgBlack;\n            Colors.obj0White = BlueColors.obj0White;\n            Colors.obj0LightGrey = BlueColors.obj0LightGrey;\n            Colors.obj0DarkGrey = BlueColors.obj0DarkGrey;\n            Colors.obj0Black = BlueColors.obj0Black;\n            Colors.obj1White = BlueColors.obj1White;\n            Colors.obj1LightGrey = BlueColors.obj1LightGrey;\n            Colors.obj1DarkGrey = BlueColors.obj1DarkGrey;\n            Colors.obj1Black = BlueColors.obj1Black;\n            break;\n        case 11:\n            // Left + A, Dark Blue\n            Colors.bgWhite = DarkBlueColors.bgWhite;\n            Colors.bgLightGrey = DarkBlueColors.bgLightGrey;\n            Colors.bgDarkGrey = DarkBlueColors.bgDarkGrey;\n            Colors.bgBlack = DarkBlueColors.bgBlack;\n            Colors.obj0White = DarkBlueColors.obj0White;\n            Colors.obj0LightGrey = DarkBlueColors.obj0LightGrey;\n            Colors.obj0DarkGrey = DarkBlueColors.obj0DarkGrey;\n            Colors.obj0Black = DarkBlueColors.obj0Black;\n            Colors.obj1White = DarkBlueColors.obj1White;\n            Colors.obj1LightGrey = DarkBlueColors.obj1LightGrey;\n            Colors.obj1DarkGrey = DarkBlueColors.obj1DarkGrey;\n            Colors.obj1Black = DarkBlueColors.obj1Black;\n            break;\n        case 12:\n            // Left + B, GrayScale\n            Colors.bgWhite = GrayscaleColors.bgWhite;\n            Colors.bgLightGrey = GrayscaleColors.bgLightGrey;\n            Colors.bgDarkGrey = GrayscaleColors.bgDarkGrey;\n            Colors.bgBlack = GrayscaleColors.bgBlack;\n            Colors.obj0White = GrayscaleColors.obj0White;\n            Colors.obj0LightGrey = GrayscaleColors.obj0LightGrey;\n            Colors.obj0DarkGrey = GrayscaleColors.obj0DarkGrey;\n            Colors.obj0Black = GrayscaleColors.obj0Black;\n            Colors.obj1White = GrayscaleColors.obj1White;\n            Colors.obj1LightGrey = GrayscaleColors.obj1LightGrey;\n            Colors.obj1DarkGrey = GrayscaleColors.obj1DarkGrey;\n            Colors.obj1Black = GrayscaleColors.obj1Black;\n            break;\n    }\n}\n// Function to set the colorization\n// By checksum of the title\n// https://forums.nesdev.com/viewtopic.php?f=20&t=10226\n// TODO: torch2424 need to find how to get the \"disambiguation\"\n// Inlined because closure compiler inlines\nfunction setHashColorizationPalette(hash) {\n    switch (hash) {\n        case 0x88:\n            Colors.bgWhite = Table00Entry08Colors.bgWhite;\n            Colors.bgLightGrey = Table00Entry08Colors.bgLightGrey;\n            Colors.bgDarkGrey = Table00Entry08Colors.bgDarkGrey;\n            Colors.bgBlack = Table00Entry08Colors.bgBlack;\n            Colors.obj0White = Table00Entry08Colors.obj0White;\n            Colors.obj0LightGrey = Table00Entry08Colors.obj0LightGrey;\n            Colors.obj0DarkGrey = Table00Entry08Colors.obj0DarkGrey;\n            Colors.obj0Black = Table00Entry08Colors.obj0Black;\n            Colors.obj1White = Table00Entry08Colors.obj1White;\n            Colors.obj1LightGrey = Table00Entry08Colors.obj1LightGrey;\n            Colors.obj1DarkGrey = Table00Entry08Colors.obj1DarkGrey;\n            Colors.obj1Black = Table00Entry08Colors.obj1Black;\n            break;\n        case 0x61:\n            Colors.bgWhite = Table01Entry0BColors.bgWhite;\n            Colors.bgLightGrey = Table01Entry0BColors.bgLightGrey;\n            Colors.bgDarkGrey = Table01Entry0BColors.bgDarkGrey;\n            Colors.bgBlack = Table01Entry0BColors.bgBlack;\n            Colors.obj0White = Table01Entry0BColors.obj0White;\n            Colors.obj0LightGrey = Table01Entry0BColors.obj0LightGrey;\n            Colors.obj0DarkGrey = Table01Entry0BColors.obj0DarkGrey;\n            Colors.obj0Black = Table01Entry0BColors.obj0Black;\n            Colors.obj1White = Table01Entry0BColors.obj1White;\n            Colors.obj1LightGrey = Table01Entry0BColors.obj1LightGrey;\n            Colors.obj1DarkGrey = Table01Entry0BColors.obj1DarkGrey;\n            Colors.obj1Black = Table01Entry0BColors.obj1Black;\n            break;\n        case 0x14:\n            Colors.bgWhite = Table01Entry10Colors.bgWhite;\n            Colors.bgLightGrey = Table01Entry10Colors.bgLightGrey;\n            Colors.bgDarkGrey = Table01Entry10Colors.bgDarkGrey;\n            Colors.bgBlack = Table01Entry10Colors.bgBlack;\n            Colors.obj0White = Table01Entry10Colors.obj0White;\n            Colors.obj0LightGrey = Table01Entry10Colors.obj0LightGrey;\n            Colors.obj0DarkGrey = Table01Entry10Colors.obj0DarkGrey;\n            Colors.obj0Black = Table01Entry10Colors.obj0Black;\n            Colors.obj1White = Table01Entry10Colors.obj1White;\n            Colors.obj1LightGrey = Table01Entry10Colors.obj1LightGrey;\n            Colors.obj1DarkGrey = Table01Entry10Colors.obj1DarkGrey;\n            Colors.obj1Black = Table01Entry10Colors.obj1Black;\n            break;\n        case 0x46:\n            Colors.bgWhite = Table03Entry0AColors.bgWhite;\n            Colors.bgLightGrey = Table03Entry0AColors.bgLightGrey;\n            Colors.bgDarkGrey = Table03Entry0AColors.bgDarkGrey;\n            Colors.bgBlack = Table03Entry0AColors.bgBlack;\n            Colors.obj0White = Table03Entry0AColors.obj0White;\n            Colors.obj0LightGrey = Table03Entry0AColors.obj0LightGrey;\n            Colors.obj0DarkGrey = Table03Entry0AColors.obj0DarkGrey;\n            Colors.obj0Black = Table03Entry0AColors.obj0Black;\n            Colors.obj1White = Table03Entry0AColors.obj1White;\n            Colors.obj1LightGrey = Table03Entry0AColors.obj1LightGrey;\n            Colors.obj1DarkGrey = Table03Entry0AColors.obj1DarkGrey;\n            Colors.obj1Black = Table03Entry0AColors.obj1Black;\n            break;\n        case 0x59:\n        case 0xc6:\n            Colors.bgWhite = Table05Entry00Colors.bgWhite;\n            Colors.bgLightGrey = Table05Entry00Colors.bgLightGrey;\n            Colors.bgDarkGrey = Table05Entry00Colors.bgDarkGrey;\n            Colors.bgBlack = Table05Entry00Colors.bgBlack;\n            Colors.obj0White = Table05Entry00Colors.obj0White;\n            Colors.obj0LightGrey = Table05Entry00Colors.obj0LightGrey;\n            Colors.obj0DarkGrey = Table05Entry00Colors.obj0DarkGrey;\n            Colors.obj0Black = Table05Entry00Colors.obj0Black;\n            Colors.obj1White = Table05Entry00Colors.obj1White;\n            Colors.obj1LightGrey = Table05Entry00Colors.obj1LightGrey;\n            Colors.obj1DarkGrey = Table05Entry00Colors.obj1DarkGrey;\n            Colors.obj1Black = Table05Entry00Colors.obj1Black;\n            break;\n        case 0x86:\n        case 0xa8:\n            Colors.bgWhite = Table05Entry01Colors.bgWhite;\n            Colors.bgLightGrey = Table05Entry01Colors.bgLightGrey;\n            Colors.bgDarkGrey = Table05Entry01Colors.bgDarkGrey;\n            Colors.bgBlack = Table05Entry01Colors.bgBlack;\n            Colors.obj0White = Table05Entry01Colors.obj0White;\n            Colors.obj0LightGrey = Table05Entry01Colors.obj0LightGrey;\n            Colors.obj0DarkGrey = Table05Entry01Colors.obj0DarkGrey;\n            Colors.obj0Black = Table05Entry01Colors.obj0Black;\n            Colors.obj1White = Table05Entry01Colors.obj1White;\n            Colors.obj1LightGrey = Table05Entry01Colors.obj1LightGrey;\n            Colors.obj1DarkGrey = Table05Entry01Colors.obj1DarkGrey;\n            Colors.obj1Black = Table05Entry01Colors.obj1Black;\n            break;\n        case 0xbf:\n        case 0xce:\n        case 0xd1:\n        case 0xf0:\n            Colors.bgWhite = Table05Entry02Colors.bgWhite;\n            Colors.bgLightGrey = Table05Entry02Colors.bgLightGrey;\n            Colors.bgDarkGrey = Table05Entry02Colors.bgDarkGrey;\n            Colors.bgBlack = Table05Entry02Colors.bgBlack;\n            Colors.obj0White = Table05Entry02Colors.obj0White;\n            Colors.obj0LightGrey = Table05Entry02Colors.obj0LightGrey;\n            Colors.obj0DarkGrey = Table05Entry02Colors.obj0DarkGrey;\n            Colors.obj0Black = Table05Entry02Colors.obj0Black;\n            Colors.obj1White = Table05Entry02Colors.obj1White;\n            Colors.obj1LightGrey = Table05Entry02Colors.obj1LightGrey;\n            Colors.obj1DarkGrey = Table05Entry02Colors.obj1DarkGrey;\n            Colors.obj1Black = Table05Entry02Colors.obj1Black;\n            break;\n        case 0x27:\n        case 0x49:\n        case 0x5c:\n        case 0xb3:\n            Colors.bgWhite = Table05Entry08Colors.bgWhite;\n            Colors.bgLightGrey = Table05Entry08Colors.bgLightGrey;\n            Colors.bgDarkGrey = Table05Entry08Colors.bgDarkGrey;\n            Colors.bgBlack = Table05Entry08Colors.bgBlack;\n            Colors.obj0White = Table05Entry08Colors.obj0White;\n            Colors.obj0LightGrey = Table05Entry08Colors.obj0LightGrey;\n            Colors.obj0DarkGrey = Table05Entry08Colors.obj0DarkGrey;\n            Colors.obj0Black = Table05Entry08Colors.obj0Black;\n            Colors.obj1White = Table05Entry08Colors.obj1White;\n            Colors.obj1LightGrey = Table05Entry08Colors.obj1LightGrey;\n            Colors.obj1DarkGrey = Table05Entry08Colors.obj1DarkGrey;\n            Colors.obj1Black = Table05Entry08Colors.obj1Black;\n            break;\n        case 0xc9:\n            Colors.bgWhite = Table05Entry09Colors.bgWhite;\n            Colors.bgLightGrey = Table05Entry09Colors.bgLightGrey;\n            Colors.bgDarkGrey = Table05Entry09Colors.bgDarkGrey;\n            Colors.bgBlack = Table05Entry09Colors.bgBlack;\n            Colors.obj0White = Table05Entry09Colors.obj0White;\n            Colors.obj0LightGrey = Table05Entry09Colors.obj0LightGrey;\n            Colors.obj0DarkGrey = Table05Entry09Colors.obj0DarkGrey;\n            Colors.obj0Black = Table05Entry09Colors.obj0Black;\n            Colors.obj1White = Table05Entry09Colors.obj1White;\n            Colors.obj1LightGrey = Table05Entry09Colors.obj1LightGrey;\n            Colors.obj1DarkGrey = Table05Entry09Colors.obj1DarkGrey;\n            Colors.obj1Black = Table05Entry09Colors.obj1Black;\n            break;\n        case 0x70:\n            Colors.bgWhite = Table05Entry11Colors.bgWhite;\n            Colors.bgLightGrey = Table05Entry11Colors.bgLightGrey;\n            Colors.bgDarkGrey = Table05Entry11Colors.bgDarkGrey;\n            Colors.bgBlack = Table05Entry11Colors.bgBlack;\n            Colors.obj0White = Table05Entry11Colors.obj0White;\n            Colors.obj0LightGrey = Table05Entry11Colors.obj0LightGrey;\n            Colors.obj0DarkGrey = Table05Entry11Colors.obj0DarkGrey;\n            Colors.obj0Black = Table05Entry11Colors.obj0Black;\n            Colors.obj1White = Table05Entry11Colors.obj1White;\n            Colors.obj1LightGrey = Table05Entry11Colors.obj1LightGrey;\n            Colors.obj1DarkGrey = Table05Entry11Colors.obj1DarkGrey;\n            Colors.obj1Black = Table05Entry11Colors.obj1Black;\n            break;\n        case 0x46:\n            Colors.bgWhite = Table05Entry14Colors.bgWhite;\n            Colors.bgLightGrey = Table05Entry14Colors.bgLightGrey;\n            Colors.bgDarkGrey = Table05Entry14Colors.bgDarkGrey;\n            Colors.bgBlack = Table05Entry14Colors.bgBlack;\n            Colors.obj0White = Table05Entry14Colors.obj0White;\n            Colors.obj0LightGrey = Table05Entry14Colors.obj0LightGrey;\n            Colors.obj0DarkGrey = Table05Entry14Colors.obj0DarkGrey;\n            Colors.obj0Black = Table05Entry14Colors.obj0Black;\n            Colors.obj1White = Table05Entry14Colors.obj1White;\n            Colors.obj1LightGrey = Table05Entry14Colors.obj1LightGrey;\n            Colors.obj1DarkGrey = Table05Entry14Colors.obj1DarkGrey;\n            Colors.obj1Black = Table05Entry14Colors.obj1Black;\n            break;\n        case 0xd3:\n            Colors.bgWhite = Table05Entry15Colors.bgWhite;\n            Colors.bgLightGrey = Table05Entry15Colors.bgLightGrey;\n            Colors.bgDarkGrey = Table05Entry15Colors.bgDarkGrey;\n            Colors.bgBlack = Table05Entry15Colors.bgBlack;\n            Colors.obj0White = Table05Entry15Colors.obj0White;\n            Colors.obj0LightGrey = Table05Entry15Colors.obj0LightGrey;\n            Colors.obj0DarkGrey = Table05Entry15Colors.obj0DarkGrey;\n            Colors.obj0Black = Table05Entry15Colors.obj0Black;\n            Colors.obj1White = Table05Entry15Colors.obj1White;\n            Colors.obj1LightGrey = Table05Entry15Colors.obj1LightGrey;\n            Colors.obj1DarkGrey = Table05Entry15Colors.obj1DarkGrey;\n            Colors.obj1Black = Table05Entry15Colors.obj1Black;\n            break;\n    }\n}\n\n// Grouped registers\n// possible overload these later to performace actions\n// AF, BC, DE, HL\nfunction concatenateBytes(highByte, lowByte) {\n    //https://stackoverflow.com/questions/38298412/convert-two-bytes-into-signed-16-bit-integer-in-javascript\n    return ((highByte & 0xff) << 8) | (lowByte & 0xff);\n}\nfunction splitHighByte(groupedByte) {\n    return (groupedByte & 0xff00) >> 8;\n}\nfunction splitLowByte(groupedByte) {\n    return groupedByte & 0x00ff;\n}\nfunction rotateByteLeft(value) {\n    // Rotate left\n    // https://stackoverflow.com/questions/19204750/how-do-i-perform-a-circular-rotation-of-a-byte\n    // 4-bit example:\n    // 1010 -> 0100 | 0001\n    return u8Portable((value << 1) | (value >> 7));\n}\nfunction rotateByteLeftThroughCarry(value) {\n    // Example: https://github.com/nakardo/node-gameboy/blob/master/lib/cpu/opcodes.js\n    // Through carry meaning, instead of raotating the bit that gets dropped off, but the carry there instead\n    return u8Portable((value << 1) | getCarryFlag$$1());\n}\nfunction rotateByteRight(value) {\n    // Rotate right\n    // 4-bit example:\n    // 1010 -> 0101 | 0000\n    return u8Portable((value >> 1) | (value << 7));\n}\nfunction rotateByteRightThroughCarry(value) {\n    // Example: https://github.com/nakardo/node-gameboy/blob/master/lib/cpu/opcodes.js\n    // Through carry meaning, instead of raotating the bit that gets dropped off, put the carry there instead\n    return u8Portable((value >> 1) | (getCarryFlag$$1() << 7));\n}\nfunction setBitOnByte(bitPosition, byte) {\n    return byte | (0x01 << bitPosition);\n}\nfunction resetBitOnByte(bitPosition, byte) {\n    return byte & ~(0x01 << bitPosition);\n}\nfunction checkBitOnByte(bitPosition, byte) {\n    // Perforamnce improvements\n    // https://github.com/AssemblyScript/assemblyscript/issues/40\n    return (byte & (1 << bitPosition)) != 0;\n}\n\n// Class for GBC Color palletes\n// http://gbdev.gg8.se/wiki/articles/Video_Display#FF68_-_BCPS.2FBGPI_-_CGB_Mode_Only_-_Background_Palette_Index\nvar Palette = /** @class */ (function () {\n    function Palette() {\n    }\n    Palette.memoryLocationBackgroundPaletteIndex = 0xff68;\n    Palette.memoryLocationBackgroundPaletteData = 0xff69;\n    Palette.memoryLocationSpritePaletteIndex = 0xff6a;\n    Palette.memoryLocationSpritePaletteData = 0xff6b;\n    // Palettes\n    Palette.memoryLocationBackgroundPalette = 0xff47;\n    Palette.memoryLocationSpritePaletteOne = 0xff48;\n    Palette.memoryLocationSpritePaletteTwo = 0xff49;\n    return Palette;\n}());\n// Inlined because closure compiler inlines\nfunction initializePalette() {\n    if (Cpu.GBCEnabled) {\n        // GBC Palettes\n        eightBitStoreIntoGBMemory(0xff68, 0xc0);\n        eightBitStoreIntoGBMemory(0xff69, 0xff);\n        eightBitStoreIntoGBMemory(0xff6a, 0xc1);\n        eightBitStoreIntoGBMemory(0xff6b, 0x0d);\n    }\n    else {\n        // GBC Palettes\n        eightBitStoreIntoGBMemory(0xff68, 0xff);\n        eightBitStoreIntoGBMemory(0xff69, 0xff);\n        eightBitStoreIntoGBMemory(0xff6a, 0xff);\n        eightBitStoreIntoGBMemory(0xff6b, 0xff);\n    }\n    // Override some values if using the bootrom\n    if (Cpu.BootROMEnabled && Cpu.GBCEnabled) {\n        // GBC Palettes\n        eightBitStoreIntoGBMemory(0xff69, 0x20);\n        eightBitStoreIntoGBMemory(0xff6b, 0x8a);\n    }\n}\n// Simple get pallete color or monochrome GB\n// shouldRepresentColorByColorId is good for debugging tile data for GBC games that don't have\n// monochromePalettes\n// Inlined because closure compiler inlines\nfunction getMonochromeColorFromPalette(colorId, paletteMemoryLocation, shouldRepresentColorByColorId) {\n    if (shouldRepresentColorByColorId === void 0) { shouldRepresentColorByColorId = false; }\n    // Shift our paletteByte, 2 times for each color ID\n    // And off any extra bytes\n    // Return our Color (00 - white, 01 - light grey, 10 Dark grey, or 11 - Black)\n    var color = colorId;\n    if (!shouldRepresentColorByColorId) {\n        color = (eightBitLoadFromGBMemory(paletteMemoryLocation) >> (colorId << 1)) & 0x03;\n    }\n    // Since our max is 254, and max is 3.\n    // monochrome color palette is modified from bgb\n    // TODO: Make these colors into a constant\n    var rgbColor = 242;\n    switch (color) {\n        case 0:\n            break;\n        case 1:\n            rgbColor = 160;\n            break;\n        case 2:\n            rgbColor = 88;\n            break;\n        case 3:\n            rgbColor = 8;\n            break;\n    }\n    return rgbColor;\n}\n// Function to returns the Colorized color for a GB games\nfunction getColorizedGbHexColorFromPalette(colorId, paletteMemoryLocation) {\n    // Shift our paletteByte, 2 times for each color ID\n    // And off any extra bytes\n    // Return our Color (00 - white, 01 - light grey, 10 Dark grey, or 11 - Black)\n    var color = (eightBitLoadFromGBMemory(paletteMemoryLocation) >> (colorId * 2)) & 0x03;\n    // Check which palette we got, to apply the right color layer\n    var hexColor = 0;\n    if (paletteMemoryLocation === Palette.memoryLocationSpritePaletteOne) {\n        hexColor = Colors.obj0White;\n        switch (color) {\n            case 0:\n                break;\n            case 1:\n                hexColor = Colors.obj0LightGrey;\n                break;\n            case 2:\n                hexColor = Colors.obj0DarkGrey;\n                break;\n            case 3:\n                hexColor = Colors.obj0Black;\n                break;\n        }\n    }\n    else if (paletteMemoryLocation === Palette.memoryLocationSpritePaletteTwo) {\n        hexColor = Colors.obj1White;\n        switch (color) {\n            case 0:\n                break;\n            case 1:\n                hexColor = Colors.obj1LightGrey;\n                break;\n            case 2:\n                hexColor = Colors.obj1DarkGrey;\n                break;\n            case 3:\n                hexColor = Colors.obj1Black;\n                break;\n        }\n    }\n    else {\n        hexColor = Colors.bgWhite;\n        switch (color) {\n            case 0:\n                break;\n            case 1:\n                hexColor = Colors.bgLightGrey;\n                break;\n            case 2:\n                hexColor = Colors.bgDarkGrey;\n                break;\n            case 3:\n                hexColor = Colors.bgBlack;\n                break;\n        }\n    }\n    return hexColor;\n}\n// Inlined because closure compiler inlines\nfunction writeColorPaletteToMemory(offset, value) {\n    // FF68\n    //  Bit 0-5   Index (00-3F)\n    var memoryLocationSpritePaletteData = Palette.memoryLocationSpritePaletteData;\n    if (offset === Palette.memoryLocationBackgroundPaletteData || offset === memoryLocationSpritePaletteData) {\n        // Get the palette index\n        var paletteIndex = eightBitLoadFromGBMemory(offset - 1);\n        // Clear the 6th bit, as it does nothing\n        paletteIndex = resetBitOnByte(6, paletteIndex);\n        // Check if we are changing the sprite pallete data\n        var isSprite = offset === memoryLocationSpritePaletteData;\n        storePaletteByteInWasmMemory(paletteIndex, value, isSprite);\n        incrementPaletteIndexIfSet(paletteIndex, offset - 1);\n    }\n}\n// Functions to Handle Write to pallete data registers\n// http://gbdev.gg8.se/wiki/articles/Video_Display#FF68_-_BCPS.2FBGPI_-_CGB_Mode_Only_-_Background_Palette_Index\n// Function to handle incrementing the pallete index if required\n// Inlined because closure compiler inlines\nfunction incrementPaletteIndexIfSet(paletteIndex, offset) {\n    // Check ther auto increment box\n    if (checkBitOnByte(7, paletteIndex)) {\n        // Increment the index, and return the value before the increment\n        // Ensure we don't ouverflow our auto increment bit\n        paletteIndex += 1;\n        paletteIndex = setBitOnByte(7, paletteIndex);\n        eightBitStoreIntoGBMemory(offset, paletteIndex);\n    }\n}\n// FF68\n// Bit 0-5   Index (00-3F)\n// Bit 7     Auto Increment  (0=Disabled, 1=Increment after Writing)\n// Index is 00-0x3F because the means 0 - 63 (64),\n// and apparently there are 8 bytes per pallete to describe Color 0-3 (4 colors),\n// and 0-7 (8 palltetes). Therefore, 64!\nfunction getRgbColorFromPalette(paletteId, colorId, isSprite) {\n    // Each Pallete takes 8 bytes, so multiply by 8 to get the pallete\n    // And Each color takes 2 bytes, therefore, multiple by 2 for the correct color bytes in the palette\n    var paletteIndex = paletteId * 8 + colorId * 2;\n    // Load the Color that is seperated into two bytes\n    var paletteHighByte = loadPaletteByteFromWasmMemory(paletteIndex + 1, isSprite);\n    var paletteLowByte = loadPaletteByteFromWasmMemory(paletteIndex, isSprite);\n    // Return the concatenated color byte\n    return concatenateBytes(paletteHighByte, paletteLowByte);\n}\n// Function to return the color from a passed 16 bit color pallette\nfunction getColorComponentFromRgb(colorId, colorRgb) {\n    // Get our bitmask for the color ID\n    // bit mask tested good :)\n    colorId *= 5;\n    var bitMask = 0x1f << colorId;\n    var colorValue = (colorRgb & bitMask) >> colorId;\n    // Goal is to reach 254 for each color, so 255 / 31 (0x1F) ~8 TODO: Make exact\n    // Want 5 bits for each\n    return colorValue * 8;\n}\n// Function to load a byte from our Gbc Palette memory\nfunction loadPaletteByteFromWasmMemory(paletteIndexByte, isSprite) {\n    // Clear the top two bits to just get the bottom palette Index\n    var paletteIndex = paletteIndexByte & 0x3f;\n    // Move over the palette index to not overlap the background has 0x3F, so Zero for Sprites is 0x40)\n    if (isSprite) {\n        paletteIndex += 0x40;\n    }\n    return load(GBC_PALETTE_LOCATION + paletteIndex);\n}\n// Function to store a byte to our Gbc Palette memory\n// Inlined because closure compiler inlines\nfunction storePaletteByteInWasmMemory(paletteIndexByte, value, isSprite) {\n    // Clear the top two bits to just get the bottom palette Index\n    var paletteIndex = paletteIndexByte & 0x3f;\n    // Move over the palette index to not overlap the background (has 0x3F, so Zero for Sprites is 0x40)\n    if (isSprite) {\n        paletteIndex += 0x40;\n    }\n    store(GBC_PALETTE_LOCATION + paletteIndex, value);\n}\n\n// https://github.com/torch2424/wasmBoy/issues/51\nfunction addPriorityforPixel(x, y, colorId, hasGbcBgPriority) {\n    if (colorId === void 0) { colorId = 0; }\n    if (hasGbcBgPriority === void 0) { hasGbcBgPriority = false; }\n    var bgPriorityByte = colorId & 0x03;\n    if (hasGbcBgPriority) {\n        bgPriorityByte = setBitOnByte(2, bgPriorityByte);\n    }\n    store(BG_PRIORITY_MAP_LOCATION + getPixelStart(x, y), bgPriorityByte);\n}\n// Inlined because closure compiler inlines\nfunction getPriorityforPixel(x, y) {\n    return load(BG_PRIORITY_MAP_LOCATION + getPixelStart(x, y));\n}\n// Inlined because closure compiler inlines\nfunction clearPriorityMap() {\n    for (var y = 0; y < 144; ++y) {\n        for (var x = 0; x < 160; ++x) {\n            store(BG_PRIORITY_MAP_LOCATION + getPixelStart(x, y), 0);\n        }\n    }\n}\n// Inlined because closure compiler inlines\nfunction getPixelStart(x, y) {\n    // Get the pixel number\n    return y * 160 + x;\n}\n\n// Functions for performance hacks, and debugging tiles\nvar TileCache = /** @class */ (function () {\n    function TileCache() {\n    }\n    TileCache.tileId = -1;\n    TileCache.horizontalFlip = false;\n    TileCache.nextXIndexToPerformCacheCheck = -1;\n    return TileCache;\n}());\n// Inlined because closure compiler inlines\nfunction resetTileCache() {\n    TileCache.tileId = -1;\n    TileCache.nextXIndexToPerformCacheCheck = -1;\n}\nfunction drawPixelsFromLineOfTile(tileId, tileDataMemoryLocation, vramBankId, tileLineXStart, tileLineXEnd, tileLineY, outputLineX, outputLineY, outputWidth, wasmMemoryStart, shouldRepresentMonochromeColorByColorId, paletteLocation, bgMapAttributes, spriteAttributes) {\n    // Get our number of pixels drawn\n    var pixelsDrawn = 0;\n    // Get our tile data address\n    var tileDataAddress = getTileDataAddress(tileDataMemoryLocation, tileId);\n    // Get the bytes for our tile\n    var byteOneForLineOfTilePixels = loadFromVramBank(tileDataAddress + tileLineY * 2, vramBankId);\n    var byteTwoForLineOfTilePixels = loadFromVramBank(tileDataAddress + tileLineY * 2 + 1, vramBankId);\n    // Loop through our X values to draw\n    for (var x = tileLineXStart; x <= tileLineXEnd; ++x) {\n        // First find where we are going to do our final output x\n        // And don't allow any width overflow\n        var iteratedOutputX = outputLineX + (x - tileLineXStart);\n        if (iteratedOutputX < outputWidth) {\n            // However, We need to reverse our byte (if not horizontally flipped),\n            // As pixel 0 is on byte 7, and pixel 1 is on byte 6, etc...\n            // Therefore, is pixelX was 2, then really is need to be 5\n            // So 2 - 7 = -5, * 1 = 5\n            // Or to simplify, 7 - 2 = 5 haha!\n            var pixelXInTile = x;\n            if (bgMapAttributes < 0 || !checkBitOnByte(5, bgMapAttributes)) {\n                pixelXInTile = 7 - pixelXInTile;\n            }\n            // Get our pallete colors for the tile\n            var paletteColorId = 0;\n            if (checkBitOnByte(pixelXInTile, byteTwoForLineOfTilePixels)) {\n                // Byte one represents the second bit in our color id, so bit shift\n                paletteColorId += 1;\n                paletteColorId = paletteColorId << 1;\n            }\n            if (checkBitOnByte(pixelXInTile, byteOneForLineOfTilePixels)) {\n                paletteColorId += 1;\n            }\n            // Get the pallete\n            var red = 0;\n            var green = 0;\n            var blue = 0;\n            // Check if we should draw color or not\n            if (Cpu.GBCEnabled && (bgMapAttributes >= 0 || spriteAttributes >= 0)) {\n                // Draw C O L O R\n                var isSprite = spriteAttributes >= 0;\n                // Call the helper function to grab the correct color from the palette\n                // Get the palette index byte\n                var bgPalette = bgMapAttributes & 0x07;\n                if (isSprite) {\n                    bgPalette = spriteAttributes & 0x07;\n                }\n                var rgbColorPalette = getRgbColorFromPalette(bgPalette, paletteColorId, isSprite);\n                // Split off into red green and blue\n                red = getColorComponentFromRgb(0, rgbColorPalette);\n                green = getColorComponentFromRgb(1, rgbColorPalette);\n                blue = getColorComponentFromRgb(2, rgbColorPalette);\n            }\n            else {\n                // Draw Monochrome\n                // Get the default palette if none\n                if (paletteLocation <= 0) {\n                    paletteLocation = Graphics.memoryLocationBackgroundPalette;\n                }\n                if (shouldRepresentMonochromeColorByColorId) {\n                    var monochromeColor = getMonochromeColorFromPalette(paletteColorId, paletteLocation, shouldRepresentMonochromeColorByColorId);\n                    red = monochromeColor;\n                    green = monochromeColor;\n                    blue = monochromeColor;\n                }\n                else {\n                    var hexColor = getColorizedGbHexColorFromPalette(paletteColorId, paletteLocation);\n                    red = getRedFromHexColor(hexColor);\n                    green = getGreenFromHexColor(hexColor);\n                    blue = getBlueFromHexColor(hexColor);\n                }\n            }\n            // Finally Lets place a pixel in memory\n            // Find where our tile line would start\n            var pixelStart = getTilePixelStart(iteratedOutputX, outputLineY, outputWidth);\n            // Can not optimize wasmMemoryStart any further, as this is in a loop.\n            store(wasmMemoryStart + pixelStart + 0, red);\n            store(wasmMemoryStart + pixelStart + 1, green);\n            store(wasmMemoryStart + pixelStart + 2, blue);\n            var gbcBgPriority = false;\n            if (bgMapAttributes >= 0) {\n                gbcBgPriority = checkBitOnByte(7, bgMapAttributes);\n            }\n            // Lastly, add the pixel to our background priority map\n            // https://github.com/torch2424/wasmBoy/issues/51\n            // Bits 0 & 1 will represent the color Id drawn by the BG/Window\n            // Bit 2 will represent if the Bg/Window has GBC priority.\n            addPriorityforPixel(iteratedOutputX, outputLineY, paletteColorId, gbcBgPriority);\n            pixelsDrawn++;\n        }\n    }\n    return pixelsDrawn;\n}\n// Inlined because closure compiler inlines\nfunction getTilePixelStart(outputLineX, outputLineY, outputWidth) {\n    // Finally Lets place a pixel in memory\n    var pixelStart = outputLineY * outputWidth + outputLineX;\n    // Each pixel takes 3 slots, therefore, multiply by 3!\n    return pixelStart * 3;\n}\nfunction getTileDataAddress(tileDataMemoryLocation, tileIdFromTileMap) {\n    // Watch this part of The ultimate gameboy talk: https://youtu.be/HyzD8pNlpwI?t=30m50s\n    // A line of 8 pixels on a single tile, is represented by 2 bytes.\n    // since a single tile is 8x8 pixels, 8 * 2 = 16 bytes\n    // Get the tile ID's tile addess from tile data.\n    // For instance, let's say our first line of tile data represents tiles for letters:\n    // a b c d e f g\n    // And we have tileId 0x02. That means we want the tile for the 'c' character\n    // Since each tile is 16 bytes, it would be the starting tileDataAddress + (tileId * tileSize), to skip over tiles we dont want\n    // The whole signed thing is weird, and has something to do how the second set of tile data is stored :p\n    if (tileDataMemoryLocation === Graphics.memoryLocationTileDataSelectZeroStart) {\n        // Treat the tile Id as a signed int, subtract an offset of 128\n        // if the tileId was 0 then the tile would be in memory region 0x9000-0x900F\n        if (checkBitOnByte(7, tileIdFromTileMap)) {\n            tileIdFromTileMap -= 128;\n        }\n        else {\n            tileIdFromTileMap += 128;\n        }\n    }\n    // if the background layout gave us the tileId 0, then the tile data would be between 0x8000-0x800F.\n    return tileDataMemoryLocation + tileIdFromTileMap * 16;\n}\n\n// Functions to help with Handling Duty on Square Channels\n// Since there are no 2d arrays, we will use a byte to represent duty cycles (wave form from percentages)\nfunction isDutyCycleClockPositiveOrNegativeForWaveform(channelDuty, waveFormPositionOnDuty) {\n    // Get our Wave Form According to the Duty\n    // Default to a duty of 1\n    // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Square_Wave\n    switch (channelDuty) {\n        case 0x01:\n            // 1000 0001\n            return checkBitOnByte(waveFormPositionOnDuty, 0x81);\n        case 0x02:\n            // 1000 0111\n            return checkBitOnByte(waveFormPositionOnDuty, 0x87);\n        case 0x03:\n            // 0111 1110\n            return checkBitOnByte(waveFormPositionOnDuty, 0x7e);\n        default:\n            // 0000 0001\n            return checkBitOnByte(waveFormPositionOnDuty, 0x01);\n    }\n}\n\n// NOTE: Tons of Copy-pasta btween channels, because Classes cannot be instantiated yet in assemblyscript\nvar Channel1 = /** @class */ (function () {\n    function Channel1() {\n    }\n    Channel1.updateNRx0 = function (value) {\n        var oldSweepNegate = Channel1.NRx0Negate;\n        Channel1.NRx0SweepPeriod = (value & 0x70) >> 4;\n        Channel1.NRx0Negate = checkBitOnByte(3, value);\n        Channel1.NRx0SweepShift = value & 0x07;\n        // Obscure Behavior\n        // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware\n        // Clearing the sweep negate mode bit in NR10 after at least one sweep calculation has been made,\n        // using the negate mode since the last trigger causes the channel to be immediately disabled.\n        // This prevents you from having the sweep lower the frequency then raise the frequency without a trigger inbetween.\n        if (oldSweepNegate && !Channel1.NRx0Negate && Channel1.sweepNegateShouldDisableChannelOnClear) {\n            Channel1.isEnabled = false;\n        }\n    };\n    Channel1.updateNRx1 = function (value) {\n        Channel1.NRx1Duty = (value >> 6) & 0x03;\n        Channel1.NRx1LengthLoad = value & 0x3f;\n        // Also need to set our length counter. Taken from the old, setChannelLengthCounter\n        // Channel length is determined by 64 (or 256 if channel 3), - the length load\n        // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Registers\n        // Note, this will be different for channel 3\n        Channel1.lengthCounter = Channel1.MAX_LENGTH - Channel1.NRx1LengthLoad;\n    };\n    Channel1.updateNRx2 = function (value) {\n        // Handle \"Zombie Mode\" Obscure behavior\n        // https://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Obscure_Behavior\n        if (Channel1.isEnabled) {\n            // If the old envelope period was zero and the envelope is still doing automatic updates,\n            // volume is incremented by 1, otherwise if the envelope was in subtract mode,\n            // volume is incremented by 2.\n            // NOTE: However, from my testing, it ALWAYS increments by one. This was determined\n            // by my testing for prehistoric man\n            if (Channel1.NRx2EnvelopePeriod === 0 && Channel1.isEnvelopeAutomaticUpdating) {\n                // Volume can't be more than 4 bits\n                Channel1.volume = (Channel1.volume + 1) & 0x0f;\n            }\n            // If the mode was changed (add to subtract or subtract to add),\n            // volume is set to 16-volume. But volume cant be more than 4 bits\n            if (Channel1.NRx2EnvelopeAddMode !== checkBitOnByte(3, value)) {\n                Channel1.volume = (16 - Channel1.volume) & 0x0f;\n            }\n        }\n        // Handle the regular write\n        Channel1.NRx2StartingVolume = (value >> 4) & 0x0f;\n        Channel1.NRx2EnvelopeAddMode = checkBitOnByte(3, value);\n        Channel1.NRx2EnvelopePeriod = value & 0x07;\n        // Also, get our channel is dac enabled\n        var isDacEnabled = (value & 0xf8) > 0;\n        Channel1.isDacEnabled = isDacEnabled;\n        // Blargg length test\n        // Disabling DAC should disable channel immediately\n        if (!isDacEnabled) {\n            Channel1.isEnabled = false;\n        }\n    };\n    Channel1.updateNRx3 = function (value) {\n        Channel1.NRx3FrequencyLSB = value;\n        // Update Channel Frequency\n        Channel1.frequency = (Channel1.NRx4FrequencyMSB << 8) | value;\n    };\n    // NOTE: Order in which these events happen are very particular\n    // And globals can be affected by other functions\n    // Thus, optimizations here should be extremely careful\n    Channel1.updateNRx4 = function (value) {\n        // Handle our Channel frequency first\n        // As this is modified if we trigger for length.\n        var frequencyMSB = value & 0x07;\n        Channel1.NRx4FrequencyMSB = frequencyMSB;\n        Channel1.frequency = (frequencyMSB << 8) | Channel1.NRx3FrequencyLSB;\n        // Obscure behavior\n        // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Obscure_Behavior\n        // Also see blargg's cgb sound test\n        // Extra length clocking occurs when writing to NRx4,\n        // when the frame sequencer's next step is one that,\n        // doesn't clock the length counter.\n        var frameSequencer = Sound.frameSequencer;\n        var doesNextFrameSequencerUpdateLength = (frameSequencer & 1) === 1;\n        var isBeingLengthEnabled = !Channel1.NRx4LengthEnabled && checkBitOnByte(6, value);\n        if (!doesNextFrameSequencerUpdateLength) {\n            // Check lengthEnable\n            if (Channel1.lengthCounter > 0 && isBeingLengthEnabled) {\n                Channel1.lengthCounter -= 1;\n                if (!checkBitOnByte(7, value) && Channel1.lengthCounter === 0) {\n                    Channel1.isEnabled = false;\n                }\n            }\n        }\n        // Set the length enabled from the value\n        Channel1.NRx4LengthEnabled = checkBitOnByte(6, value);\n        // Trigger out channel, unfreeze length if frozen\n        // Triggers should happen after obscure behavior\n        // See test 11 for trigger\n        if (checkBitOnByte(7, value)) {\n            Channel1.trigger();\n            // When we trigger on the obscure behavior, and we reset the length Counter to max\n            // We need to clock\n            if (!doesNextFrameSequencerUpdateLength && Channel1.lengthCounter === Channel1.MAX_LENGTH && Channel1.NRx4LengthEnabled) {\n                Channel1.lengthCounter -= 1;\n            }\n        }\n    };\n    // Function to save the state of the class\n    Channel1.saveState = function () {\n        // Cycle Counter\n        store(getSaveStateMemoryOffset(0x00, Channel1.saveStateSlot), Channel1.cycleCounter);\n        // NRx0\n        store(getSaveStateMemoryOffset(0x04, Channel1.saveStateSlot), Channel1.NRx0SweepPeriod);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x05, Channel1.saveStateSlot), Channel1.NRx0Negate);\n        store(getSaveStateMemoryOffset(0x06, Channel1.saveStateSlot), Channel1.NRx0SweepShift);\n        // NRx1\n        store(getSaveStateMemoryOffset(0x07, Channel1.saveStateSlot), Channel1.NRx1Duty);\n        store(getSaveStateMemoryOffset(0x09, Channel1.saveStateSlot), Channel1.NRx1LengthLoad);\n        // NRx2\n        store(getSaveStateMemoryOffset(0x0a, Channel1.saveStateSlot), Channel1.NRx2StartingVolume);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x0b, Channel1.saveStateSlot), Channel1.NRx2EnvelopeAddMode);\n        store(getSaveStateMemoryOffset(0x0c, Channel1.saveStateSlot), Channel1.NRx2EnvelopePeriod);\n        // NRx3\n        store(getSaveStateMemoryOffset(0x0d, Channel1.saveStateSlot), Channel1.NRx3FrequencyLSB);\n        // NRx4\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x0e, Channel1.saveStateSlot), Channel1.NRx4LengthEnabled);\n        store(getSaveStateMemoryOffset(0x0f, Channel1.saveStateSlot), Channel1.NRx4FrequencyMSB);\n        // Channel Properties\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x10, Channel1.saveStateSlot), Channel1.isEnabled);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x11, Channel1.saveStateSlot), Channel1.isDacEnabled);\n        store(getSaveStateMemoryOffset(0x12, Channel1.saveStateSlot), Channel1.frequency);\n        store(getSaveStateMemoryOffset(0x16, Channel1.saveStateSlot), Channel1.frequencyTimer);\n        store(getSaveStateMemoryOffset(0x1a, Channel1.saveStateSlot), Channel1.envelopeCounter);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x1e, Channel1.saveStateSlot), Channel1.isEnvelopeAutomaticUpdating);\n        store(getSaveStateMemoryOffset(0x1f, Channel1.saveStateSlot), Channel1.lengthCounter);\n        store(getSaveStateMemoryOffset(0x23, Channel1.saveStateSlot), Channel1.volume);\n        // Square Duty\n        store(getSaveStateMemoryOffset(0x27, Channel1.saveStateSlot), Channel1.dutyCycle);\n        store(getSaveStateMemoryOffset(0x28, Channel1.saveStateSlot), Channel1.waveFormPositionOnDuty);\n        // Square Sweep\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x29, Channel1.saveStateSlot), Channel1.isSweepEnabled);\n        store(getSaveStateMemoryOffset(0x2a, Channel1.saveStateSlot), Channel1.sweepCounter);\n        store(getSaveStateMemoryOffset(0x2e, Channel1.saveStateSlot), Channel1.sweepShadowFrequency);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x31, Channel1.saveStateSlot), Channel1.sweepNegateShouldDisableChannelOnClear);\n    };\n    // Function to load the save state from memory\n    Channel1.loadState = function () {\n        // Cycle Counter\n        Channel1.cycleCounter = load(getSaveStateMemoryOffset(0x00, Channel1.cycleCounter));\n        // NRx0\n        Channel1.NRx0SweepPeriod = load(getSaveStateMemoryOffset(0x04, Channel1.saveStateSlot));\n        Channel1.NRx0Negate = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x05, Channel1.saveStateSlot));\n        Channel1.NRx0SweepShift = load(getSaveStateMemoryOffset(0x06, Channel1.saveStateSlot));\n        // NRx1\n        Channel1.NRx1Duty = load(getSaveStateMemoryOffset(0x07, Channel1.saveStateSlot));\n        Channel1.NRx1LengthLoad = load(getSaveStateMemoryOffset(0x09, Channel1.saveStateSlot));\n        // NRx2\n        Channel1.NRx2StartingVolume = load(getSaveStateMemoryOffset(0x0a, Channel1.saveStateSlot));\n        Channel1.NRx2EnvelopeAddMode = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x0b, Channel1.saveStateSlot));\n        Channel1.NRx2EnvelopePeriod = load(getSaveStateMemoryOffset(0x0c, Channel1.saveStateSlot));\n        // NRx3\n        Channel1.NRx3FrequencyLSB = load(getSaveStateMemoryOffset(0x0d, Channel1.saveStateSlot));\n        // NRx4\n        Channel1.NRx4LengthEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x0e, Channel1.saveStateSlot));\n        Channel1.NRx4FrequencyMSB = load(getSaveStateMemoryOffset(0x0f, Channel1.saveStateSlot));\n        // Channel Properties\n        Channel1.isEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x10, Channel1.saveStateSlot));\n        Channel1.isDacEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x11, Channel1.saveStateSlot));\n        Channel1.frequency = load(getSaveStateMemoryOffset(0x12, Channel1.saveStateSlot));\n        Channel1.frequencyTimer = load(getSaveStateMemoryOffset(0x16, Channel1.saveStateSlot));\n        Channel1.envelopeCounter = load(getSaveStateMemoryOffset(0x1a, Channel1.saveStateSlot));\n        Channel1.isEnvelopeAutomaticUpdating = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x1e, Channel1.saveStateSlot));\n        Channel1.lengthCounter = load(getSaveStateMemoryOffset(0x1f, Channel1.saveStateSlot));\n        Channel1.volume = load(getSaveStateMemoryOffset(0x23, Channel1.saveStateSlot));\n        // Square Duty\n        Channel1.dutyCycle = load(getSaveStateMemoryOffset(0x27, Channel1.saveStateSlot));\n        Channel1.waveFormPositionOnDuty = load(getSaveStateMemoryOffset(0x28, Channel1.saveStateSlot));\n        // Square Sweep\n        Channel1.isSweepEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x29, Channel1.saveStateSlot));\n        Channel1.sweepCounter = load(getSaveStateMemoryOffset(0x2a, Channel1.saveStateSlot));\n        Channel1.sweepShadowFrequency = load(getSaveStateMemoryOffset(0x2e, Channel1.saveStateSlot));\n        Channel1.sweepNegateShouldDisableChannelOnClear = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x31, Channel1.saveStateSlot));\n    };\n    Channel1.initialize = function () {\n        eightBitStoreIntoGBMemory(Channel1.memoryLocationNRx0, 0x80);\n        eightBitStoreIntoGBMemory(Channel1.memoryLocationNRx1, 0xbf);\n        eightBitStoreIntoGBMemory(Channel1.memoryLocationNRx2, 0xf3);\n        eightBitStoreIntoGBMemory(Channel1.memoryLocationNRx3, 0xc1);\n        eightBitStoreIntoGBMemory(Channel1.memoryLocationNRx4, 0xbf);\n        // Override/reset some variables if the boot ROM is enabled\n        // For GBC and GB\n        if (Cpu.BootROMEnabled) {\n            eightBitStoreIntoGBMemory(Channel1.memoryLocationNRx1, 0x3f);\n            eightBitStoreIntoGBMemory(Channel1.memoryLocationNRx2, 0x00);\n            eightBitStoreIntoGBMemory(Channel1.memoryLocationNRx3, 0x00);\n            eightBitStoreIntoGBMemory(Channel1.memoryLocationNRx4, 0xb8);\n        }\n    };\n    // Function to get a sample using the cycle counter on the channel\n    Channel1.getSampleFromCycleCounter = function () {\n        var accumulatedCycles = Channel1.cycleCounter;\n        Channel1.cycleCounter = 0;\n        return Channel1.getSample(accumulatedCycles);\n    };\n    // Function to reset our timer, useful for GBC double speed mode\n    Channel1.resetTimer = function () {\n        var frequencyTimer = (2048 - Channel1.frequency) << 2;\n        // TODO: Ensure this is correct for GBC Double Speed Mode\n        if (Cpu.GBCDoubleSpeed) {\n            frequencyTimer = frequencyTimer << 2;\n        }\n        Channel1.frequencyTimer = frequencyTimer;\n    };\n    Channel1.getSample = function (numberOfCycles) {\n        // Decrement our channel timer\n        var frequencyTimer = Channel1.frequencyTimer;\n        frequencyTimer -= numberOfCycles;\n        while (frequencyTimer <= 0) {\n            // Get the amount that overflowed so we don't drop cycles\n            var overflowAmount = abs(frequencyTimer);\n            // Reset our timer\n            // A square channel's frequency timer period is set to (2048-frequency)*4.\n            // Four duty cycles are available, each waveform taking 8 frequency timer clocks to cycle through:\n            Channel1.resetTimer();\n            frequencyTimer = Channel1.frequencyTimer;\n            frequencyTimer -= overflowAmount;\n            // Also increment our duty cycle\n            // What is duty? https://en.wikipedia.org/wiki/Duty_cycle\n            // Duty cycle for square wave: http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Square_Wave\n            Channel1.waveFormPositionOnDuty = (Channel1.waveFormPositionOnDuty + 1) & 7;\n        }\n        Channel1.frequencyTimer = frequencyTimer;\n        // Get our ourput volume\n        var outputVolume = 0;\n        // Finally to set our output volume, the channel must be enabled,\n        // Our channel DAC must be enabled, and we must be in an active state\n        // Of our duty cycle\n        if (Channel1.isEnabled && Channel1.isDacEnabled) {\n            // Volume can't be more than 4 bits.\n            // Volume should never be more than 4 bits, but doing a check here\n            outputVolume = Channel1.volume & 0x0f;\n        }\n        else {\n            // Return silence\n            // Since range from -15 - 15, or 0 to 30 for our unsigned\n            return 15;\n        }\n        // Get the current sampleValue\n        var sample = 1;\n        if (!isDutyCycleClockPositiveOrNegativeForWaveform(Channel1.NRx1Duty, Channel1.waveFormPositionOnDuty)) {\n            sample = -sample;\n        }\n        sample *= outputVolume;\n        // Square Waves Can range from -15 - 15. Therefore simply add 15\n        sample += 15;\n        return sample;\n    };\n    // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Trigger_Event\n    Channel1.trigger = function () {\n        Channel1.isEnabled = true;\n        // Set length to maximum done in write\n        if (Channel1.lengthCounter === 0) {\n            Channel1.lengthCounter = Channel1.MAX_LENGTH;\n        }\n        // Reset our timer\n        // A square channel's frequency timer period is set to (2048-frequency)*4.\n        // Four duty cycles are available, each waveform taking 8 frequency timer clocks to cycle through:\n        Channel1.resetTimer();\n        // The volume envelope and sweep timers treat a period of 0 as 8.\n        // Meaning, if the period is zero, set it to the max (8).\n        if (Channel1.NRx2EnvelopePeriod === 0) {\n            Channel1.envelopeCounter = 8;\n        }\n        else {\n            Channel1.envelopeCounter = Channel1.NRx2EnvelopePeriod;\n        }\n        Channel1.isEnvelopeAutomaticUpdating = true;\n        Channel1.volume = Channel1.NRx2StartingVolume;\n        // Handle Channel Sweep\n        // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware\n        Channel1.sweepShadowFrequency = Channel1.frequency;\n        // Reset back to the sweep period\n        // Obscure behavior\n        // Sweep timers treat a period o 0 as 8\n        if (Channel1.NRx0SweepPeriod === 0) {\n            Channel1.sweepCounter = 8;\n        }\n        else {\n            Channel1.sweepCounter = Channel1.NRx0SweepPeriod;\n        }\n        // The internal enabled flag is set if either the sweep period or shift are non-zero, cleared otherwise.\n        Channel1.isSweepEnabled = Channel1.NRx0SweepPeriod > 0 || Channel1.NRx0SweepShift > 0;\n        Channel1.sweepNegateShouldDisableChannelOnClear = false;\n        // If the sweep shift is non-zero, frequency calculation and the overflow check are performed immediately.\n        // NOTE: The double calculation thing for the sweep does not happen here.\n        if (Channel1.NRx0SweepShift > 0 && didCalculatedSweepOverflow(calculateSweep())) {\n            Channel1.isEnabled = false;\n        }\n        // Finally if DAC is off, channel is still disabled\n        if (!Channel1.isDacEnabled) {\n            Channel1.isEnabled = false;\n        }\n    };\n    // Function to determine if the current channel would update when getting the sample\n    // This is used to accumulate samples\n    Channel1.willChannelUpdate = function (numberOfCycles) {\n        //Increment our cycle counter\n        var cycleCounter = Channel1.cycleCounter + numberOfCycles;\n        Channel1.cycleCounter = cycleCounter;\n        // Dac enabled status cached by accumulator\n        return !(Channel1.frequencyTimer - cycleCounter > 0);\n    };\n    Channel1.updateSweep = function () {\n        // Dont update period if not enabled\n        if (!Channel1.isEnabled || !Channel1.isSweepEnabled) {\n            return;\n        }\n        // Decrement the sweep counter\n        var sweepCounter = Channel1.sweepCounter - 1;\n        if (sweepCounter <= 0) {\n            // Reset back to the sweep period\n            // Obscure behavior\n            // Sweep timers treat a period of 0 as 8 (They reset back to the max)\n            if (Channel1.NRx0SweepPeriod === 0) {\n                // Sweep isn't calculated when the period is 0\n                Channel1.sweepCounter = 8;\n            }\n            else {\n                // Reset our sweep counter to its period\n                Channel1.sweepCounter = Channel1.NRx0SweepPeriod;\n                // Calculate our sweep\n                // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware\n                // When it generates a clock and the sweep's internal enabled flag is set and the sweep period is not zero,\n                // a new frequency is calculated and the overflow check is performed. If the new frequency is 2047 or less,\n                // and the sweep shift is not zero, this new frequency is written back to the shadow frequency,\n                // and square 1's frequency in NR13 and NR14, then frequency calculation,\n                // and overflow check are run AGAIN immediately using this new value,\n                // but this second new frequency is not written back.\n                var newFrequency = calculateSweep();\n                if (didCalculatedSweepOverflow(newFrequency)) {\n                    Channel1.isEnabled = false;\n                }\n                if (Channel1.NRx0SweepShift > 0) {\n                    Channel1.setFrequency(newFrequency);\n                    if (didCalculatedSweepOverflow(calculateSweep())) {\n                        Channel1.isEnabled = false;\n                    }\n                }\n            }\n        }\n        else {\n            Channel1.sweepCounter = sweepCounter;\n        }\n    };\n    Channel1.updateLength = function () {\n        var lengthCounter = Channel1.lengthCounter;\n        if (lengthCounter > 0 && Channel1.NRx4LengthEnabled) {\n            lengthCounter -= 1;\n            if (lengthCounter === 0) {\n                Channel1.isEnabled = false;\n            }\n        }\n        Channel1.lengthCounter = lengthCounter;\n    };\n    Channel1.updateEnvelope = function () {\n        var envelopeCounter = Channel1.envelopeCounter - 1;\n        if (envelopeCounter <= 0) {\n            // Reset back to the sweep period\n            // Obscure behavior\n            // Envelopes treat a period of 0 as 8 (They reset back to the max)\n            if (Channel1.NRx2EnvelopePeriod === 0) {\n                envelopeCounter = 8;\n            }\n            else {\n                envelopeCounter = Channel1.NRx2EnvelopePeriod;\n                // When the timer generates a clock and the envelope period is NOT zero, a new volume is calculated\n                // NOTE: There is some weiirrdd obscure behavior where zero can equal 8, so watch out for that\n                // If notes are sustained for too long, this is probably why\n                if (envelopeCounter !== 0 && Channel1.isEnvelopeAutomaticUpdating) {\n                    var volume = Channel1.volume;\n                    // Increment the volume\n                    if (Channel1.NRx2EnvelopeAddMode) {\n                        volume += 1;\n                    }\n                    else {\n                        volume -= 1;\n                    }\n                    // Don't allow the volume to go above 4 bits.\n                    volume = volume & 0x0f;\n                    // Check if we are below the max\n                    if (volume < 15) {\n                        Channel1.volume = volume;\n                    }\n                    else {\n                        Channel1.isEnvelopeAutomaticUpdating = false;\n                    }\n                }\n            }\n        }\n        Channel1.envelopeCounter = envelopeCounter;\n    };\n    Channel1.setFrequency = function (frequency) {\n        // Set our shadowFrequency\n        Channel1.sweepShadowFrequency = frequency;\n        // Get the high and low bits\n        var passedFrequencyHighBits = (frequency >> 8) & 0x07;\n        var passedFrequencyLowBits = frequency & 0xff;\n        // Get the new register 4\n        var register4 = eightBitLoadFromGBMemory(Channel1.memoryLocationNRx4);\n        // Knock off lower 3 bits, and Or on our high bits\n        var newRegister4 = register4 & 0xf8;\n        newRegister4 = newRegister4 | passedFrequencyHighBits;\n        // Set the registers\n        eightBitStoreIntoGBMemory(Channel1.memoryLocationNRx3, passedFrequencyLowBits);\n        eightBitStoreIntoGBMemory(Channel1.memoryLocationNRx4, newRegister4);\n        // Save the frequency for ourselves without triggering memory traps\n        Channel1.NRx3FrequencyLSB = passedFrequencyLowBits;\n        Channel1.NRx4FrequencyMSB = passedFrequencyHighBits;\n        Channel1.frequency = (Channel1.NRx4FrequencyMSB << 8) | Channel1.NRx3FrequencyLSB;\n    };\n    // Cycle Counter for our sound accumulator\n    Channel1.cycleCounter = 0;\n    // Max Length of our Length Load\n    Channel1.MAX_LENGTH = 64;\n    // Squarewave channel with volume envelope and frequency sweep functions.\n    // NR10 -> Sweep Register R/W\n    Channel1.memoryLocationNRx0 = 0xff10;\n    // -PPP NSSS Sweep period, negate, shift\n    Channel1.NRx0SweepPeriod = 0;\n    Channel1.NRx0Negate = false;\n    Channel1.NRx0SweepShift = 0;\n    // NR11 -> Sound length/Wave pattern duty (R/W)\n    Channel1.memoryLocationNRx1 = 0xff11;\n    // DDLL LLLL Duty, Length load (64-L)\n    Channel1.NRx1Duty = 0;\n    Channel1.NRx1LengthLoad = 0;\n    // NR12 -> Volume Envelope (R/W)\n    Channel1.memoryLocationNRx2 = 0xff12;\n    // VVVV APPP Starting volume, Envelope add mode, period\n    Channel1.NRx2StartingVolume = 0;\n    Channel1.NRx2EnvelopeAddMode = false;\n    Channel1.NRx2EnvelopePeriod = 0;\n    // NR13 -> Frequency lo (W)\n    Channel1.memoryLocationNRx3 = 0xff13;\n    // FFFF FFFF Frequency LSB\n    Channel1.NRx3FrequencyLSB = 0;\n    // NR14 -> Frequency hi (R/W)\n    Channel1.memoryLocationNRx4 = 0xff14;\n    // TL-- -FFF Trigger, Length enable, Frequency MSB\n    Channel1.NRx4LengthEnabled = false;\n    Channel1.NRx4FrequencyMSB = 0;\n    // Channel Properties\n    Channel1.channelNumber = 1;\n    Channel1.isEnabled = false;\n    Channel1.isDacEnabled = false;\n    Channel1.frequency = 0;\n    Channel1.frequencyTimer = 0x00;\n    Channel1.envelopeCounter = 0x00;\n    Channel1.isEnvelopeAutomaticUpdating = false;\n    Channel1.lengthCounter = 0x00;\n    Channel1.volume = 0x00;\n    // Square Wave properties\n    Channel1.dutyCycle = 0x00;\n    Channel1.waveFormPositionOnDuty = 0x00;\n    // Channel 1 Sweep\n    Channel1.isSweepEnabled = false;\n    Channel1.sweepCounter = 0x00;\n    Channel1.sweepShadowFrequency = 0x00;\n    Channel1.sweepNegateShouldDisableChannelOnClear = false;\n    // Save States\n    Channel1.saveStateSlot = 7;\n    return Channel1;\n}());\n// Sweep Specific functions\n// Function to determing a new sweep in the current context\nfunction calculateSweep() {\n    // Start our new frequency, by making it equal to the \"shadow frequency\"\n    var oldFrequency = Channel1.sweepShadowFrequency;\n    var newFrequency = oldFrequency >> Channel1.NRx0SweepShift;\n    // Check for sweep negation\n    if (Channel1.NRx0Negate) {\n        Channel1.sweepNegateShouldDisableChannelOnClear = true;\n        newFrequency = oldFrequency - newFrequency;\n    }\n    else {\n        newFrequency = oldFrequency + newFrequency;\n    }\n    return newFrequency;\n}\n// Function to check if a calculated sweep overflowed\nfunction didCalculatedSweepOverflow(calculatedSweep) {\n    // 7FF is the highest value of the frequency: 111 1111 1111\n    // if it overflows, should disable the channel (handled by the caller)\n    if (calculatedSweep > 0x7ff) {\n        return true;\n    }\n    return false;\n}\n\n// NOTE: Tons of Copy-pasta btween channels, because Classes cannot be instantiated yet in assemblyscript\nvar Channel2 = /** @class */ (function () {\n    function Channel2() {\n    }\n    Channel2.updateNRx1 = function (value) {\n        Channel2.NRx1Duty = (value >> 6) & 0x03;\n        Channel2.NRx1LengthLoad = value & 0x3f;\n        // Also need to set our length counter. Taken from the old, setChannelLengthCounter\n        // Channel length is determined by 64 (or 256 if channel 3), - the length load\n        // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Registers\n        // Note, this will be different for channel 3\n        Channel2.lengthCounter = Channel2.MAX_LENGTH - Channel2.NRx1LengthLoad;\n    };\n    Channel2.updateNRx2 = function (value) {\n        // Handle \"Zombie Mode\" Obscure behavior\n        // https://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Obscure_Behavior\n        if (Channel2.isEnabled) {\n            // If the old envelope period was zero and the envelope is still doing automatic updates,\n            // volume is incremented by 1, otherwise if the envelope was in subtract mode,\n            // volume is incremented by 2.\n            // NOTE: However, from my testing, it ALWAYS increments by one. This was determined\n            // by my testing for prehistoric man\n            if (Channel2.NRx2EnvelopePeriod === 0 && Channel2.isEnvelopeAutomaticUpdating) {\n                // Volume can't be more than 4 bits\n                Channel2.volume = (Channel2.volume + 1) & 0x0f;\n            }\n            // If the mode was changed (add to subtract or subtract to add),\n            // volume is set to 16-volume. But volume cant be more than 4 bits\n            if (Channel2.NRx2EnvelopeAddMode !== checkBitOnByte(3, value)) {\n                Channel2.volume = (16 - Channel2.volume) & 0x0f;\n            }\n        }\n        Channel2.NRx2StartingVolume = (value >> 4) & 0x0f;\n        Channel2.NRx2EnvelopeAddMode = checkBitOnByte(3, value);\n        Channel2.NRx2EnvelopePeriod = value & 0x07;\n        // Also, get our channel is dac enabled\n        var isDacEnabled = (value & 0xf8) > 0;\n        Channel2.isDacEnabled = isDacEnabled;\n        // Blargg length test\n        // Disabling DAC should disable channel immediately\n        if (!isDacEnabled) {\n            Channel2.isEnabled = isDacEnabled;\n        }\n    };\n    Channel2.updateNRx3 = function (value) {\n        Channel2.NRx3FrequencyLSB = value;\n        // Update Channel Frequency\n        Channel2.frequency = (Channel2.NRx4FrequencyMSB << 8) | value;\n    };\n    Channel2.updateNRx4 = function (value) {\n        // Handle our Channel frequency first\n        // As this is modified if we trigger for length.\n        var frequencyMSB = value & 0x07;\n        Channel2.NRx4FrequencyMSB = frequencyMSB;\n        Channel2.frequency = (frequencyMSB << 8) | Channel2.NRx3FrequencyLSB;\n        // Obscure behavior\n        // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Obscure_Behavior\n        // Also see blargg's cgb sound test\n        // Extra length clocking occurs when writing to NRx4,\n        // when the frame sequencer's next step is one that,\n        // doesn't clock the length counter.\n        var frameSequencer = Sound.frameSequencer;\n        var doesNextFrameSequencerUpdateLength = (frameSequencer & 1) === 1;\n        var isBeingLengthEnabled = !Channel2.NRx4LengthEnabled && checkBitOnByte(6, value);\n        if (!doesNextFrameSequencerUpdateLength) {\n            if (Channel2.lengthCounter > 0 && isBeingLengthEnabled) {\n                Channel2.lengthCounter -= 1;\n                if (!checkBitOnByte(7, value) && Channel2.lengthCounter === 0) {\n                    Channel2.isEnabled = false;\n                }\n            }\n        }\n        // Set the length enabled from the value\n        Channel2.NRx4LengthEnabled = checkBitOnByte(6, value);\n        // Trigger out channel, unfreeze length if frozen\n        // Triggers should happen after obscure behavior\n        // See test 11 for trigger\n        if (checkBitOnByte(7, value)) {\n            Channel2.trigger();\n            // When we trigger on the obscure behavior, and we reset the length Counter to max\n            // We need to clock\n            if (!doesNextFrameSequencerUpdateLength && Channel2.lengthCounter === Channel2.MAX_LENGTH && Channel2.NRx4LengthEnabled) {\n                Channel2.lengthCounter -= 1;\n            }\n        }\n    };\n    // Function to save the state of the class\n    Channel2.saveState = function () {\n        // Cycle Counter\n        store(getSaveStateMemoryOffset(0x00, Channel2.saveStateSlot), Channel2.cycleCounter);\n        // NRx0\n        // No NRx0 Properties\n        // NRx1\n        store(getSaveStateMemoryOffset(0x07, Channel2.saveStateSlot), Channel2.NRx1Duty);\n        store(getSaveStateMemoryOffset(0x08, Channel2.saveStateSlot), Channel2.NRx1LengthLoad);\n        // NRx2\n        store(getSaveStateMemoryOffset(0x0a, Channel2.saveStateSlot), Channel2.NRx2StartingVolume);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x0b, Channel2.saveStateSlot), Channel2.NRx2EnvelopeAddMode);\n        store(getSaveStateMemoryOffset(0x0c, Channel2.saveStateSlot), Channel2.NRx2EnvelopePeriod);\n        // NRx3\n        store(getSaveStateMemoryOffset(0x0d, Channel2.saveStateSlot), Channel2.NRx3FrequencyLSB);\n        // NRx4\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x0e, Channel2.saveStateSlot), Channel2.NRx4LengthEnabled);\n        store(getSaveStateMemoryOffset(0x0f, Channel2.saveStateSlot), Channel2.NRx4FrequencyMSB);\n        // Channel Properties\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x10, Channel2.saveStateSlot), Channel2.isEnabled);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x11, Channel2.saveStateSlot), Channel2.isDacEnabled);\n        store(getSaveStateMemoryOffset(0x12, Channel2.saveStateSlot), Channel2.frequency);\n        store(getSaveStateMemoryOffset(0x16, Channel2.saveStateSlot), Channel2.frequencyTimer);\n        store(getSaveStateMemoryOffset(0x1a, Channel2.saveStateSlot), Channel2.envelopeCounter);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x1e, Channel2.saveStateSlot), Channel2.isEnvelopeAutomaticUpdating);\n        store(getSaveStateMemoryOffset(0x1f, Channel2.saveStateSlot), Channel2.lengthCounter);\n        store(getSaveStateMemoryOffset(0x23, Channel2.saveStateSlot), Channel2.volume);\n        // Square Duty\n        store(getSaveStateMemoryOffset(0x27, Channel2.saveStateSlot), Channel2.dutyCycle);\n        store(getSaveStateMemoryOffset(0x28, Channel2.saveStateSlot), Channel2.waveFormPositionOnDuty);\n    };\n    // Function to load the save state from memory\n    Channel2.loadState = function () {\n        // Cycle Counter\n        Channel2.cycleCounter = load(getSaveStateMemoryOffset(0x00, Channel2.cycleCounter));\n        // NRx0\n        // No NRx0\n        // NRx1\n        Channel2.NRx1Duty = load(getSaveStateMemoryOffset(0x07, Channel2.saveStateSlot));\n        Channel2.NRx1LengthLoad = load(getSaveStateMemoryOffset(0x08, Channel2.saveStateSlot));\n        // NRx2\n        Channel2.NRx2StartingVolume = load(getSaveStateMemoryOffset(0xa, Channel2.saveStateSlot));\n        Channel2.NRx2EnvelopeAddMode = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x0b, Channel2.saveStateSlot));\n        Channel2.NRx2EnvelopePeriod = load(getSaveStateMemoryOffset(0x0c, Channel2.saveStateSlot));\n        // NRx3\n        Channel2.NRx3FrequencyLSB = load(getSaveStateMemoryOffset(0x0d, Channel2.saveStateSlot));\n        // NRx4\n        Channel2.NRx4LengthEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x0e, Channel2.saveStateSlot));\n        Channel2.NRx4FrequencyMSB = load(getSaveStateMemoryOffset(0x0f, Channel2.saveStateSlot));\n        // Channel Properties\n        Channel2.isEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x10, Channel2.saveStateSlot));\n        Channel2.isDacEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x11, Channel2.saveStateSlot));\n        Channel2.frequency = load(getSaveStateMemoryOffset(0x12, Channel2.saveStateSlot));\n        Channel2.frequencyTimer = load(getSaveStateMemoryOffset(0x16, Channel2.saveStateSlot));\n        Channel2.envelopeCounter = load(getSaveStateMemoryOffset(0x1a, Channel2.saveStateSlot));\n        Channel2.isEnvelopeAutomaticUpdating = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x1e, Channel2.saveStateSlot));\n        Channel2.lengthCounter = load(getSaveStateMemoryOffset(0x1f, Channel2.saveStateSlot));\n        Channel2.volume = load(getSaveStateMemoryOffset(0x23, Channel2.saveStateSlot));\n        // Square Duty\n        Channel2.dutyCycle = load(getSaveStateMemoryOffset(0x27, Channel2.saveStateSlot));\n        Channel2.waveFormPositionOnDuty = load(getSaveStateMemoryOffset(0x28, Channel2.saveStateSlot));\n    };\n    Channel2.initialize = function () {\n        eightBitStoreIntoGBMemory(Channel2.memoryLocationNRx1 - 1, 0xff);\n        eightBitStoreIntoGBMemory(Channel2.memoryLocationNRx1, 0x3f);\n        eightBitStoreIntoGBMemory(Channel2.memoryLocationNRx2, 0x00);\n        eightBitStoreIntoGBMemory(Channel2.memoryLocationNRx3, 0x00);\n        eightBitStoreIntoGBMemory(Channel2.memoryLocationNRx4, 0xb8);\n    };\n    // Function to get a sample using the cycle counter on the channel\n    Channel2.getSampleFromCycleCounter = function () {\n        var accumulatedCycles = Channel2.cycleCounter;\n        Channel2.cycleCounter = 0;\n        return Channel2.getSample(accumulatedCycles);\n    };\n    // Function to reset our timer, useful for GBC double speed mode\n    Channel2.resetTimer = function () {\n        var frequencyTimer = (2048 - Channel2.frequency) << 2;\n        // TODO: Ensure this is correct for GBC Double Speed Mode\n        Channel2.frequencyTimer = frequencyTimer << Cpu.GBCDoubleSpeed;\n    };\n    Channel2.getSample = function (numberOfCycles) {\n        // Decrement our channel timer\n        var frequencyTimer = Channel2.frequencyTimer;\n        frequencyTimer -= numberOfCycles;\n        while (frequencyTimer <= 0) {\n            // Get the amount that overflowed so we don't drop cycles\n            var overflowAmount = abs(frequencyTimer);\n            // Reset our timer\n            // A square channel's frequency timer period is set to (2048-frequency)*4.\n            // Four duty cycles are available, each waveform taking 8 frequency timer clocks to cycle through:\n            Channel2.resetTimer();\n            frequencyTimer = Channel2.frequencyTimer;\n            frequencyTimer -= overflowAmount;\n            // Also increment our duty cycle\n            // What is duty? https://en.wikipedia.org/wiki/Duty_cycle\n            // Duty cycle for square wave: http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Square_Wave\n            Channel2.waveFormPositionOnDuty = (Channel2.waveFormPositionOnDuty + 1) & 7;\n        }\n        Channel2.frequencyTimer = frequencyTimer;\n        // Get our ourput volume\n        var outputVolume = 0;\n        // Finally to set our output volume, the channel must be enabled,\n        // Our channel DAC must be enabled, and we must be in an active state\n        // Of our duty cycle\n        if (Channel2.isEnabled && Channel2.isDacEnabled) {\n            // Volume can't be more than 4 bits.\n            // Volume should never be more than 4 bits, but doing a check here\n            outputVolume = Channel2.volume & 0x0f;\n        }\n        else {\n            // Return silence\n            // Since range from -15 - 15, or 0 to 30 for our unsigned\n            return 15;\n        }\n        // Get the current sampleValue\n        var sample = 1;\n        if (!isDutyCycleClockPositiveOrNegativeForWaveform(Channel2.NRx1Duty, Channel2.waveFormPositionOnDuty)) {\n            sample = -sample;\n        }\n        sample = sample * outputVolume;\n        // Square Waves Can range from -15 - 15. Therefore simply add 15\n        sample += 15;\n        return sample;\n    };\n    //http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Trigger_Event\n    Channel2.trigger = function () {\n        Channel2.isEnabled = true;\n        // Set length to maximum done in write\n        if (Channel2.lengthCounter === 0) {\n            Channel2.lengthCounter = Channel2.MAX_LENGTH;\n        }\n        // Reset our timer\n        // A square channel's frequency timer period is set to (2048-frequency)*4.\n        // Four duty cycles are available, each waveform taking 8 frequency timer clocks to cycle through:\n        Channel2.resetTimer();\n        // The volume envelope and sweep timers treat a period of 0 as 8.\n        // Meaning, if the period is zero, set it to the max (8).\n        if (Channel2.NRx2EnvelopePeriod === 0) {\n            Channel2.envelopeCounter = 8;\n        }\n        else {\n            Channel2.envelopeCounter = Channel2.NRx2EnvelopePeriod;\n        }\n        Channel2.isEnvelopeAutomaticUpdating = true;\n        Channel2.volume = Channel2.NRx2StartingVolume;\n        // Finally if DAC is off, channel is still disabled\n        if (!Channel2.isDacEnabled) {\n            Channel2.isEnabled = false;\n        }\n    };\n    // Function to determine if the current channel would update when getting the sample\n    // This is used to accumulate samples\n    Channel2.willChannelUpdate = function (numberOfCycles) {\n        //Increment our cycle counter\n        var cycleCounter = Channel2.cycleCounter + numberOfCycles;\n        Channel2.cycleCounter = cycleCounter;\n        // Dac enabled status cached by accumulator\n        return !(Channel2.frequencyTimer - cycleCounter > 0);\n    };\n    Channel2.updateLength = function () {\n        var lengthCounter = Channel2.lengthCounter;\n        if (lengthCounter > 0 && Channel2.NRx4LengthEnabled) {\n            lengthCounter -= 1;\n        }\n        if (lengthCounter === 0) {\n            Channel2.isEnabled = false;\n        }\n        Channel2.lengthCounter = lengthCounter;\n    };\n    Channel2.updateEnvelope = function () {\n        var envelopeCounter = Channel2.envelopeCounter - 1;\n        if (envelopeCounter <= 0) {\n            // Reset back to the sweep period\n            // Obscure behavior\n            // Envelopes treat a period of 0 as 8 (They reset back to the max)\n            if (Channel2.NRx2EnvelopePeriod === 0) {\n                envelopeCounter = 8;\n            }\n            else {\n                envelopeCounter = Channel2.NRx2EnvelopePeriod;\n                // When the timer generates a clock and the envelope period is NOT zero, a new volume is calculated\n                // NOTE: There is some weiirrdd obscure behavior where zero can equal 8, so watch out for that\n                if (envelopeCounter !== 0 && Channel2.isEnvelopeAutomaticUpdating) {\n                    var volume = Channel2.volume;\n                    // Increment the volume\n                    if (Channel2.NRx2EnvelopeAddMode) {\n                        volume += 1;\n                    }\n                    else {\n                        volume -= 1;\n                    }\n                    // Don't allow the volume to go above 4 bits.\n                    volume = volume & 0x0f;\n                    // Check if we are below the max\n                    if (volume < 15) {\n                        Channel2.volume = volume;\n                    }\n                    else {\n                        Channel2.isEnvelopeAutomaticUpdating = false;\n                    }\n                }\n            }\n        }\n        Channel2.envelopeCounter = envelopeCounter;\n    };\n    Channel2.setFrequency = function (frequency) {\n        // Get the high and low bits\n        var passedFrequencyHighBits = frequency >> 8;\n        var passedFrequencyLowBits = frequency & 0xff;\n        // Get the new register 4\n        var register4 = eightBitLoadFromGBMemory(Channel2.memoryLocationNRx4);\n        // Knock off lower 3 bits, and Or on our high bits\n        var newRegister4 = register4 & 0xf8;\n        newRegister4 = newRegister4 | passedFrequencyHighBits;\n        // Set the registers\n        eightBitStoreIntoGBMemory(Channel2.memoryLocationNRx3, passedFrequencyLowBits);\n        eightBitStoreIntoGBMemory(Channel2.memoryLocationNRx4, newRegister4);\n        // Save the frequency for ourselves without triggering memory traps\n        Channel2.NRx3FrequencyLSB = passedFrequencyLowBits;\n        Channel2.NRx4FrequencyMSB = passedFrequencyHighBits;\n        Channel2.frequency = (passedFrequencyHighBits << 8) | passedFrequencyLowBits;\n    };\n    // Cycle Counter for our sound accumulator\n    Channel2.cycleCounter = 0;\n    // Max Length of our Length Load\n    Channel2.MAX_LENGTH = 64;\n    // Squarewave channel with volume envelope functions only.\n    // Only used by register reading\n    Channel2.memoryLocationNRx0 = 0xff15;\n    // NR21 -> Sound length/Wave pattern duty (R/W)\n    Channel2.memoryLocationNRx1 = 0xff16;\n    // DDLL LLLL Duty, Length load (64-L)\n    Channel2.NRx1Duty = 0;\n    Channel2.NRx1LengthLoad = 0;\n    // NR22 -> Volume Envelope (R/W)\n    Channel2.memoryLocationNRx2 = 0xff17;\n    // VVVV APPP Starting volume, Envelope add mode, period\n    Channel2.NRx2StartingVolume = 0;\n    Channel2.NRx2EnvelopeAddMode = false;\n    Channel2.NRx2EnvelopePeriod = 0;\n    // NR23 -> Frequency lo (W)\n    Channel2.memoryLocationNRx3 = 0xff18;\n    // FFFF FFFF Frequency LSB\n    Channel2.NRx3FrequencyLSB = 0;\n    // NR24 -> Frequency hi (R/W)\n    Channel2.memoryLocationNRx4 = 0xff19;\n    // TL-- -FFF Trigger, Length enable, Frequency MSB\n    Channel2.NRx4LengthEnabled = false;\n    Channel2.NRx4FrequencyMSB = 0;\n    // Channel Properties\n    Channel2.channelNumber = 2;\n    Channel2.isEnabled = false;\n    Channel2.isDacEnabled = false;\n    Channel2.frequency = 0;\n    Channel2.frequencyTimer = 0x00;\n    Channel2.envelopeCounter = 0x00;\n    Channel2.isEnvelopeAutomaticUpdating = false;\n    Channel2.lengthCounter = 0x00;\n    Channel2.volume = 0x00;\n    // Square Wave properties\n    Channel2.dutyCycle = 0x00;\n    Channel2.waveFormPositionOnDuty = 0x00;\n    // Save States\n    Channel2.saveStateSlot = 8;\n    return Channel2;\n}());\n\n// NOTE: Tons of Copy-pasta btween channels, because Classes cannot be instantiated yet in assemblyscript\nvar Channel3 = /** @class */ (function () {\n    function Channel3() {\n    }\n    // E--- ---- DAC power\n    Channel3.updateNRx0 = function (value) {\n        var isDacEnabled = checkBitOnByte(7, value);\n        // Sample buffer reset to zero when powered on\n        if (!Channel3.isDacEnabled && isDacEnabled) {\n            Channel3.sampleBuffer = 0x00;\n        }\n        Channel3.isDacEnabled = isDacEnabled;\n        // Blargg length test\n        // Disabling DAC should disable channel immediately\n        if (!isDacEnabled) {\n            Channel3.isEnabled = isDacEnabled;\n        }\n    };\n    Channel3.updateNRx1 = function (value) {\n        Channel3.NRx1LengthLoad = value;\n        // Also need to set our length counter. Taken from the old, setChannelLengthCounter\n        // Channel length is determined by 64 (or 256 if channel 3), - the length load\n        // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Registers\n        // Note, this will be different for channel 3\n        // Supposed to be 256, so subtracting 255 and then adding 1 if that makes sense\n        Channel3.lengthCounter = Channel3.MAX_LENGTH - Channel3.NRx1LengthLoad;\n    };\n    Channel3.updateNRx2 = function (value) {\n        Channel3.NRx2VolumeCode = (value >> 5) & 0x0f;\n    };\n    Channel3.updateNRx3 = function (value) {\n        Channel3.NRx3FrequencyLSB = value;\n        // Update Channel Frequency\n        Channel3.frequency = (Channel3.NRx4FrequencyMSB << 8) | value;\n    };\n    Channel3.updateNRx4 = function (value) {\n        // Handle our frequency\n        // Must be done first for our upcoming trigger\n        // To correctly reset timing\n        var frequencyMSB = value & 0x07;\n        Channel3.NRx4FrequencyMSB = frequencyMSB;\n        Channel3.frequency = (frequencyMSB << 8) | Channel3.NRx3FrequencyLSB;\n        // Obscure behavior\n        // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Obscure_Behavior\n        // Also see blargg's cgb sound test\n        // Extra length clocking occurs when writing to NRx4,\n        // when the frame sequencer's next step is one that,\n        // doesn't clock the length counter.\n        var frameSequencer = Sound.frameSequencer;\n        var doesNextFrameSequencerUpdateLength = (frameSequencer & 1) === 1;\n        var isBeingLengthEnabled = false;\n        if (!doesNextFrameSequencerUpdateLength) {\n            // Check lengthEnable\n            isBeingLengthEnabled = !Channel3.NRx4LengthEnabled && checkBitOnByte(6, value);\n            if (Channel3.lengthCounter > 0 && isBeingLengthEnabled) {\n                Channel3.lengthCounter -= 1;\n                if (!checkBitOnByte(7, value) && Channel3.lengthCounter === 0) {\n                    Channel3.isEnabled = false;\n                }\n            }\n        }\n        // Set the length enabled from the value\n        Channel3.NRx4LengthEnabled = checkBitOnByte(6, value);\n        // Trigger our channel, unfreeze length if frozen\n        // Triggers should happen after obscure behavior\n        // See test 11 for trigger\n        if (checkBitOnByte(7, value)) {\n            Channel3.trigger();\n            // When we trigger on the obscure behavior, and we reset the length Counter to max\n            // We need to clock\n            if (!doesNextFrameSequencerUpdateLength && Channel3.lengthCounter === Channel3.MAX_LENGTH && Channel3.NRx4LengthEnabled) {\n                Channel3.lengthCounter -= 1;\n            }\n        }\n    };\n    // Function to save the state of the class\n    Channel3.saveState = function () {\n        // Cycle Counter\n        store(getSaveStateMemoryOffset(0x00, Channel3.saveStateSlot), Channel3.cycleCounter);\n        // NRx0\n        // No NRx0 Properties\n        // NRx1\n        store(getSaveStateMemoryOffset(0x08, Channel3.saveStateSlot), Channel3.NRx1LengthLoad);\n        // NRx2\n        store(getSaveStateMemoryOffset(0x0a, Channel3.saveStateSlot), Channel3.NRx2VolumeCode);\n        // NRx3\n        store(getSaveStateMemoryOffset(0x0c, Channel3.saveStateSlot), Channel3.NRx3FrequencyLSB);\n        // NRx4\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x0d, Channel3.saveStateSlot), Channel3.NRx4LengthEnabled);\n        store(getSaveStateMemoryOffset(0x0e, Channel3.saveStateSlot), Channel3.NRx4FrequencyMSB);\n        // Channel Properties\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x0f, Channel3.saveStateSlot), Channel3.isEnabled);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x10, Channel3.saveStateSlot), Channel3.isDacEnabled);\n        store(getSaveStateMemoryOffset(0x11, Channel3.saveStateSlot), Channel3.frequency);\n        store(getSaveStateMemoryOffset(0x15, Channel3.saveStateSlot), Channel3.frequencyTimer);\n        // No Envelope\n        store(getSaveStateMemoryOffset(0x19, Channel3.saveStateSlot), Channel3.lengthCounter);\n        // WaveTable Properties\n        store(getSaveStateMemoryOffset(0x21, Channel3.saveStateSlot), Channel3.waveTablePosition);\n        store(getSaveStateMemoryOffset(0x25, Channel3.saveStateSlot), Channel3.volumeCode);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x26, Channel3.saveStateSlot), Channel3.volumeCodeChanged);\n        store(getSaveStateMemoryOffset(0x27, Channel3.saveStateSlot), Channel3.sampleBuffer);\n    };\n    // Function to load the save state from memory\n    Channel3.loadState = function () {\n        // Cycle Counter\n        Channel3.cycleCounter = load(getSaveStateMemoryOffset(0x00, Channel3.cycleCounter));\n        // NRx0\n        // No NRx0\n        // NRx1\n        Channel3.NRx1LengthLoad = load(getSaveStateMemoryOffset(0x08, Channel3.saveStateSlot));\n        // NRx2\n        Channel3.NRx2VolumeCode = load(getSaveStateMemoryOffset(0x0a, Channel3.saveStateSlot));\n        // NRx3\n        Channel3.NRx3FrequencyLSB = load(getSaveStateMemoryOffset(0x0c, Channel3.saveStateSlot));\n        // NRx4\n        Channel3.NRx4LengthEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x0d, Channel3.saveStateSlot));\n        Channel3.NRx4FrequencyMSB = load(getSaveStateMemoryOffset(0x0e, Channel3.saveStateSlot));\n        // Channel Properties\n        Channel3.isEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x0f, Channel3.saveStateSlot));\n        Channel3.isDacEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x10, Channel3.saveStateSlot));\n        Channel3.frequency = load(getSaveStateMemoryOffset(0x11, Channel3.saveStateSlot));\n        Channel3.frequencyTimer = load(getSaveStateMemoryOffset(0x15, Channel3.saveStateSlot));\n        // No Envelope\n        Channel3.lengthCounter = load(getSaveStateMemoryOffset(0x19, Channel3.saveStateSlot));\n        // Wave Table Properties\n        Channel3.waveTablePosition = load(getSaveStateMemoryOffset(0x21, Channel3.saveStateSlot));\n        Channel3.volumeCode = load(getSaveStateMemoryOffset(0x25, Channel3.saveStateSlot));\n        Channel3.volumeCodeChanged = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x26, Channel3.saveStateSlot));\n        Channel3.sampleBuffer = load(getSaveStateMemoryOffset(0x27, Channel3.saveStateSlot));\n    };\n    // Memory Read Trap\n    Channel3.handleWaveRamRead = function () {\n        // Obscure behavior\n        // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware\n        // If the wave channel is enabled, accessing any byte from $FF30-$FF3F is equivalent to,\n        // accessing the current byte selected by the waveform position. Further, on the DMG accesses will only work in this manner,\n        // if made within a couple of clocks of the wave channel accessing wave RAM;\n        // if made at any other time, reads return $FF and writes have no effect.\n        // TODO: Handle DMG case\n        return readCurrentSampleByteFromWaveRam();\n    };\n    // Memory Write Trap\n    Channel3.handleWaveRamWrite = function (value) {\n        // Obscure behavior\n        // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware\n        // If the wave channel is enabled, accessing any byte from $FF30-$FF3F is equivalent to,\n        // accessing the current byte selected by the waveform position. Further, on the DMG accesses will only work in this manner,\n        // if made within a couple of clocks of the wave channel accessing wave RAM;\n        // if made at any other time, reads return $FF and writes have no effect.\n        // Thus we want to write the value to the current sample position\n        // Will Find the position, and knock off any remainder\n        var positionIndexToAdd = i32Portable(Channel3.waveTablePosition >> 1);\n        var memoryLocationWaveSample = Channel3.memoryLocationWaveTable + positionIndexToAdd;\n        eightBitStoreIntoGBMemory(memoryLocationWaveSample, value);\n    };\n    Channel3.initialize = function () {\n        eightBitStoreIntoGBMemory(Channel3.memoryLocationNRx0, 0x7f);\n        eightBitStoreIntoGBMemory(Channel3.memoryLocationNRx1, 0xff);\n        eightBitStoreIntoGBMemory(Channel3.memoryLocationNRx2, 0x9f);\n        eightBitStoreIntoGBMemory(Channel3.memoryLocationNRx3, 0x00);\n        eightBitStoreIntoGBMemory(Channel3.memoryLocationNRx4, 0xb8);\n        // The volume code changed\n        Channel3.volumeCodeChanged = true;\n    };\n    // Function to get a sample using the cycle counter on the channel\n    Channel3.getSampleFromCycleCounter = function () {\n        var accumulatedCycles = Channel3.cycleCounter;\n        Channel3.cycleCounter = 0;\n        return Channel3.getSample(accumulatedCycles);\n    };\n    // Function to reset our timer, useful for GBC double speed mode\n    Channel3.resetTimer = function () {\n        var frequencyTimer = (2048 - Channel3.frequency) << 1;\n        // TODO: Ensure this is correct for GBC Double Speed Mode\n        Channel3.frequencyTimer = frequencyTimer << Cpu.GBCDoubleSpeed;\n    };\n    Channel3.getSample = function (numberOfCycles) {\n        // Check if we are enabled\n        if (!Channel3.isEnabled || !Channel3.isDacEnabled) {\n            // Return silence\n            // Since range from -15 - 15, or 0 to 30 for our unsigned\n            return 15;\n        }\n        // Get our volume code\n        // Need this to compute the sample\n        var volumeCode = Channel3.volumeCode;\n        if (Channel3.volumeCodeChanged) {\n            volumeCode = eightBitLoadFromGBMemory(Channel3.memoryLocationNRx2);\n            volumeCode = volumeCode >> 5;\n            volumeCode = volumeCode & 0x0f;\n            Channel3.volumeCode = volumeCode;\n            Channel3.volumeCodeChanged = false;\n        }\n        // Get the current sample\n        var sample = getSampleFromSampleBufferForWaveTablePosition();\n        // Shift our sample and set our volume depending on the volume code\n        // Since we can't multiply by float, simply divide by 4, 2, 1\n        // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Wave_Channel\n        var outputVolume = 0;\n        switch (volumeCode) {\n            case 0:\n                sample >>= 4;\n                break;\n            case 1:\n                // Dont Shift sample\n                outputVolume = 1;\n                break;\n            case 2:\n                sample >>= 1;\n                outputVolume = 2;\n                break;\n            default:\n                sample >>= 2;\n                outputVolume = 4;\n                break;\n        }\n        // Apply out output volume\n        sample = outputVolume > 0 ? sample / outputVolume : 0;\n        // Square Waves Can range from -15 - 15. Therefore simply add 15\n        sample += 15;\n        // Update the sample based on our timer\n        var frequencyTimer = Channel3.frequencyTimer;\n        frequencyTimer -= numberOfCycles;\n        while (frequencyTimer <= 0) {\n            // Get the amount that overflowed so we don't drop cycles\n            var overflowAmount = abs(frequencyTimer);\n            // Reset our timer\n            // A wave channel's frequency timer period is set to (2048-frequency) * 2.\n            // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Wave_Channel\n            Channel3.resetTimer();\n            frequencyTimer = Channel3.frequencyTimer;\n            frequencyTimer -= overflowAmount;\n            // Update our sample buffer\n            advanceWavePositionAndSampleBuffer();\n        }\n        Channel3.frequencyTimer = frequencyTimer;\n        // Finally return the sample\n        return sample;\n    };\n    //http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Trigger_Event\n    Channel3.trigger = function () {\n        Channel3.isEnabled = true;\n        // Length counter maximum handled by write\n        if (Channel3.lengthCounter === 0) {\n            Channel3.lengthCounter = Channel3.MAX_LENGTH;\n        }\n        // Reset our timer\n        // A wave channel's frequency timer period is set to (2048-frequency)*2.\n        Channel3.resetTimer();\n        // Add some delay to our frequency timer\n        // So Honestly, lifted this from binjgb\n        // https://github.com/binji/binjgb/blob/68eb4b2f6d5d7a98d270e12c4b8ff065c07f5e94/src/emulator.c#L2625\n        // I have no clue why this is, but it passes 09-wave read while on.s\n        // blargg test.\n        // I think this has to do with obscure behavior?\n        // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware\n        // When triggering the wave channel,\n        // the first sample to play is the previous one still in the high nibble of the sample buffer,\n        // and the next sample is the second nibble from the wave table.\n        // This is because it doesn't load the first byte on trigger like it \"should\".\n        // The first nibble from the wave table is thus not played until the waveform loops.\n        Channel3.frequencyTimer += 6;\n        // Reset our wave table position\n        Channel3.waveTablePosition = 0;\n        // Finally if DAC is off, channel is still disabled\n        if (!Channel3.isDacEnabled) {\n            Channel3.isEnabled = false;\n        }\n    };\n    // Function to determine if the current channel would update when getting the sample\n    // This is used to accumulate samples\n    Channel3.willChannelUpdate = function (numberOfCycles) {\n        //Increment our cycle counter\n        Channel3.cycleCounter += numberOfCycles;\n        // Dac enabled status cached by accumulator\n        return !(!Channel3.volumeCodeChanged && Channel3.frequencyTimer - Channel3.cycleCounter > 0);\n    };\n    Channel3.updateLength = function () {\n        var lengthCounter = Channel3.lengthCounter;\n        if (lengthCounter > 0 && Channel3.NRx4LengthEnabled) {\n            lengthCounter -= 1;\n        }\n        if (lengthCounter === 0) {\n            Channel3.isEnabled = false;\n        }\n        Channel3.lengthCounter = lengthCounter;\n    };\n    // Cycle Counter for our sound accumulator\n    Channel3.cycleCounter = 0;\n    // Max Length of our Length Load\n    Channel3.MAX_LENGTH = 256;\n    // Voluntary Wave channel with 32 4-bit programmable samples, played in sequence.\n    // NR30 -> Sound on/off (R/W)\n    Channel3.memoryLocationNRx0 = 0xff1a;\n    // NR31 -> Sound length (R/W)\n    Channel3.memoryLocationNRx1 = 0xff1b;\n    // LLLL LLLL Length load (256-L)\n    Channel3.NRx1LengthLoad = 0;\n    // NR32 -> Select ouput level (R/W)\n    Channel3.memoryLocationNRx2 = 0xff1c;\n    // -VV- ---- Volume code (00=0%, 01=100%, 10=50%, 11=25%)\n    Channel3.NRx2VolumeCode = 0;\n    // NR33 -> Frequency lower data (W)\n    Channel3.memoryLocationNRx3 = 0xff1d;\n    // FFFF FFFF Frequency LSB\n    Channel3.NRx3FrequencyLSB = 0;\n    // NR34 -> Frequency higher data (R/W)\n    Channel3.memoryLocationNRx4 = 0xff1e;\n    // TL-- -FFF Trigger, Length enable, Frequency MSB\n    Channel3.NRx4LengthEnabled = false;\n    Channel3.NRx4FrequencyMSB = 0;\n    // Our wave table location\n    Channel3.memoryLocationWaveTable = 0xff30;\n    // Channel Properties\n    Channel3.channelNumber = 3;\n    Channel3.isEnabled = false;\n    Channel3.isDacEnabled = false;\n    Channel3.frequency = 0;\n    Channel3.frequencyTimer = 0x00;\n    Channel3.lengthCounter = 0x00;\n    // WaveTable Properties\n    Channel3.waveTablePosition = 0x00;\n    Channel3.volumeCode = 0x00;\n    Channel3.volumeCodeChanged = false;\n    Channel3.sampleBuffer = 0x00;\n    // Save States\n    Channel3.saveStateSlot = 9;\n    return Channel3;\n}());\n// Functions specific to wave memory\nfunction advanceWavePositionAndSampleBuffer() {\n    // Advance the wave table position, and loop back if needed\n    var waveTablePosition = Channel3.waveTablePosition;\n    waveTablePosition += 1;\n    while (waveTablePosition >= 32) {\n        waveTablePosition -= 32;\n    }\n    Channel3.waveTablePosition = waveTablePosition;\n    // Load the next sample byte from wave ram,\n    // into the sample buffer\n    Channel3.sampleBuffer = readCurrentSampleByteFromWaveRam();\n}\nfunction readCurrentSampleByteFromWaveRam() {\n    // Will Find the position, and knock off any remainder\n    var positionIndexToAdd = i32Portable(Channel3.waveTablePosition >> 1);\n    var memoryLocationWaveSample = Channel3.memoryLocationWaveTable + positionIndexToAdd;\n    return eightBitLoadFromGBMemory(memoryLocationWaveSample);\n}\nfunction getSampleFromSampleBufferForWaveTablePosition() {\n    var sample = Channel3.sampleBuffer;\n    // Need to grab the top or lower half for the correct sample\n    sample >>= ((Channel3.waveTablePosition & 1) === 0) << 2;\n    sample &= 0x0f;\n    return sample;\n}\n\n// NOTE: Tons of Copy-pasta btween channels, because Classes cannot be instantiated yet in assemblyscript\nvar Channel4 = /** @class */ (function () {\n    function Channel4() {\n    }\n    Channel4.updateNRx1 = function (value) {\n        Channel4.NRx1LengthLoad = value & 0x3f;\n        // Also need to set our length counter. Taken from the old, setChannelLengthCounter\n        // Channel length is determined by 64 (or 256 if channel 3), - the length load\n        // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Registers\n        // Note, this will be different for channel 3\n        Channel4.lengthCounter = Channel4.MAX_LENGTH - Channel4.NRx1LengthLoad;\n    };\n    Channel4.updateNRx2 = function (value) {\n        // Handle \"Zombie Mode\" Obscure behavior\n        // https://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Obscure_Behavior\n        if (Channel4.isEnabled) {\n            // If the old envelope period was zero and the envelope is still doing automatic updates,\n            // volume is incremented by 1, otherwise if the envelope was in subtract mode,\n            // volume is incremented by 2.\n            // NOTE: However, from my testing, it ALWAYS increments by one. This was determined\n            // by my testing for prehistoric man\n            if (Channel4.NRx2EnvelopePeriod === 0 && Channel4.isEnvelopeAutomaticUpdating) {\n                // Volume can't be more than 4 bits\n                Channel4.volume = (Channel4.volume + 1) & 0x0f;\n            }\n            // If the mode was changed (add to subtract or subtract to add),\n            // volume is set to 16-volume. But volume cant be more than 4 bits\n            if (Channel4.NRx2EnvelopeAddMode !== checkBitOnByte(3, value)) {\n                Channel4.volume = (16 - Channel4.volume) & 0x0f;\n            }\n        }\n        Channel4.NRx2StartingVolume = (value >> 4) & 0x0f;\n        Channel4.NRx2EnvelopeAddMode = checkBitOnByte(3, value);\n        Channel4.NRx2EnvelopePeriod = value & 0x07;\n        // Also, get our channel is dac enabled\n        var isDacEnabled = (value & 0xf8) > 0;\n        Channel4.isDacEnabled = isDacEnabled;\n        // Blargg length test\n        // Disabling DAC should disable channel immediately\n        if (!isDacEnabled) {\n            Channel4.isEnabled = isDacEnabled;\n        }\n    };\n    Channel4.updateNRx3 = function (value) {\n        var divisorCode = value & 0x07;\n        Channel4.NRx3ClockShift = value >> 4;\n        Channel4.NRx3WidthMode = checkBitOnByte(3, value);\n        Channel4.NRx3DivisorCode = divisorCode;\n        // Also, get our divisor\n        divisorCode <<= 1;\n        if (divisorCode < 1)\n            divisorCode = 1;\n        Channel4.divisor = divisorCode << 3;\n    };\n    Channel4.updateNRx4 = function (value) {\n        // Obscure behavior\n        // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Obscure_Behavior\n        // Also see blargg's cgb sound test\n        // Extra length clocking occurs when writing to NRx4,\n        // when the frame sequencer's next step is one that,\n        // doesn't clock the length counter.\n        var frameSequencer = Sound.frameSequencer;\n        var doesNextFrameSequencerUpdateLength = (frameSequencer & 1) === 1;\n        var isBeingLengthEnabled = !Channel4.NRx4LengthEnabled && checkBitOnByte(6, value);\n        if (!doesNextFrameSequencerUpdateLength) {\n            if (Channel4.lengthCounter > 0 && isBeingLengthEnabled) {\n                Channel4.lengthCounter -= 1;\n                if (!checkBitOnByte(7, value) && Channel4.lengthCounter === 0) {\n                    Channel4.isEnabled = false;\n                }\n            }\n        }\n        // Set the length enabled from the value\n        Channel4.NRx4LengthEnabled = checkBitOnByte(6, value);\n        // Trigger out channel, unfreeze length if frozen\n        // Triggers should happen after obscure behavior\n        // See test 11 for trigger\n        if (checkBitOnByte(7, value)) {\n            Channel4.trigger();\n            // When we trigger on the obscure behavior, and we reset the length Counter to max\n            // We need to clock\n            if (!doesNextFrameSequencerUpdateLength && Channel4.lengthCounter === Channel4.MAX_LENGTH && Channel4.NRx4LengthEnabled) {\n                Channel4.lengthCounter -= 1;\n            }\n        }\n    };\n    // Function to save the state of the class\n    Channel4.saveState = function () {\n        // Cycle Counter\n        store(getSaveStateMemoryOffset(0x00, Channel4.saveStateSlot), Channel4.cycleCounter);\n        // NRx0\n        // No NRx0 Properties\n        // NRx1\n        store(getSaveStateMemoryOffset(0x04, Channel4.saveStateSlot), Channel4.NRx1LengthLoad);\n        // NRx2\n        store(getSaveStateMemoryOffset(0x06, Channel4.saveStateSlot), Channel4.NRx2StartingVolume);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x07, Channel4.saveStateSlot), Channel4.NRx2EnvelopeAddMode);\n        store(getSaveStateMemoryOffset(0x08, Channel4.saveStateSlot), Channel4.NRx2EnvelopePeriod);\n        // NRx3\n        store(getSaveStateMemoryOffset(0x09, Channel4.saveStateSlot), Channel4.NRx3ClockShift);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x0a, Channel4.saveStateSlot), Channel4.NRx3WidthMode);\n        store(getSaveStateMemoryOffset(0x0b, Channel4.saveStateSlot), Channel4.NRx3DivisorCode);\n        // NRx4\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x0d, Channel4.saveStateSlot), Channel4.NRx4LengthEnabled);\n        // Channel Properties\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x0f, Channel4.saveStateSlot), Channel4.isEnabled);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x10, Channel4.saveStateSlot), Channel4.isDacEnabled);\n        store(getSaveStateMemoryOffset(0x15, Channel4.saveStateSlot), Channel4.frequencyTimer);\n        store(getSaveStateMemoryOffset(0x19, Channel4.saveStateSlot), Channel4.envelopeCounter);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x1d, Channel4.saveStateSlot), Channel4.isEnvelopeAutomaticUpdating);\n        store(getSaveStateMemoryOffset(0x1e, Channel4.saveStateSlot), Channel4.lengthCounter);\n        store(getSaveStateMemoryOffset(0x22, Channel4.saveStateSlot), Channel4.volume);\n        // LSFR\n        store(getSaveStateMemoryOffset(0x26, Channel4.saveStateSlot), Channel4.linearFeedbackShiftRegister);\n    };\n    // Function to load the save state from memory\n    Channel4.loadState = function () {\n        // Cycle Counter\n        Channel4.cycleCounter = load(getSaveStateMemoryOffset(0x00, Channel4.cycleCounter));\n        // NRx0\n        // No NRx0\n        // NRx1\n        Channel4.NRx1LengthLoad = load(getSaveStateMemoryOffset(0x04, Channel4.saveStateSlot));\n        // NRx2\n        Channel4.NRx2StartingVolume = load(getSaveStateMemoryOffset(0x06, Channel4.saveStateSlot));\n        Channel4.NRx2EnvelopeAddMode = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x07, Channel4.saveStateSlot));\n        Channel4.NRx2EnvelopePeriod = load(getSaveStateMemoryOffset(0x08, Channel4.saveStateSlot));\n        // NRx3\n        Channel4.NRx3ClockShift = load(getSaveStateMemoryOffset(0x09, Channel4.saveStateSlot));\n        Channel4.NRx3WidthMode = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x0a, Channel4.saveStateSlot));\n        Channel4.NRx3DivisorCode = load(getSaveStateMemoryOffset(0x0b, Channel4.saveStateSlot));\n        // NRx4\n        Channel4.NRx4LengthEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x0d, Channel4.saveStateSlot));\n        // Channel Properties\n        Channel4.isEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x0f, Channel4.saveStateSlot));\n        Channel4.isDacEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x10, Channel4.saveStateSlot));\n        Channel4.frequencyTimer = load(getSaveStateMemoryOffset(0x15, Channel4.saveStateSlot));\n        Channel4.envelopeCounter = load(getSaveStateMemoryOffset(0x19, Channel4.saveStateSlot));\n        Channel4.isEnvelopeAutomaticUpdating = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x1d, Channel4.saveStateSlot));\n        Channel4.lengthCounter = load(getSaveStateMemoryOffset(0x1e, Channel4.saveStateSlot));\n        Channel4.volume = load(getSaveStateMemoryOffset(0x22, Channel4.saveStateSlot));\n        // LSFR\n        Channel4.linearFeedbackShiftRegister = load(getSaveStateMemoryOffset(0x26, Channel4.saveStateSlot));\n    };\n    Channel4.initialize = function () {\n        eightBitStoreIntoGBMemory(Channel4.memoryLocationNRx1 - 1, 0xff);\n        eightBitStoreIntoGBMemory(Channel4.memoryLocationNRx1, 0xff);\n        eightBitStoreIntoGBMemory(Channel4.memoryLocationNRx2, 0x00);\n        eightBitStoreIntoGBMemory(Channel4.memoryLocationNRx3, 0x00);\n        eightBitStoreIntoGBMemory(Channel4.memoryLocationNRx4, 0xbf);\n    };\n    // Function to get a sample using the cycle counter on the channel\n    Channel4.getSampleFromCycleCounter = function () {\n        var accumulatedCycles = Channel4.cycleCounter;\n        Channel4.cycleCounter = 0;\n        return Channel4.getSample(accumulatedCycles);\n    };\n    Channel4.getSample = function (numberOfCycles) {\n        // Decrement our channel timer\n        var frequencyTimer = Channel4.frequencyTimer;\n        frequencyTimer -= numberOfCycles;\n        // TODO: This can't be a while loop to use up all the cycles,\n        // Since noise is psuedo random and the period can be anything\n        if (frequencyTimer <= 0) {\n            // Get the amount that overflowed so we don't drop cycles\n            var overflowAmount = abs(frequencyTimer);\n            // Reset our timer\n            frequencyTimer = Channel4.getNoiseChannelFrequencyPeriod();\n            frequencyTimer -= overflowAmount;\n            // Do some cool stuff with lfsr\n            // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Noise_Channel\n            // First XOR bit zero and one\n            var linearFeedbackShiftRegister = Channel4.linearFeedbackShiftRegister;\n            var lfsrBitZero = linearFeedbackShiftRegister & 0x01;\n            var lfsrBitOne = linearFeedbackShiftRegister >> 1;\n            lfsrBitOne = lfsrBitOne & 0x01;\n            var xorLfsrBitZeroOne = lfsrBitZero ^ lfsrBitOne;\n            // Shift all lsfr bits by one\n            linearFeedbackShiftRegister = linearFeedbackShiftRegister >> 1;\n            // Place the XOR result on bit 15\n            linearFeedbackShiftRegister = linearFeedbackShiftRegister | (xorLfsrBitZeroOne << 14);\n            // If the width mode is set, set xor on bit 6, and make lfsr 7 bit\n            if (Channel4.NRx3WidthMode) {\n                // Make 7 bit, by knocking off lower bits. Want to keeps bits 8 - 16, and then or on 7\n                linearFeedbackShiftRegister = linearFeedbackShiftRegister & ~0x40;\n                linearFeedbackShiftRegister = linearFeedbackShiftRegister | (xorLfsrBitZeroOne << 6);\n            }\n            Channel4.linearFeedbackShiftRegister = linearFeedbackShiftRegister;\n        }\n        // Make sure period never becomes negative\n        if (frequencyTimer < 0) {\n            frequencyTimer = 0;\n        }\n        Channel4.frequencyTimer = frequencyTimer;\n        // Get our ourput volume, set to zero for silence\n        var outputVolume = 0;\n        // Finally to set our output volume, the channel must be enabled,\n        // Our channel DAC must be enabled, and we must be in an active state\n        // Of our duty cycle\n        if (Channel4.isEnabled && Channel4.isDacEnabled) {\n            // Volume can't be more than 4 bits.\n            // Volume should never be more than 4 bits, but doing a check here\n            outputVolume = Channel4.volume & 0x0f;\n        }\n        else {\n            // Return silence\n            // Since range from -15 - 15, or 0 to 30 for our unsigned\n            return 15;\n        }\n        // Declare our sample\n        var sample = 0;\n        // Wave form output is bit zero of lfsr, INVERTED\n        sample = !checkBitOnByte(0, Channel4.linearFeedbackShiftRegister) ? 1 : -1;\n        sample = sample * outputVolume;\n        // Noise Can range from -15 - 15. Therefore simply add 15\n        sample = sample + 15;\n        return sample;\n    };\n    //http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Trigger_Event\n    Channel4.trigger = function () {\n        Channel4.isEnabled = true;\n        // Length counter maximum handled by write\n        if (Channel4.lengthCounter === 0) {\n            Channel4.lengthCounter = Channel4.MAX_LENGTH;\n        }\n        // Reset our timers\n        Channel4.frequencyTimer = Channel4.getNoiseChannelFrequencyPeriod();\n        // The volume envelope and sweep timers treat a period of 0 as 8.\n        // Meaning, if the period is zero, set it to the max (8).\n        if (Channel4.NRx2EnvelopePeriod === 0) {\n            Channel4.envelopeCounter = 8;\n        }\n        else {\n            Channel4.envelopeCounter = Channel4.NRx2EnvelopePeriod;\n        }\n        Channel4.isEnvelopeAutomaticUpdating = true;\n        Channel4.volume = Channel4.NRx2StartingVolume;\n        // Noise channel's LFSR bits are all set to 1.\n        Channel4.linearFeedbackShiftRegister = 0x7fff;\n        // Finally if DAC is off, channel is still disabled\n        if (!Channel4.isDacEnabled) {\n            Channel4.isEnabled = false;\n        }\n    };\n    // Function to determine if the current channel would update when getting the sample\n    // This is used to accumulate samples\n    Channel4.willChannelUpdate = function (numberOfCycles) {\n        //Increment our cycle counter\n        Channel4.cycleCounter += numberOfCycles;\n        // Dac enabled status cached by accumulator\n        return !(Channel4.frequencyTimer - Channel4.cycleCounter > 0);\n    };\n    Channel4.getNoiseChannelFrequencyPeriod = function () {\n        // Get our divisor from the divisor code, and shift by the clock shift\n        var response = Channel4.divisor << Channel4.NRx3ClockShift;\n        return response << Cpu.GBCDoubleSpeed;\n    };\n    Channel4.updateLength = function () {\n        var lengthCounter = Channel4.lengthCounter;\n        if (lengthCounter > 0 && Channel4.NRx4LengthEnabled) {\n            lengthCounter -= 1;\n        }\n        if (lengthCounter === 0) {\n            Channel4.isEnabled = false;\n        }\n        Channel4.lengthCounter = lengthCounter;\n    };\n    Channel4.updateEnvelope = function () {\n        var envelopeCounter = Channel4.envelopeCounter - 1;\n        if (envelopeCounter <= 0) {\n            // Reset back to the sweep period\n            // Obscure behavior\n            // Envelopes treat a period of 0 as 8 (They reset back to the max)\n            if (Channel4.NRx2EnvelopePeriod === 0) {\n                envelopeCounter = 8;\n            }\n            else {\n                envelopeCounter = Channel4.NRx2EnvelopePeriod;\n                // When the timer generates a clock and the envelope period is NOT zero, a new volume is calculated\n                // NOTE: There is some weiirrdd obscure behavior where zero can equal 8, so watch out for that\n                if (envelopeCounter !== 0 && Channel4.isEnvelopeAutomaticUpdating) {\n                    var volume = Channel4.volume;\n                    // Increment the volume\n                    if (Channel4.NRx2EnvelopeAddMode) {\n                        volume += 1;\n                    }\n                    else {\n                        volume -= 1;\n                    }\n                    // Don't allow the volume to go above 4 bits.\n                    volume = volume & 0x0f;\n                    // Check if we are below the max\n                    if (volume < 15) {\n                        Channel4.volume = volume;\n                    }\n                    else {\n                        Channel4.isEnvelopeAutomaticUpdating = false;\n                    }\n                }\n            }\n        }\n        Channel4.envelopeCounter = envelopeCounter;\n    };\n    // Cycle Counter for our sound accumulator\n    Channel4.cycleCounter = 0;\n    // Max Length of our Length Load\n    Channel4.MAX_LENGTH = 64;\n    // Channel 4\n    // 'white noise' channel with volume envelope functions.\n    // Only used by register reading\n    Channel4.memoryLocationNRx0 = 0xff1f;\n    // NR41 -> Sound length (R/W)\n    Channel4.memoryLocationNRx1 = 0xff20;\n    // --LL LLLL Length load (64-L)\n    Channel4.NRx1LengthLoad = 0;\n    // NR42 -> Volume Envelope (R/W)\n    Channel4.memoryLocationNRx2 = 0xff21;\n    // VVVV APPP Starting volume, Envelope add mode, period\n    Channel4.NRx2StartingVolume = 0;\n    Channel4.NRx2EnvelopeAddMode = false;\n    Channel4.NRx2EnvelopePeriod = 0;\n    // NR43 -> Polynomial Counter (R/W)\n    Channel4.memoryLocationNRx3 = 0xff22;\n    // SSSS WDDD Clock shift, Width mode of LFSR, Divisor code\n    Channel4.NRx3ClockShift = 0;\n    Channel4.NRx3WidthMode = false;\n    Channel4.NRx3DivisorCode = 0;\n    // NR44 -> Trigger, Length Enable\n    Channel4.memoryLocationNRx4 = 0xff23;\n    // TL-- ---- Trigger, Length enable\n    Channel4.NRx4LengthEnabled = false;\n    // Channel Properties\n    Channel4.channelNumber = 4;\n    Channel4.isEnabled = false;\n    Channel4.isDacEnabled = false;\n    Channel4.frequencyTimer = 0x00;\n    Channel4.envelopeCounter = 0x00;\n    Channel4.isEnvelopeAutomaticUpdating = false;\n    Channel4.lengthCounter = 0x00;\n    Channel4.volume = 0x00;\n    Channel4.divisor = 0;\n    // Noise properties\n    // NOTE: Is only 15 bits\n    Channel4.linearFeedbackShiftRegister = 0x00;\n    // Save States\n    Channel4.saveStateSlot = 10;\n    return Channel4;\n}());\n\n// Another class simply for accumulating samples\n// Default everything to silence\nvar SoundAccumulator = /** @class */ (function () {\n    function SoundAccumulator() {\n    }\n    SoundAccumulator.channel1Sample = 15;\n    SoundAccumulator.channel2Sample = 15;\n    SoundAccumulator.channel3Sample = 15;\n    SoundAccumulator.channel4Sample = 15;\n    SoundAccumulator.channel1DacEnabled = false;\n    SoundAccumulator.channel2DacEnabled = false;\n    SoundAccumulator.channel3DacEnabled = false;\n    SoundAccumulator.channel4DacEnabled = false;\n    SoundAccumulator.leftChannelSampleUnsignedByte = 127;\n    SoundAccumulator.rightChannelSampleUnsignedByte = 127;\n    SoundAccumulator.mixerVolumeChanged = false;\n    SoundAccumulator.mixerEnabledChanged = false;\n    // If a channel was updated, need to also track if we need to need to mix them again\n    SoundAccumulator.needToRemixSamples = false;\n    return SoundAccumulator;\n}());\n// Inlined because closure compiler inlines\nfunction initializeSoundAccumulator() {\n    SoundAccumulator.channel1Sample = 15;\n    SoundAccumulator.channel2Sample = 15;\n    SoundAccumulator.channel3Sample = 15;\n    SoundAccumulator.channel4Sample = 15;\n    SoundAccumulator.channel1DacEnabled = false;\n    SoundAccumulator.channel2DacEnabled = false;\n    SoundAccumulator.channel3DacEnabled = false;\n    SoundAccumulator.channel4DacEnabled = false;\n    SoundAccumulator.leftChannelSampleUnsignedByte = 127;\n    SoundAccumulator.rightChannelSampleUnsignedByte = 127;\n    SoundAccumulator.mixerVolumeChanged = true;\n    SoundAccumulator.mixerEnabledChanged = true;\n    SoundAccumulator.needToRemixSamples = false;\n}\n// Inlined because closure compiler inlines\nfunction accumulateSound(numberOfCycles) {\n    // Check if any of the individual channels will update\n    var channel1WillUpdate = Channel1.willChannelUpdate(numberOfCycles) || didChannelDacChange(Channel1.channelNumber);\n    var channel2WillUpdate = Channel2.willChannelUpdate(numberOfCycles) || didChannelDacChange(Channel2.channelNumber);\n    var channel3WillUpdate = Channel3.willChannelUpdate(numberOfCycles) || didChannelDacChange(Channel3.channelNumber);\n    var channel4WillUpdate = Channel4.willChannelUpdate(numberOfCycles) || didChannelDacChange(Channel4.channelNumber);\n    if (channel1WillUpdate) {\n        SoundAccumulator.channel1Sample = Channel1.getSampleFromCycleCounter();\n    }\n    if (channel2WillUpdate) {\n        SoundAccumulator.channel2Sample = Channel2.getSampleFromCycleCounter();\n    }\n    if (channel3WillUpdate) {\n        SoundAccumulator.channel3Sample = Channel3.getSampleFromCycleCounter();\n    }\n    if (channel4WillUpdate) {\n        SoundAccumulator.channel4Sample = Channel4.getSampleFromCycleCounter();\n    }\n    // If any channel updated, we need to re-mix our samples\n    if (channel1WillUpdate || channel2WillUpdate || channel3WillUpdate || channel4WillUpdate) {\n        SoundAccumulator.needToRemixSamples = true;\n    }\n    // Do Some downsampling magic\n    var downSampleCycleCounter = Sound.downSampleCycleCounter;\n    downSampleCycleCounter += numberOfCycles;\n    var maxDownSampleCycles = Sound.maxDownSampleCycles();\n    if (downSampleCycleCounter >= maxDownSampleCycles) {\n        // Reset the downsample counter\n        // Don't set to zero to catch overflowed cycles\n        downSampleCycleCounter -= maxDownSampleCycles;\n        if (SoundAccumulator.needToRemixSamples || SoundAccumulator.mixerVolumeChanged || SoundAccumulator.mixerEnabledChanged) {\n            mixChannelSamples(SoundAccumulator.channel1Sample, SoundAccumulator.channel2Sample, SoundAccumulator.channel3Sample, SoundAccumulator.channel4Sample);\n        }\n        else {\n            Sound.downSampleCycleCounter = downSampleCycleCounter;\n        }\n        // Finally Simply place the accumulated sample in memory\n        // Set our volumes in memory\n        // +1 so it can not be zero\n        setLeftAndRightOutputForAudioQueue(SoundAccumulator.leftChannelSampleUnsignedByte + 1, SoundAccumulator.rightChannelSampleUnsignedByte + 1, AUDIO_BUFFER_LOCATION);\n        var audioQueueIndex = Sound.audioQueueIndex + 1;\n        // Don't allow our audioQueueIndex to overflow into other parts of the wasmBoy memory map\n        // https://docs.google.com/spreadsheets/d/17xrEzJk5-sCB9J2mMJcVnzhbE-XH_NvczVSQH9OHvRk/edit#gid=0\n        // Not 0xFFFF because we need half of 64kb since we store left and right channel\n        var maxIndex = i32Portable(Sound.wasmBoyMemoryMaxBufferSize >> 1) - 1;\n        if (audioQueueIndex >= maxIndex) {\n            audioQueueIndex -= 1;\n        }\n        Sound.audioQueueIndex = audioQueueIndex;\n    }\n    Sound.downSampleCycleCounter = downSampleCycleCounter;\n}\n// Function used by SoundAccumulator to find out if a channel Dac Changed\nfunction didChannelDacChange(channelNumber) {\n    switch (channelNumber) {\n        case Channel1.channelNumber: {\n            var isDacEnabled = Channel1.isDacEnabled;\n            var channel1EnabledChanged = SoundAccumulator.channel1DacEnabled !== isDacEnabled;\n            SoundAccumulator.channel1DacEnabled = isDacEnabled;\n            return channel1EnabledChanged;\n        }\n        case Channel2.channelNumber: {\n            var isDacEnabled = Channel2.isDacEnabled;\n            var channel2EnabledChanged = SoundAccumulator.channel2DacEnabled !== isDacEnabled;\n            SoundAccumulator.channel2DacEnabled = isDacEnabled;\n            return channel2EnabledChanged;\n        }\n        case Channel3.channelNumber: {\n            var isDacEnabled = Channel3.isDacEnabled;\n            var channel3EnabledChanged = SoundAccumulator.channel3DacEnabled !== isDacEnabled;\n            SoundAccumulator.channel3DacEnabled = isDacEnabled;\n            return channel3EnabledChanged;\n        }\n        case Channel4.channelNumber: {\n            var isDacEnabled = Channel4.isDacEnabled;\n            var channel4EnabledChanged = SoundAccumulator.channel4DacEnabled !== isDacEnabled;\n            SoundAccumulator.channel4DacEnabled = isDacEnabled;\n            return channel4EnabledChanged;\n        }\n    }\n    return false;\n}\n\n// https://emu-docs.org/Game%20Boy/gb_sound.txt\nvar Sound = /** @class */ (function () {\n    function Sound() {\n    }\n    // Number of cycles to run in each batch process\n    // This number should be in sync so that sound doesn't run too many cyles at once\n    // and does not exceed the minimum number of cyles for either down sampling, or\n    // How often we change the frame, or a channel's update process\n    // Number of cycles is 87, because:\n    // Number of cycles before downsampling a single sample\n    // TODO: Find out how to make this number bigger\n    // Or, don't call this in syncCycles, and make the lib responsible.\n    Sound.batchProcessCycles = function () {\n        // return Cpu.GBCDoubleSpeed ? 174 : 87;\n        return 87 << Cpu.GBCDoubleSpeed;\n    };\n    Sound.updateNR50 = function (value) {\n        Sound.NR50LeftMixerVolume = (value >> 4) & 0x07;\n        Sound.NR50RightMixerVolume = value & 0x07;\n    };\n    Sound.updateNR51 = function (value) {\n        Sound.NR51IsChannel4EnabledOnLeftOutput = checkBitOnByte(7, value);\n        Sound.NR51IsChannel3EnabledOnLeftOutput = checkBitOnByte(6, value);\n        Sound.NR51IsChannel2EnabledOnLeftOutput = checkBitOnByte(5, value);\n        Sound.NR51IsChannel1EnabledOnLeftOutput = checkBitOnByte(4, value);\n        Sound.NR51IsChannel4EnabledOnRightOutput = checkBitOnByte(3, value);\n        Sound.NR51IsChannel3EnabledOnRightOutput = checkBitOnByte(2, value);\n        Sound.NR51IsChannel2EnabledOnRightOutput = checkBitOnByte(1, value);\n        Sound.NR51IsChannel1EnabledOnRightOutput = checkBitOnByte(0, value);\n    };\n    Sound.updateNR52 = function (value) {\n        Sound.NR52IsSoundEnabled = checkBitOnByte(7, value);\n    };\n    Sound.maxFrameSequenceCycles = function () {\n        // return Cpu.GBCDoubleSpeed ? 16384 : 8192;\n        return 8192 << Cpu.GBCDoubleSpeed;\n    };\n    Sound.maxDownSampleCycles = function () {\n        return Cpu.CLOCK_SPEED() / Sound.sampleRate;\n    };\n    // Function to save the state of the class\n    Sound.saveState = function () {\n        // NR50\n        store(getSaveStateMemoryOffset(0x00, Sound.saveStateSlot), Sound.NR50LeftMixerVolume);\n        store(getSaveStateMemoryOffset(0x04, Sound.saveStateSlot), Sound.NR50RightMixerVolume);\n        // NR51\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x08, Sound.saveStateSlot), Sound.NR51IsChannel1EnabledOnLeftOutput);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x09, Sound.saveStateSlot), Sound.NR51IsChannel2EnabledOnLeftOutput);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x0a, Sound.saveStateSlot), Sound.NR51IsChannel3EnabledOnLeftOutput);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x0b, Sound.saveStateSlot), Sound.NR51IsChannel4EnabledOnLeftOutput);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x0c, Sound.saveStateSlot), Sound.NR51IsChannel1EnabledOnRightOutput);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x0d, Sound.saveStateSlot), Sound.NR51IsChannel2EnabledOnRightOutput);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x0e, Sound.saveStateSlot), Sound.NR51IsChannel3EnabledOnRightOutput);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x0f, Sound.saveStateSlot), Sound.NR51IsChannel4EnabledOnRightOutput);\n        // NR52\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x10, Sound.saveStateSlot), Sound.NR52IsSoundEnabled);\n        // Frame Sequencer\n        store(getSaveStateMemoryOffset(0x11, Sound.saveStateSlot), Sound.frameSequenceCycleCounter);\n        store(getSaveStateMemoryOffset(0x16, Sound.saveStateSlot), Sound.frameSequencer);\n        // Down Sampler\n        store(getSaveStateMemoryOffset(0x17, Sound.saveStateSlot), Sound.downSampleCycleCounter);\n        // Sound Accumulator\n        store(getSaveStateMemoryOffset(0x18, Sound.saveStateSlot), SoundAccumulator.channel1Sample);\n        store(getSaveStateMemoryOffset(0x19, Sound.saveStateSlot), SoundAccumulator.channel2Sample);\n        store(getSaveStateMemoryOffset(0x1a, Sound.saveStateSlot), SoundAccumulator.channel3Sample);\n        store(getSaveStateMemoryOffset(0x1b, Sound.saveStateSlot), SoundAccumulator.channel4Sample);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x1c, Sound.saveStateSlot), SoundAccumulator.channel1DacEnabled);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x1d, Sound.saveStateSlot), SoundAccumulator.channel2DacEnabled);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x1e, Sound.saveStateSlot), SoundAccumulator.channel3DacEnabled);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x1f, Sound.saveStateSlot), SoundAccumulator.channel4DacEnabled);\n        store(getSaveStateMemoryOffset(0x20, Sound.saveStateSlot), SoundAccumulator.leftChannelSampleUnsignedByte);\n        store(getSaveStateMemoryOffset(0x21, Sound.saveStateSlot), SoundAccumulator.rightChannelSampleUnsignedByte);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x22, Sound.saveStateSlot), SoundAccumulator.mixerVolumeChanged);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x23, Sound.saveStateSlot), SoundAccumulator.mixerEnabledChanged);\n    };\n    // Function to load the save state from memory\n    Sound.loadState = function () {\n        // NR50\n        Sound.NR50LeftMixerVolume = load(getSaveStateMemoryOffset(0x00, Sound.saveStateSlot));\n        Sound.NR50RightMixerVolume = load(getSaveStateMemoryOffset(0x04, Sound.saveStateSlot));\n        // NR51\n        Sound.NR51IsChannel1EnabledOnLeftOutput = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x08, Sound.saveStateSlot));\n        Sound.NR51IsChannel2EnabledOnLeftOutput = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x09, Sound.saveStateSlot));\n        Sound.NR51IsChannel3EnabledOnLeftOutput = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x0a, Sound.saveStateSlot));\n        Sound.NR51IsChannel4EnabledOnLeftOutput = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x0b, Sound.saveStateSlot));\n        Sound.NR51IsChannel1EnabledOnRightOutput = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x0c, Sound.saveStateSlot));\n        Sound.NR51IsChannel2EnabledOnRightOutput = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x0d, Sound.saveStateSlot));\n        Sound.NR51IsChannel3EnabledOnRightOutput = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x0e, Sound.saveStateSlot));\n        Sound.NR51IsChannel4EnabledOnRightOutput = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x0f, Sound.saveStateSlot));\n        // NR52\n        Sound.NR52IsSoundEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x10, Sound.saveStateSlot));\n        // Frame Sequencer\n        Sound.frameSequenceCycleCounter = load(getSaveStateMemoryOffset(0x11, Sound.saveStateSlot));\n        Sound.frameSequencer = load(getSaveStateMemoryOffset(0x16, Sound.saveStateSlot));\n        // DownSampler\n        Sound.downSampleCycleCounter = load(getSaveStateMemoryOffset(0x17, Sound.saveStateSlot));\n        // Sound Accumulator\n        SoundAccumulator.channel1Sample = load(getSaveStateMemoryOffset(0x18, Sound.saveStateSlot));\n        SoundAccumulator.channel2Sample = load(getSaveStateMemoryOffset(0x19, Sound.saveStateSlot));\n        SoundAccumulator.channel3Sample = load(getSaveStateMemoryOffset(0x1a, Sound.saveStateSlot));\n        SoundAccumulator.channel4Sample = load(getSaveStateMemoryOffset(0x1b, Sound.saveStateSlot));\n        SoundAccumulator.channel1DacEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x1c, Sound.saveStateSlot));\n        SoundAccumulator.channel2DacEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x1d, Sound.saveStateSlot));\n        SoundAccumulator.channel3DacEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x1e, Sound.saveStateSlot));\n        SoundAccumulator.channel4DacEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x1f, Sound.saveStateSlot));\n        SoundAccumulator.leftChannelSampleUnsignedByte = load(getSaveStateMemoryOffset(0x20, Sound.saveStateSlot));\n        SoundAccumulator.rightChannelSampleUnsignedByte = load(getSaveStateMemoryOffset(0x21, Sound.saveStateSlot));\n        SoundAccumulator.mixerVolumeChanged = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x22, Sound.saveStateSlot));\n        SoundAccumulator.mixerEnabledChanged = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x23, Sound.saveStateSlot));\n        // Finally clear the audio buffer\n        clearAudioBuffer();\n    };\n    // Current cycles\n    // This will be used for batch processing\n    // https://github.com/binji/binjgb/commit/e028f45e805bc0b0aa4697224a209f9ae514c954\n    // TODO: May Also need to do this for Reads\n    Sound.currentCycles = 0;\n    // Channel control / On-OFF / Volume (RW)\n    Sound.memoryLocationNR50 = 0xff24;\n    Sound.NR50LeftMixerVolume = 0;\n    Sound.NR50RightMixerVolume = 0;\n    // 0xFF25 selects which output each channel goes to, Referred to as NR51\n    Sound.memoryLocationNR51 = 0xff25;\n    Sound.NR51IsChannel1EnabledOnLeftOutput = true;\n    Sound.NR51IsChannel2EnabledOnLeftOutput = true;\n    Sound.NR51IsChannel3EnabledOnLeftOutput = true;\n    Sound.NR51IsChannel4EnabledOnLeftOutput = true;\n    Sound.NR51IsChannel1EnabledOnRightOutput = true;\n    Sound.NR51IsChannel2EnabledOnRightOutput = true;\n    Sound.NR51IsChannel3EnabledOnRightOutput = true;\n    Sound.NR51IsChannel4EnabledOnRightOutput = true;\n    // Sound on/off\n    Sound.memoryLocationNR52 = 0xff26;\n    Sound.NR52IsSoundEnabled = true;\n    // $FF30 -- $FF3F is the load register space for the 4-bit samples for channel 3\n    Sound.memoryLocationChannel3LoadRegisterStart = 0xff30;\n    // Need to count how often we need to increment our frame sequencer\n    // Which you can read about below\n    Sound.frameSequenceCycleCounter = 0x0000;\n    // Frame sequencer controls what should be updated and and ticked\n    // Every time the sound is updated :) It is updated everytime the\n    // Cycle counter reaches the max cycle\n    Sound.frameSequencer = 0x00;\n    // Also need to downsample our audio to average audio qualty\n    // https://www.reddit.com/r/EmuDev/comments/5gkwi5/gb_apu_sound_emulation/\n    // Want to do 44100hz, so CpuRate / Sound Rate, 4194304 / 44100 ~ 91 cycles\n    Sound.downSampleCycleCounter = 0x00;\n    Sound.sampleRate = 44100;\n    // Our current sample number we are passing back to the wasmboy memory map\n    // Found that a static number of samples doesn't work well on mobile\n    // Will just update the queue index, grab as much as we can whenever we need more audio, then reset\n    // NOTE: Giving a really large sample rate gives more latency, but less pops!\n    //static readonly MAX_NUMBER_OF_SAMPLES: i32 = 4096;\n    Sound.audioQueueIndex = 0x0000;\n    Sound.wasmBoyMemoryMaxBufferSize = 0x20000;\n    // Save States\n    Sound.saveStateSlot = 6;\n    return Sound;\n}());\n// Initialize sound registers\n// From: https://emu-docs.org/Game%20Boy/gb_sound.txt\n// Inlined because closure compiler inlines\nfunction initializeSound() {\n    // Reset Stateful variables\n    Sound.currentCycles = 0;\n    Sound.NR50LeftMixerVolume = 0;\n    Sound.NR50RightMixerVolume = 0;\n    Sound.NR51IsChannel1EnabledOnLeftOutput = true;\n    Sound.NR51IsChannel2EnabledOnLeftOutput = true;\n    Sound.NR51IsChannel3EnabledOnLeftOutput = true;\n    Sound.NR51IsChannel4EnabledOnLeftOutput = true;\n    Sound.NR51IsChannel1EnabledOnRightOutput = true;\n    Sound.NR51IsChannel2EnabledOnRightOutput = true;\n    Sound.NR51IsChannel3EnabledOnRightOutput = true;\n    Sound.NR51IsChannel4EnabledOnRightOutput = true;\n    Sound.NR52IsSoundEnabled = true;\n    Sound.frameSequenceCycleCounter = 0x0000;\n    Sound.downSampleCycleCounter = 0x00;\n    Sound.frameSequencer = 0x00;\n    Sound.audioQueueIndex = 0x0000;\n    // intiialize our channels\n    Channel1.initialize();\n    Channel2.initialize();\n    Channel3.initialize();\n    Channel4.initialize();\n    // Other Sound Registers\n    eightBitStoreIntoGBMemory(Sound.memoryLocationNR50, 0x77);\n    Sound.updateNR50(0x77);\n    eightBitStoreIntoGBMemory(Sound.memoryLocationNR51, 0xf3);\n    Sound.updateNR51(0xf3);\n    eightBitStoreIntoGBMemory(Sound.memoryLocationNR52, 0xf1);\n    Sound.updateNR52(0xf1);\n    // Override/reset some variables if the boot ROM is enabled\n    // For both GB and GBC\n    if (Cpu.BootROMEnabled) {\n        eightBitStoreIntoGBMemory(Sound.memoryLocationNR50, 0x00);\n        Sound.updateNR50(0x00);\n        eightBitStoreIntoGBMemory(Sound.memoryLocationNR51, 0x00);\n        Sound.updateNR51(0x00);\n        eightBitStoreIntoGBMemory(Sound.memoryLocationNR52, 0x70);\n        Sound.updateNR52(0x70);\n    }\n    initializeSoundAccumulator();\n}\n// Function to batch process our audio after we skipped so many cycles\nfunction batchProcessAudio() {\n    var batchProcessCycles = Sound.batchProcessCycles();\n    var currentCycles = Sound.currentCycles;\n    while (currentCycles >= batchProcessCycles) {\n        updateSound(batchProcessCycles);\n        currentCycles -= batchProcessCycles;\n    }\n    Sound.currentCycles = currentCycles;\n}\n// Function for updating sound\nfunction updateSound(numberOfCycles) {\n    // Check if our frameSequencer updated\n    var frameSequencerUpdated = updateFrameSequencer(numberOfCycles);\n    if (Config.audioAccumulateSamples && !frameSequencerUpdated) {\n        accumulateSound(numberOfCycles);\n    }\n    else {\n        calculateSound(numberOfCycles);\n    }\n}\n// Funciton to get the current Audio Queue index\nfunction getNumberOfSamplesInAudioBuffer() {\n    return Sound.audioQueueIndex;\n}\n// Function to reset the audio queue\nfunction clearAudioBuffer() {\n    Sound.audioQueueIndex = 0;\n}\n// Inlined because closure compiler inlines\nfunction calculateSound(numberOfCycles) {\n    // Update all of our channels\n    // All samples will be returned as 0 to 30\n    // 0 being -1.0, and 30 being 1.0\n    // (see blurb at top)\n    var channel1Sample = i32Portable(Channel1.getSample(numberOfCycles));\n    var channel2Sample = i32Portable(Channel2.getSample(numberOfCycles));\n    var channel3Sample = i32Portable(Channel3.getSample(numberOfCycles));\n    var channel4Sample = i32Portable(Channel4.getSample(numberOfCycles));\n    // TODO: Allow individual channels to be muted\n    // let channel1Sample: i32 = 15;\n    // let channel2Sample: i32 = 15;\n    // let channel3Sample: i32 = 15;\n    // let channel4Sample: i32 = 15;\n    // Save the samples in the accumulator\n    SoundAccumulator.channel1Sample = channel1Sample;\n    SoundAccumulator.channel2Sample = channel2Sample;\n    SoundAccumulator.channel3Sample = channel3Sample;\n    SoundAccumulator.channel4Sample = channel4Sample;\n    // Do Some downsampling magic\n    var downSampleCycleCounter = Sound.downSampleCycleCounter + numberOfCycles;\n    if (downSampleCycleCounter >= Sound.maxDownSampleCycles()) {\n        // Reset the downsample counter\n        // Don't set to zero to catch overflowed cycles\n        downSampleCycleCounter -= Sound.maxDownSampleCycles();\n        // Mix our samples\n        var mixedSample = mixChannelSamples(channel1Sample, channel2Sample, channel3Sample, channel4Sample);\n        var leftChannelSampleUnsignedByte = splitHighByte(mixedSample);\n        var rightChannelSampleUnsignedByte = splitLowByte(mixedSample);\n        // Set our volumes in memory\n        // +1 so it can not be zero\n        setLeftAndRightOutputForAudioQueue(leftChannelSampleUnsignedByte + 1, rightChannelSampleUnsignedByte + 1, AUDIO_BUFFER_LOCATION);\n        if (Config.enableAudioDebugging) {\n            // Channel 1\n            mixedSample = mixChannelSamples(channel1Sample, 15, 15, 15);\n            leftChannelSampleUnsignedByte = splitHighByte(mixedSample);\n            rightChannelSampleUnsignedByte = splitLowByte(mixedSample);\n            setLeftAndRightOutputForAudioQueue(leftChannelSampleUnsignedByte + 1, rightChannelSampleUnsignedByte + 1, CHANNEL_1_BUFFER_LOCATION);\n            // Channel 2\n            mixedSample = mixChannelSamples(15, channel2Sample, 15, 15);\n            leftChannelSampleUnsignedByte = splitHighByte(mixedSample);\n            rightChannelSampleUnsignedByte = splitLowByte(mixedSample);\n            setLeftAndRightOutputForAudioQueue(leftChannelSampleUnsignedByte + 1, rightChannelSampleUnsignedByte + 1, CHANNEL_2_BUFFER_LOCATION);\n            // Channel 3\n            mixedSample = mixChannelSamples(15, 15, channel3Sample, 15);\n            leftChannelSampleUnsignedByte = splitHighByte(mixedSample);\n            rightChannelSampleUnsignedByte = splitLowByte(mixedSample);\n            setLeftAndRightOutputForAudioQueue(leftChannelSampleUnsignedByte + 1, rightChannelSampleUnsignedByte + 1, CHANNEL_3_BUFFER_LOCATION);\n            // Channel 4\n            mixedSample = mixChannelSamples(15, 15, 15, channel4Sample);\n            leftChannelSampleUnsignedByte = splitHighByte(mixedSample);\n            rightChannelSampleUnsignedByte = splitLowByte(mixedSample);\n            setLeftAndRightOutputForAudioQueue(leftChannelSampleUnsignedByte + 1, rightChannelSampleUnsignedByte + 1, CHANNEL_4_BUFFER_LOCATION);\n        }\n        var audioQueueIndex = Sound.audioQueueIndex + 1;\n        // Don't allow our audioQueueIndex to overflow into other parts of the wasmBoy memory map\n        // https://docs.google.com/spreadsheets/d/17xrEzJk5-sCB9J2mMJcVnzhbE-XH_NvczVSQH9OHvRk/edit#gid=0\n        // Not 0xFFFF because we need half of 64kb since we store left and right channel\n        var maxIndex = i32Portable(Sound.wasmBoyMemoryMaxBufferSize >> 1) - 1;\n        if (audioQueueIndex >= maxIndex) {\n            audioQueueIndex -= 1;\n        }\n        Sound.audioQueueIndex = audioQueueIndex;\n    }\n    Sound.downSampleCycleCounter = downSampleCycleCounter;\n}\n// Inlined because closure compiler inlines\nfunction updateFrameSequencer(numberOfCycles) {\n    // APU runs at 4194304 / 512\n    // Or Cpu.clockSpeed / 512\n    // Which means, we need to update once every 8192 cycles :)\n    var maxFrameSequenceCycles = Sound.maxFrameSequenceCycles();\n    var frameSequenceCycleCounter = Sound.frameSequenceCycleCounter + numberOfCycles;\n    if (frameSequenceCycleCounter >= maxFrameSequenceCycles) {\n        // Reset the frameSequenceCycleCounter\n        // Not setting to zero as we do not want to drop cycles\n        frameSequenceCycleCounter -= maxFrameSequenceCycles;\n        Sound.frameSequenceCycleCounter = frameSequenceCycleCounter;\n        // Update our frame sequencer\n        // https://gist.github.com/drhelius/3652407\n        var frameSequencer = (Sound.frameSequencer + 1) & 7;\n        switch (frameSequencer) {\n            case 0:\n                // Update Length on Channels\n                Channel1.updateLength();\n                Channel2.updateLength();\n                Channel3.updateLength();\n                Channel4.updateLength();\n                break;\n            /* Do Nothing on one */\n            case 2:\n                // Update Sweep and Length on Channels\n                Channel1.updateLength();\n                Channel2.updateLength();\n                Channel3.updateLength();\n                Channel4.updateLength();\n                Channel1.updateSweep();\n                break;\n            /* Do Nothing on three */\n            case 4:\n                // Update Length on Channels\n                Channel1.updateLength();\n                Channel2.updateLength();\n                Channel3.updateLength();\n                Channel4.updateLength();\n                break;\n            /* Do Nothing on five */\n            case 6:\n                // Update Sweep and Length on Channels\n                Channel1.updateLength();\n                Channel2.updateLength();\n                Channel3.updateLength();\n                Channel4.updateLength();\n                Channel1.updateSweep();\n                break;\n            case 7:\n                // Update Envelope on channels\n                Channel1.updateEnvelope();\n                Channel2.updateEnvelope();\n                Channel4.updateEnvelope();\n                break;\n        }\n        // Save our frame sequencer\n        Sound.frameSequencer = frameSequencer;\n        return true;\n    }\n    else {\n        Sound.frameSequenceCycleCounter = frameSequenceCycleCounter;\n    }\n    return false;\n}\nfunction mixChannelSamples(channel1Sample, channel2Sample, channel3Sample, channel4Sample) {\n    // Do Some Cool mixing\n    // NR50 FF24 ALLL BRRR Vin L enable, Left vol, Vin R enable, Right vol\n    // NR51 FF25 NW21 NW21 Left enables, Right enables\n    // NR52 FF26 P--- NW21 Power control/status, Channel length statuses\n    // NW21 = 4 bits on byte\n    // 3 -> Channel 4, 2 -> Channel 3, 1 -> Channel 2, 0 -> Channel 1\n    if (channel1Sample === void 0) { channel1Sample = 15; }\n    if (channel2Sample === void 0) { channel2Sample = 15; }\n    if (channel3Sample === void 0) { channel3Sample = 15; }\n    if (channel4Sample === void 0) { channel4Sample = 15; }\n    // Matt's Proccess\n    // I push out 1024 samples at a time and use 96000 hz sampling rate, so I guess i'm a bit less than one frame,\n    // but I let the queue fill up with 4 x 1024 samples before I start waiting for the audio\n    // TODO: Vin Mixing\n    SoundAccumulator.mixerVolumeChanged = false;\n    // Get our channel volume for left/right\n    var leftChannelSample = 0;\n    var rightChannelSample = 0;\n    // Find the sample for the left if enabled\n    // other wise add silence (15) for the channel\n    leftChannelSample += Sound.NR51IsChannel1EnabledOnLeftOutput ? channel1Sample : 15;\n    leftChannelSample += Sound.NR51IsChannel2EnabledOnLeftOutput ? channel2Sample : 15;\n    leftChannelSample += Sound.NR51IsChannel3EnabledOnLeftOutput ? channel3Sample : 15;\n    leftChannelSample += Sound.NR51IsChannel4EnabledOnLeftOutput ? channel4Sample : 15;\n    // Find the sample for the right if enabled\n    // other wise add silence (15) for the channel\n    rightChannelSample += Sound.NR51IsChannel1EnabledOnRightOutput ? channel1Sample : 15;\n    rightChannelSample += Sound.NR51IsChannel2EnabledOnRightOutput ? channel2Sample : 15;\n    rightChannelSample += Sound.NR51IsChannel3EnabledOnRightOutput ? channel3Sample : 15;\n    rightChannelSample += Sound.NR51IsChannel4EnabledOnRightOutput ? channel4Sample : 15;\n    // Update our accumulator\n    SoundAccumulator.mixerEnabledChanged = false;\n    SoundAccumulator.needToRemixSamples = false;\n    // Finally multiply our volumes by the mixer volume\n    // Mixer volume can be at most 7 + 1\n    // Can be at most 7, because we only have 3 bits, 111 = 7\n    // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Mixer\n    // Done in the getSampleAsUnsignedByte(), since we are doing some weirdness there :)\n    // Convert our samples from unsigned 32 to unsigned byte\n    // Reason being, We want to be able to pass in wasm memory as usigned byte. Javascript will handle the conversion back\n    var leftChannelSampleUnsignedByte = getSampleAsUnsignedByte(leftChannelSample, Sound.NR50LeftMixerVolume + 1);\n    var rightChannelSampleUnsignedByte = getSampleAsUnsignedByte(rightChannelSample, Sound.NR50RightMixerVolume + 1);\n    // Save these samples in the accumulator\n    SoundAccumulator.leftChannelSampleUnsignedByte = leftChannelSampleUnsignedByte;\n    SoundAccumulator.rightChannelSampleUnsignedByte = rightChannelSampleUnsignedByte;\n    return concatenateBytes(leftChannelSampleUnsignedByte, rightChannelSampleUnsignedByte);\n}\nfunction getSampleAsUnsignedByte(sample, mixerVolume) {\n    // If the sample is silence, return silence as unsigned byte\n    // Silence is common, and should be checked for performance\n    if (sample === 60) {\n        return 127;\n    }\n    // convert to a signed, precise scale of -6000 to 6000 (cheap way of -1.0 to 1.0)\n    // Multiply by the mixer volume fraction (to find the actual volume)\n    var precision = 100000;\n    var convertedSample = sample - 60;\n    convertedSample = convertedSample * precision;\n    // Multiply by the mixer volume fraction (to find the actual volume)\n    convertedSample = (convertedSample * mixerVolume) >> 3;\n    // Convert back to scale of 0 to 120\n    convertedSample = i32Portable(convertedSample / precision) + 60;\n    // Finally, convert to an unsigned byte scale\n    // With Four Channels (0 to 30) and no global volume. Max is 120\n    // max unsigned byte goal is 254 (see blurb at top).\n    // 120 / 254 should give the correct conversion\n    // For example, 120 / 254 = 0.47244094488188976\n    // Multiply by 1000 to increase the float into an int\n    // so, 120 * 1000 / (0.47244094488188976 * 1000) should give approximate answer for max mixer volume\n    var maxDivider = i32Portable((120 * precision) / 254);\n    convertedSample = i32Portable((convertedSample * precision) / maxDivider);\n    // Ensure we have an i32 and not a float for JS builds\n    convertedSample = i32Portable(convertedSample);\n    return convertedSample;\n}\n// Function to set our left and right channels at the correct queue index\nfunction setLeftAndRightOutputForAudioQueue(leftVolume, rightVolume, bufferLocation) {\n    // Get our stereo index\n    var audioQueueOffset = bufferLocation + (Sound.audioQueueIndex << 1);\n    // Store our volumes\n    // +1 that way we don't have empty data to ensure that the value is set\n    store(audioQueueOffset + 0, (leftVolume + 1));\n    store(audioQueueOffset + 1, (rightVolume + 1));\n}\n\n// Functions involved in R/W of sound registers\n// Function to check and handle writes to sound registers\n// Inlined because closure compiler inlines\n// NOTE: For write traps, return false = don't write to memory,\n// return true = allow the write to memory\nfunction SoundRegisterWriteTraps(offset, value) {\n    if (offset !== Sound.memoryLocationNR52 && !Sound.NR52IsSoundEnabled) {\n        // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Power_Control\n        // When sound is turned off / enabled\n        // Block all writes to any sound register EXCEPT NR52!\n        // This is under the assumption that the check for\n        // offset >= 0xFF10 && offset <= 0xFF26\n        // is done in writeTraps.ts (which it is)\n        // NOTE: Except on DMG, length can still be written (whatever that means)\n        return false;\n    }\n    switch (offset) {\n        // Handle NRx0 on Channels\n        case Channel1.memoryLocationNRx0:\n            Channel1.updateNRx0(value);\n            return true;\n        case Channel3.memoryLocationNRx0:\n            Channel3.updateNRx0(value);\n            return true;\n        // Handle NRx1 (Length Counter) on Channels\n        case Channel1.memoryLocationNRx1:\n            Channel1.updateNRx1(value);\n            return true;\n        case Channel2.memoryLocationNRx1:\n            Channel2.updateNRx1(value);\n            return true;\n        case Channel3.memoryLocationNRx1:\n            Channel3.updateNRx1(value);\n            return true;\n        case Channel4.memoryLocationNRx1:\n            Channel4.updateNRx1(value);\n            return true;\n        // Handle NRx2 (Envelope / Volume) on Channels\n        case Channel1.memoryLocationNRx2:\n            Channel1.updateNRx2(value);\n            return true;\n        case Channel2.memoryLocationNRx2:\n            Channel2.updateNRx2(value);\n            return true;\n        case Channel3.memoryLocationNRx2:\n            // Check if channel 3's volume code was written too\n            // This is handcy to know for accumulation of samples\n            Channel3.volumeCodeChanged = true;\n            Channel3.updateNRx2(value);\n            return true;\n        case Channel4.memoryLocationNRx2:\n            Channel4.updateNRx2(value);\n            return true;\n        // Handle NRx3 (Frequency / Noise Properties) on Channels\n        case Channel1.memoryLocationNRx3:\n            Channel1.updateNRx3(value);\n            return true;\n        case Channel2.memoryLocationNRx3:\n            Channel2.updateNRx3(value);\n            return true;\n        case Channel3.memoryLocationNRx3:\n            Channel3.updateNRx3(value);\n            return true;\n        case Channel4.memoryLocationNRx3:\n            Channel4.updateNRx3(value);\n            return true;\n        // Check our NRx4 registers to trap our trigger bits\n        case Channel1.memoryLocationNRx4:\n            Channel1.updateNRx4(value);\n            return true;\n        case Channel2.memoryLocationNRx4:\n            Channel2.updateNRx4(value);\n            return true;\n        case Channel3.memoryLocationNRx4:\n            Channel3.updateNRx4(value);\n            return true;\n        case Channel4.memoryLocationNRx4:\n            Channel4.updateNRx4(value);\n            return true;\n        // Tell the sound accumulator if volumes changes\n        case Sound.memoryLocationNR50:\n            Sound.updateNR50(value);\n            SoundAccumulator.mixerVolumeChanged = true;\n            return true;\n        // Tell the sound accumulator if volumes changes\n        case Sound.memoryLocationNR51:\n            Sound.updateNR51(value);\n            SoundAccumulator.mixerEnabledChanged = true;\n            return true;\n        case Sound.memoryLocationNR52:\n            // Reset all registers except NR52\n            // See if we were enabled, then update the register.\n            var wasNR52Enabled = Sound.NR52IsSoundEnabled;\n            // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Power_Control\n            // When powered on, the frame sequencer is reset so that the next step will be 0,\n            // the square duty units are reset to the first step of the waveform,\n            // and the wave channel's sample buffer is reset to 0.\n            if (!wasNR52Enabled && checkBitOnByte(7, value)) {\n                Sound.frameSequencer = 0x07;\n                Channel1.waveFormPositionOnDuty = 0x00;\n                Channel2.waveFormPositionOnDuty = 0x00;\n                // TODO: Wave Channel Sample Buffer?\n                // I don't think we clear wave RAM here...\n            }\n            // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Power_Control\n            // When powered off, all registers (NR10-NR51) are instantly written with zero\n            // and any writes to those registers are ignored while power remains off\n            if (wasNR52Enabled && !checkBitOnByte(7, value)) {\n                for (var i = 0xff10; i < 0xff26; ++i) {\n                    eightBitStoreIntoGBMemoryWithTraps(i, 0x00);\n                }\n            }\n            // Need to update our new value here, that way writes go through :p\n            Sound.updateNR52(value);\n            return true;\n    }\n    // We did not handle the write, Allow the write\n    return true;\n}\n// http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Registers\n// Inlined because closure compiler inlines\nfunction SoundRegisterReadTraps(offset) {\n    // Registers must be OR'd with values when being read\n    // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Registers\n    switch (offset) {\n        // Handle NRx0 on Channels\n        case Channel1.memoryLocationNRx0: {\n            var register = eightBitLoadFromGBMemory(Channel1.memoryLocationNRx0);\n            return register | 0x80;\n        }\n        case Channel2.memoryLocationNRx0: {\n            var register = eightBitLoadFromGBMemory(Channel2.memoryLocationNRx0);\n            return register | 0xff;\n        }\n        case Channel3.memoryLocationNRx0: {\n            var register = eightBitLoadFromGBMemory(Channel3.memoryLocationNRx0);\n            return register | 0x7f;\n        }\n        case Channel4.memoryLocationNRx0: {\n            var register = eightBitLoadFromGBMemory(Channel4.memoryLocationNRx0);\n            return register | 0xff;\n        }\n        case Sound.memoryLocationNR50: {\n            var register = eightBitLoadFromGBMemory(Sound.memoryLocationNR50);\n            return register | 0x00;\n        }\n        // Handle NRx1 on Channels\n        case Channel1.memoryLocationNRx1: {\n            var register = eightBitLoadFromGBMemory(Channel1.memoryLocationNRx1);\n            return register | 0x3f;\n        }\n        case Channel2.memoryLocationNRx1: {\n            var register = eightBitLoadFromGBMemory(Channel2.memoryLocationNRx1);\n            return register | 0x3f;\n        }\n        case Channel3.memoryLocationNRx1: {\n            var register = eightBitLoadFromGBMemory(Channel3.memoryLocationNRx1);\n            return register | 0xff;\n        }\n        case Channel4.memoryLocationNRx1: {\n            var register = eightBitLoadFromGBMemory(Channel4.memoryLocationNRx1);\n            return register | 0xff;\n        }\n        case Sound.memoryLocationNR51: {\n            var register = eightBitLoadFromGBMemory(Sound.memoryLocationNR51);\n            return register | 0x00;\n        }\n        // Handle NRx2 on Channels\n        case Channel1.memoryLocationNRx2: {\n            var register = eightBitLoadFromGBMemory(Channel1.memoryLocationNRx2);\n            return register | 0x00;\n        }\n        case Channel2.memoryLocationNRx2: {\n            var register = eightBitLoadFromGBMemory(Channel2.memoryLocationNRx2);\n            return register | 0x00;\n        }\n        case Channel3.memoryLocationNRx2: {\n            var register = eightBitLoadFromGBMemory(Channel3.memoryLocationNRx2);\n            return register | 0x9f;\n        }\n        case Channel4.memoryLocationNRx2: {\n            var register = eightBitLoadFromGBMemory(Channel4.memoryLocationNRx2);\n            return register | 0x00;\n        }\n        case Sound.memoryLocationNR52: {\n            // This will fix bugs in orcale of ages :)\n            // Start our registerNR52\n            var registerNR52 = 0x00;\n            // Set the first bit to the sound paower status\n            if (Sound.NR52IsSoundEnabled) {\n                registerNR52 = setBitOnByte(7, registerNR52);\n            }\n            else {\n                registerNR52 = resetBitOnByte(7, registerNR52);\n            }\n            // Set our lower 4 bits to our channel length statuses\n            if (Channel1.isEnabled) {\n                registerNR52 = setBitOnByte(0, registerNR52);\n            }\n            else {\n                registerNR52 = resetBitOnByte(0, registerNR52);\n            }\n            if (Channel2.isEnabled) {\n                registerNR52 = setBitOnByte(1, registerNR52);\n            }\n            else {\n                registerNR52 = resetBitOnByte(1, registerNR52);\n            }\n            if (Channel3.isEnabled) {\n                registerNR52 = setBitOnByte(2, registerNR52);\n            }\n            else {\n                registerNR52 = resetBitOnByte(2, registerNR52);\n            }\n            if (Channel4.isEnabled) {\n                registerNR52 = setBitOnByte(3, registerNR52);\n            }\n            else {\n                registerNR52 = resetBitOnByte(3, registerNR52);\n            }\n            // Or from the table\n            registerNR52 |= 0x70;\n            return registerNR52;\n        }\n        // Handle NRx3 on Channels\n        case Channel1.memoryLocationNRx3: {\n            var register = eightBitLoadFromGBMemory(Channel1.memoryLocationNRx3);\n            return register | 0xff;\n        }\n        case Channel2.memoryLocationNRx3: {\n            var register = eightBitLoadFromGBMemory(Channel2.memoryLocationNRx3);\n            return register | 0xff;\n        }\n        case Channel3.memoryLocationNRx3: {\n            var register = eightBitLoadFromGBMemory(Channel3.memoryLocationNRx3);\n            return register | 0xff;\n        }\n        case Channel4.memoryLocationNRx3: {\n            var register = eightBitLoadFromGBMemory(Channel4.memoryLocationNRx3);\n            return register | 0x00;\n        }\n        // Handle NRx4 on Channels\n        case Channel1.memoryLocationNRx4: {\n            var register = eightBitLoadFromGBMemory(Channel1.memoryLocationNRx4);\n            return register | 0xbf;\n        }\n        case Channel2.memoryLocationNRx4: {\n            var register = eightBitLoadFromGBMemory(Channel2.memoryLocationNRx4);\n            return register | 0xbf;\n        }\n        case Channel3.memoryLocationNRx4: {\n            var register = eightBitLoadFromGBMemory(Channel3.memoryLocationNRx4);\n            return register | 0xbf;\n        }\n        case Channel4.memoryLocationNRx4: {\n            var register = eightBitLoadFromGBMemory(Channel4.memoryLocationNRx4);\n            return register | 0xbf;\n        }\n    }\n    return -1;\n}\n\nvar Interrupts = /** @class */ (function () {\n    function Interrupts() {\n    }\n    Interrupts.updateInterruptEnabled = function (value) {\n        Interrupts.isVBlankInterruptEnabled = checkBitOnByte(Interrupts.bitPositionVBlankInterrupt, value);\n        Interrupts.isLcdInterruptEnabled = checkBitOnByte(Interrupts.bitPositionLcdInterrupt, value);\n        Interrupts.isTimerInterruptEnabled = checkBitOnByte(Interrupts.bitPositionTimerInterrupt, value);\n        Interrupts.isSerialInterruptEnabled = checkBitOnByte(Interrupts.bitPositionSerialInterrupt, value);\n        Interrupts.isJoypadInterruptEnabled = checkBitOnByte(Interrupts.bitPositionJoypadInterrupt, value);\n        Interrupts.interruptsEnabledValue = value;\n    };\n    Interrupts.updateInterruptRequested = function (value) {\n        Interrupts.isVBlankInterruptRequested = checkBitOnByte(Interrupts.bitPositionVBlankInterrupt, value);\n        Interrupts.isLcdInterruptRequested = checkBitOnByte(Interrupts.bitPositionLcdInterrupt, value);\n        Interrupts.isTimerInterruptRequested = checkBitOnByte(Interrupts.bitPositionTimerInterrupt, value);\n        Interrupts.isSerialInterruptRequested = checkBitOnByte(Interrupts.bitPositionSerialInterrupt, value);\n        Interrupts.isJoypadInterruptRequested = checkBitOnByte(Interrupts.bitPositionJoypadInterrupt, value);\n        Interrupts.interruptsRequestedValue = value;\n    };\n    // Function to return if we have any pending interrupts\n    Interrupts.areInterruptsPending = function () {\n        return (Interrupts.interruptsRequestedValue & Interrupts.interruptsEnabledValue & 0x1f) > 0;\n    };\n    // Function to save the state of the class\n    Interrupts.saveState = function () {\n        // Interrupt Master Interrupt Switch\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x00, Interrupts.saveStateSlot), Interrupts.masterInterruptSwitch);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x01, Interrupts.saveStateSlot), Interrupts.masterInterruptSwitchDelay);\n        // Interrupt Enabled\n        store(getSaveStateMemoryOffset(0x10, Interrupts.saveStateSlot), Interrupts.interruptsEnabledValue);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x11, Interrupts.saveStateSlot), Interrupts.isVBlankInterruptEnabled);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x12, Interrupts.saveStateSlot), Interrupts.isLcdInterruptEnabled);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x13, Interrupts.saveStateSlot), Interrupts.isTimerInterruptEnabled);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x14, Interrupts.saveStateSlot), Interrupts.isSerialInterruptEnabled);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x15, Interrupts.saveStateSlot), Interrupts.isJoypadInterruptEnabled);\n        // Interrupt Request\n        store(getSaveStateMemoryOffset(0x20, Interrupts.saveStateSlot), Interrupts.interruptsRequestedValue);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x21, Interrupts.saveStateSlot), Interrupts.isVBlankInterruptRequested);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x22, Interrupts.saveStateSlot), Interrupts.isLcdInterruptRequested);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x23, Interrupts.saveStateSlot), Interrupts.isTimerInterruptRequested);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x24, Interrupts.saveStateSlot), Interrupts.isSerialInterruptRequested);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x25, Interrupts.saveStateSlot), Interrupts.isJoypadInterruptRequested);\n    };\n    // Function to load the save state from memory\n    Interrupts.loadState = function () {\n        // Interrupt Master Interrupt Switch\n        Interrupts.masterInterruptSwitch = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x00, Interrupts.saveStateSlot));\n        Interrupts.masterInterruptSwitchDelay = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x01, Interrupts.saveStateSlot));\n        // Interrupt Enabled\n        Interrupts.interruptsEnabledValue = load(getSaveStateMemoryOffset(0x10, Interrupts.saveStateSlot));\n        Interrupts.isVBlankInterruptEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x11, Interrupts.saveStateSlot));\n        Interrupts.isLcdInterruptEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x12, Interrupts.saveStateSlot));\n        Interrupts.isTimerInterruptEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x13, Interrupts.saveStateSlot));\n        Interrupts.isSerialInterruptEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x14, Interrupts.saveStateSlot));\n        Interrupts.isJoypadInterruptEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x15, Interrupts.saveStateSlot));\n        // Interrupt Request\n        Interrupts.interruptsRequestedValue = load(getSaveStateMemoryOffset(0x20, Interrupts.saveStateSlot));\n        Interrupts.isVBlankInterruptRequested = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x21, Interrupts.saveStateSlot));\n        Interrupts.isLcdInterruptRequested = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x22, Interrupts.saveStateSlot));\n        Interrupts.isTimerInterruptRequested = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x23, Interrupts.saveStateSlot));\n        Interrupts.isSerialInterruptRequested = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x24, Interrupts.saveStateSlot));\n        Interrupts.isJoypadInterruptRequested = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x25, Interrupts.saveStateSlot));\n    };\n    Interrupts.masterInterruptSwitch = false;\n    // According to mooneye, interrupts are not handled until AFTER\n    // Next instruction\n    // https://github.com/Gekkio/mooneye-gb/blob/master/docs/accuracy.markdown\n    Interrupts.masterInterruptSwitchDelay = false;\n    // Biut position for each part of the interrupts HW registers\n    Interrupts.bitPositionVBlankInterrupt = 0;\n    Interrupts.bitPositionLcdInterrupt = 1;\n    Interrupts.bitPositionTimerInterrupt = 2;\n    Interrupts.bitPositionSerialInterrupt = 3;\n    Interrupts.bitPositionJoypadInterrupt = 4;\n    Interrupts.memoryLocationInterruptEnabled = 0xffff; // A.K.A interrupt Flag (IE)\n    // Cache which Interrupts are enabled\n    Interrupts.interruptsEnabledValue = 0;\n    Interrupts.isVBlankInterruptEnabled = false;\n    Interrupts.isLcdInterruptEnabled = false;\n    Interrupts.isTimerInterruptEnabled = false;\n    Interrupts.isSerialInterruptEnabled = false;\n    Interrupts.isJoypadInterruptEnabled = false;\n    Interrupts.memoryLocationInterruptRequest = 0xff0f; // A.K.A interrupt Flag (IF)\n    // Cache which Interrupts are requested\n    Interrupts.interruptsRequestedValue = 0;\n    Interrupts.isVBlankInterruptRequested = false;\n    Interrupts.isLcdInterruptRequested = false;\n    Interrupts.isTimerInterruptRequested = false;\n    Interrupts.isSerialInterruptRequested = false;\n    Interrupts.isJoypadInterruptRequested = false;\n    // Save States\n    Interrupts.saveStateSlot = 2;\n    return Interrupts;\n}());\n// Inlined because closure compiler inlines\nfunction initializeInterrupts() {\n    // Values from BGB\n    // IE\n    Interrupts.updateInterruptEnabled(0x00);\n    eightBitStoreIntoGBMemory(Interrupts.memoryLocationInterruptEnabled, Interrupts.interruptsEnabledValue);\n    // IF\n    Interrupts.updateInterruptRequested(0xe1);\n    eightBitStoreIntoGBMemory(Interrupts.memoryLocationInterruptRequest, Interrupts.interruptsRequestedValue);\n}\n// NOTE: Interrupts should be handled before reading an opcode\n// Inlined because closure compiler inlines\nfunction checkInterrupts() {\n    // First check for our delay was enabled\n    if (Interrupts.masterInterruptSwitchDelay) {\n        Interrupts.masterInterruptSwitch = true;\n        Interrupts.masterInterruptSwitchDelay = false;\n    }\n    // Check if we have an enabled and requested interrupt\n    var isAnInterruptRequestedAndEnabledValue = Interrupts.interruptsEnabledValue & Interrupts.interruptsRequestedValue & 0x1f;\n    if (isAnInterruptRequestedAndEnabledValue > 0) {\n        // Boolean to track if interrupts were handled\n        // Interrupt handling requires 20 cycles\n        // https://github.com/Gekkio/mooneye-gb/blob/master/docs/accuracy.markdown#what-is-the-exact-timing-of-cpu-servicing-an-interrupt\n        var wasInterruptHandled = false;\n        // Service our interrupts, if we have the master switch enabled\n        // https://www.reddit.com/r/EmuDev/comments/5ie3k7/infinite_loop_trying_to_pass_blarggs_interrupt/\n        if (Interrupts.masterInterruptSwitch && !Cpu.isHaltNoJump) {\n            if (Interrupts.isVBlankInterruptEnabled && Interrupts.isVBlankInterruptRequested) {\n                _handleInterrupt(Interrupts.bitPositionVBlankInterrupt);\n                wasInterruptHandled = true;\n            }\n            else if (Interrupts.isLcdInterruptEnabled && Interrupts.isLcdInterruptRequested) {\n                _handleInterrupt(Interrupts.bitPositionLcdInterrupt);\n                wasInterruptHandled = true;\n            }\n            else if (Interrupts.isTimerInterruptEnabled && Interrupts.isTimerInterruptRequested) {\n                _handleInterrupt(Interrupts.bitPositionTimerInterrupt);\n                wasInterruptHandled = true;\n            }\n            else if (Interrupts.isSerialInterruptEnabled && Interrupts.isSerialInterruptRequested) {\n                _handleInterrupt(Interrupts.bitPositionSerialInterrupt);\n                wasInterruptHandled = true;\n            }\n            else if (Interrupts.isJoypadInterruptEnabled && Interrupts.isJoypadInterruptRequested) {\n                _handleInterrupt(Interrupts.bitPositionJoypadInterrupt);\n                wasInterruptHandled = true;\n            }\n        }\n        var interuptHandlerCycles = 0;\n        if (wasInterruptHandled) {\n            // Interrupt handling requires 20 cycles, TCAGBD\n            interuptHandlerCycles = 20;\n            if (Cpu.isHalted()) {\n                // If the CPU was halted, now is the time to un-halt\n                // Should be done here when the jump occurs according to:\n                // https://www.reddit.com/r/EmuDev/comments/6fmjch/gb_glitches_in_links_awakening_and_pok%C3%A9mon_gold/\n                Cpu.exitHaltAndStop();\n                interuptHandlerCycles += 4;\n            }\n        }\n        if (Cpu.isHalted()) {\n            Cpu.exitHaltAndStop();\n        }\n        return interuptHandlerCycles;\n    }\n    return 0;\n}\nfunction _handleInterrupt(bitPosition) {\n    // Disable the master switch\n    setInterrupts(false);\n    // Disable the bit on the interruptRequest\n    var interruptRequest = eightBitLoadFromGBMemory(Interrupts.memoryLocationInterruptRequest);\n    interruptRequest = resetBitOnByte(bitPosition, interruptRequest);\n    Interrupts.interruptsRequestedValue = interruptRequest;\n    eightBitStoreIntoGBMemory(Interrupts.memoryLocationInterruptRequest, interruptRequest);\n    // Push the programCounter onto the stacks\n    // Push the next instruction, not the halt itself (TCAGBD).\n    Cpu.stackPointer = Cpu.stackPointer - 2;\n    if (Cpu.isHalted()) {\n        // TODO: This breaks Pokemon Yellow, And OG Link's awakening. Find out why...\n        // sixteenBitStoreIntoGBMemory(Cpu.stackPointer, Cpu.programCounter + 1);\n        sixteenBitStoreIntoGBMemory(Cpu.stackPointer, Cpu.programCounter);\n    }\n    else {\n        sixteenBitStoreIntoGBMemory(Cpu.stackPointer, Cpu.programCounter);\n    }\n    // Jump to the correct interrupt location\n    // Also piggyback off of the switch to reset our HW Register caching\n    // http://www.codeslinger.co.uk/pages/projects/gameboy/interupts.html\n    switch (bitPosition) {\n        case Interrupts.bitPositionVBlankInterrupt:\n            Interrupts.isVBlankInterruptRequested = false;\n            Cpu.programCounter = 0x40;\n            break;\n        case Interrupts.bitPositionLcdInterrupt:\n            Interrupts.isLcdInterruptRequested = false;\n            Cpu.programCounter = 0x48;\n            break;\n        case Interrupts.bitPositionTimerInterrupt:\n            Interrupts.isTimerInterruptRequested = false;\n            Cpu.programCounter = 0x50;\n            break;\n        case Interrupts.bitPositionSerialInterrupt:\n            Interrupts.isSerialInterruptRequested = false;\n            Cpu.programCounter = 0x58;\n            break;\n        case Interrupts.bitPositionJoypadInterrupt:\n            Interrupts.isJoypadInterruptRequested = false;\n            Cpu.programCounter = 0x60;\n            break;\n    }\n}\nfunction _requestInterrupt(bitPosition) {\n    var interruptRequest = eightBitLoadFromGBMemory(Interrupts.memoryLocationInterruptRequest);\n    // Pass to set the correct interrupt bit on interruptRequest\n    interruptRequest = setBitOnByte(bitPosition, interruptRequest);\n    Interrupts.interruptsRequestedValue = interruptRequest;\n    eightBitStoreIntoGBMemory(Interrupts.memoryLocationInterruptRequest, interruptRequest);\n}\nfunction setInterrupts(value) {\n    // If we are enabling interrupts,\n    // we want to wait 4 cycles before enabling\n    if (value) {\n        Interrupts.masterInterruptSwitchDelay = true;\n    }\n    else {\n        Interrupts.masterInterruptSwitch = false;\n    }\n}\n// Inlined because closure compiler inlines\nfunction requestVBlankInterrupt() {\n    Interrupts.isVBlankInterruptRequested = true;\n    _requestInterrupt(Interrupts.bitPositionVBlankInterrupt);\n}\n// Inlined because closure compiler inlines\nfunction requestLcdInterrupt() {\n    Interrupts.isLcdInterruptRequested = true;\n    _requestInterrupt(Interrupts.bitPositionLcdInterrupt);\n}\n// Inlined because closure compiler inlines\nfunction requestTimerInterrupt() {\n    Interrupts.isTimerInterruptRequested = true;\n    _requestInterrupt(Interrupts.bitPositionTimerInterrupt);\n}\n// Inlined because closure compiler inlines\nfunction requestJoypadInterrupt() {\n    Interrupts.isJoypadInterruptRequested = true;\n    _requestInterrupt(Interrupts.bitPositionJoypadInterrupt);\n}\n// Inlined because closure compiler inlines\nfunction requestSerialInterrupt() {\n    Interrupts.isSerialInterruptRequested = true;\n    _requestInterrupt(Interrupts.bitPositionSerialInterrupt);\n}\n\nvar Timers = /** @class */ (function () {\n    function Timers() {\n    }\n    // Number of cycles to run in each batch process\n    Timers.batchProcessCycles = function () {\n        return 256;\n    };\n    Timers.updateDividerRegister = function () {\n        var oldDividerRegister = Timers.dividerRegister;\n        Timers.dividerRegister = 0;\n        eightBitStoreIntoGBMemory(Timers.memoryLocationDividerRegister, 0);\n        if (Timers.timerEnabled && _checkDividerRegisterFallingEdgeDetector(oldDividerRegister, 0)) {\n            _incrementTimerCounter();\n        }\n    };\n    Timers.updateTimerCounter = function (value) {\n        if (Timers.timerEnabled) {\n            // From binjgb, dont write TIMA if we were just reset\n            if (Timers.timerCounterWasReset) {\n                return;\n            }\n            // Mooneye Test, tima_write_reloading\n            // Writing in this strange delay cycle, will cancel\n            // Both the interrupt and the TMA reload\n            if (Timers.timerCounterOverflowDelay) {\n                Timers.timerCounterOverflowDelay = false;\n            }\n        }\n        Timers.timerCounter = value;\n    };\n    Timers.updateTimerModulo = function (value) {\n        Timers.timerModulo = value;\n        // Mooneye Test, tma_write_reloading\n        // Don't update if we were reloading\n        if (Timers.timerEnabled && Timers.timerCounterWasReset) {\n            Timers.timerCounter = value;\n            Timers.timerCounterWasReset = false;\n        }\n    };\n    Timers.updateTimerControl = function (value) {\n        // Get some initial values\n        var oldTimerEnabled = Timers.timerEnabled;\n        Timers.timerEnabled = checkBitOnByte(2, value);\n        var newTimerInputClock = value & 0x03;\n        // Do some obscure behavior for if we should increment TIMA\n        // This does the timer increments from rapid_toggle mooneye tests\n        if (!oldTimerEnabled) {\n            var oldTimerCounterMaskBit = _getTimerCounterMaskBit(Timers.timerInputClock);\n            var newTimerCounterMaskBit = _getTimerCounterMaskBit(newTimerInputClock);\n            var shouldIncrementTimerCounter = false;\n            var dividerRegister = Timers.dividerRegister;\n            if (Timers.timerEnabled) {\n                shouldIncrementTimerCounter = checkBitOnByte(oldTimerCounterMaskBit, dividerRegister);\n            }\n            else {\n                shouldIncrementTimerCounter =\n                    checkBitOnByte(oldTimerCounterMaskBit, dividerRegister) && checkBitOnByte(newTimerCounterMaskBit, dividerRegister);\n            }\n            if (shouldIncrementTimerCounter) {\n                _incrementTimerCounter();\n            }\n        }\n        Timers.timerInputClock = newTimerInputClock;\n    };\n    // Function to save the state of the class\n    // TODO: Save state for new properties on Timers\n    Timers.saveState = function () {\n        // Batch Processing\n        store(getSaveStateMemoryOffset(0x00, Timers.saveStateSlot), Timers.currentCycles);\n        // Divider Register\n        store(getSaveStateMemoryOffset(0x04, Timers.saveStateSlot), Timers.dividerRegister);\n        // Timer Counter\n        store(getSaveStateMemoryOffset(0x08, Timers.saveStateSlot), Timers.timerCounter);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x0c, Timers.saveStateSlot), Timers.timerCounterOverflowDelay);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x0d, Timers.saveStateSlot), Timers.timerCounterWasReset);\n        store(getSaveStateMemoryOffset(0x0e, Timers.saveStateSlot), Timers.timerCounterMask);\n        // Timer Modulo\n        store(getSaveStateMemoryOffset(0x12, Timers.saveStateSlot), Timers.timerModulo);\n        // Timer Control\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x16, Timers.saveStateSlot), Timers.timerEnabled);\n        store(getSaveStateMemoryOffset(0x17, Timers.saveStateSlot), Timers.timerInputClock);\n    };\n    // Function to load the save state from memory\n    Timers.loadState = function () {\n        // Batch Processing\n        Timers.currentCycles = load(getSaveStateMemoryOffset(0x00, Timers.saveStateSlot));\n        // Divider Register\n        Timers.dividerRegister = load(getSaveStateMemoryOffset(0x04, Timers.saveStateSlot));\n        // Timer Counter\n        Timers.timerCounter = load(getSaveStateMemoryOffset(0x08, Timers.saveStateSlot));\n        Timers.timerCounterOverflowDelay = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x0c, Timers.saveStateSlot));\n        Timers.timerCounterWasReset = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x0d, Timers.saveStateSlot));\n        Timers.timerCounterMask = load(getSaveStateMemoryOffset(0x0e, Timers.saveStateSlot));\n        // Timer Modulo\n        Timers.timerModulo = load(getSaveStateMemoryOffset(0x12, Timers.saveStateSlot));\n        // Timer Control\n        Timers.timerEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x16, Timers.saveStateSlot));\n        Timers.timerInputClock = load(getSaveStateMemoryOffset(0x17, Timers.saveStateSlot));\n    };\n    // Current cycles\n    // This will be used for batch processing\n    Timers.currentCycles = 0;\n    // Divider Register = DIV\n    // Divider Register is 16 bits.\n    // Divider Register when read is just the upper 8 bits\n    // But internally is used as the full 16\n    // Essentially dividerRegister is an always counting clock\n    // DIV Drives everything, it is the heart of the timer.\n    // All other timing registers base them selves relative to the DIV register\n    // Think of the div register as like a cycle counter :)\n    // DIV will increment TIMA, whenever there is a falling edge, see below for that.\n    Timers.memoryLocationDividerRegister = 0xff04; // DIV\n    Timers.dividerRegister = 0;\n    // timerCounter = TIMA\n    // TIMA is the actual counter.\n    // Whenever the DIV gets the falling edge, and other obscure cases,\n    // This is incremented. When this overflows, we need to fire an interrupt.\n    Timers.memoryLocationTimerCounter = 0xff05;\n    Timers.timerCounter = 0;\n    Timers.timerCounterOverflowDelay = false;\n    Timers.timerCounterWasReset = false;\n    Timers.timerCounterMask = 0;\n    // Timer Modulo = TMA\n    // TMA is what TIMA (Notice the I :p) is counting from, and TIMA will load\n    // Whenever TIMA overflow.\n    // For instance, we count like 1,2,3,4,5,6,7,8,9, and then overflow to 10.\n    // TMA would be like \"Hey, start counting from 5 whenever we reset\"\n    // Then we would be like 5,6,7,8,9...5,6,7,8,9...etc...\n    Timers.memoryLocationTimerModulo = 0xff06;\n    Timers.timerModulo = 0;\n    // Timer Control = TAC\n    // TAC Says how fast we are counting.\n    // TAC controls which bit we are watching for the falling edge on the DIV register\n    // And whenever the bit has the falling edge, we increment TIMA (The thing counting).\n    // Therefore, depending on the value, we will either count faster or slower.\n    Timers.memoryLocationTimerControl = 0xff07;\n    // Bit 2    - Timer Stop  (0=Stop, 1=Start)\n    // Bits 1-0 - Input Clock Select\n    //            00:   4096 Hz    (~4194 Hz SGB) (1024 cycles)\n    //            01: 262144 Hz  (~268400 Hz SGB) (16 cycles)\n    //            10:  65536 Hz   (~67110 Hz SGB) (64 cycles)\n    //            11:  16384 Hz   (~16780 Hz SGB) (256 cycles)\n    Timers.timerEnabled = false;\n    Timers.timerInputClock = 0;\n    // Save States\n    Timers.saveStateSlot = 5;\n    return Timers;\n}());\n// Inlined because closure compiler inlines\nfunction initializeTimers() {\n    // Reset stateful Variables\n    Timers.currentCycles = 0;\n    Timers.dividerRegister = 0;\n    Timers.timerCounter = 0;\n    Timers.timerModulo = 0;\n    Timers.timerEnabled = false;\n    Timers.timerInputClock = 0;\n    Timers.timerCounterOverflowDelay = false;\n    Timers.timerCounterWasReset = false;\n    if (Cpu.GBCEnabled) {\n        // DIV\n        eightBitStoreIntoGBMemory(0xff04, 0x1e);\n        Timers.dividerRegister = 0x1ea0;\n        // 0xFF05 -> 0xFF06 = 0x00\n        // TAC\n        eightBitStoreIntoGBMemory(0xff07, 0xf8);\n        Timers.timerInputClock = 0xf8;\n    }\n    else {\n        // DIV\n        eightBitStoreIntoGBMemory(0xff04, 0xab);\n        Timers.dividerRegister = 0xabcc;\n        // 0xFF05 -> 0xFF06 = 0x00\n        // TAC\n        eightBitStoreIntoGBMemory(0xff07, 0xf8);\n        Timers.timerInputClock = 0xf8;\n    }\n    // Override/reset some variables if the boot ROM is enabled\n    if (Cpu.BootROMEnabled) {\n        if (Cpu.GBCEnabled) ;\n        else {\n            // GB\n            // DIV\n            eightBitStoreIntoGBMemory(0xff04, 0x00);\n            Timers.dividerRegister = 0x0004;\n        }\n    }\n}\n// Batch Process Timers\n// Only checked on writes\n// Function to batch process our Timers after we skipped so many cycles\nfunction batchProcessTimers() {\n    // TODO: Did a timer rewrite, make a proper batch processing\n    // For timers\n    updateTimers(Timers.currentCycles);\n    Timers.currentCycles = 0;\n}\nfunction updateTimers(numberOfCycles) {\n    // Want to increment 4 cycles at a time like an actual GB would\n    var cyclesIncreased = 0;\n    while (cyclesIncreased < numberOfCycles) {\n        var oldDividerRegister = Timers.dividerRegister;\n        var curDividerRegister = oldDividerRegister;\n        cyclesIncreased += 4;\n        curDividerRegister += 4;\n        curDividerRegister &= 0xffff;\n        Timers.dividerRegister = curDividerRegister;\n        if (Timers.timerEnabled) {\n            var timerCounterWasReset = Timers.timerCounterWasReset;\n            if (Timers.timerCounterOverflowDelay) {\n                Timers.timerCounter = Timers.timerModulo;\n                // Fire off timer interrupt\n                requestTimerInterrupt();\n                Timers.timerCounterOverflowDelay = false;\n                Timers.timerCounterWasReset = true;\n            }\n            else if (timerCounterWasReset) {\n                Timers.timerCounterWasReset = false;\n            }\n            if (_checkDividerRegisterFallingEdgeDetector(oldDividerRegister, curDividerRegister)) {\n                _incrementTimerCounter();\n            }\n        }\n    }\n}\n// Function to increment our Timer Counter\n// This fires off interrupts once we overflow\nfunction _incrementTimerCounter() {\n    var counter = Timers.timerCounter;\n    if (++counter > 255) {\n        // Whenever the timer overflows, there is a slight delay (4 cycles)\n        // Of when TIMA gets TMA's value, and the interrupt is fired.\n        // Thus we will set the delay, which can be handled in the update timer or write trap\n        Timers.timerCounterOverflowDelay = true;\n        counter = 0;\n    }\n    Timers.timerCounter = counter;\n}\n// Function to act as our falling edge detector\n// Whenever we have a falling edge, we need to increment TIMA\n// http://gbdev.gg8.se/wiki/articles/Timer_Obscure_Behaviour\n// https://github.com/binji/binjgb/blob/master/src/emulator.c#L1944\nfunction _checkDividerRegisterFallingEdgeDetector(oldDividerRegister, newDividerRegister) {\n    // Get our mask\n    var timerCounterMaskBit = _getTimerCounterMaskBit(Timers.timerInputClock);\n    // If the old register's watched bit was zero,\n    // but after adding the new registers wastch bit is now 1\n    return checkBitOnByte(timerCounterMaskBit, oldDividerRegister) && !checkBitOnByte(timerCounterMaskBit, newDividerRegister);\n}\n// Function to get our current tima mask bit\n// used for our falling edge detector\n// See The docs linked above, or TCAGB for this bit mapping\nfunction _getTimerCounterMaskBit(timerInputClock) {\n    switch (timerInputClock) {\n        case 0x00:\n            return 9;\n        case 0x01:\n            return 3;\n        case 0x02:\n            return 5;\n        case 0x03:\n            return 7;\n    }\n    return 0;\n}\n\n// Link cable / serial implementation\nvar Serial = /** @class */ (function () {\n    function Serial() {\n    }\n    Serial.updateTransferControl = function (value) {\n        Serial.isShiftClockInternal = checkBitOnByte(0, value);\n        Serial.isClockSpeedFast = checkBitOnByte(1, value);\n        Serial.transferStartFlag = checkBitOnByte(7, value);\n        // Allow the original write, and return since we dont need to look anymore\n        return true;\n    };\n    // Cycle counter\n    Serial.currentCycles = 0x00;\n    // Register locations\n    Serial.memoryLocationSerialTransferData = 0xff01; // SB\n    Serial.memoryLocationSerialTransferControl = 0xff02; // SC\n    // Number of bits transferred\n    Serial.numberOfBitsTransferred = 0;\n    // Transfer control variables\n    Serial.isShiftClockInternal = false;\n    Serial.isClockSpeedFast = false;\n    Serial.transferStartFlag = false;\n    return Serial;\n}());\n// Function to initialize our serial values\n// Inlined because closure compiler inlines\nfunction initializeSerial() {\n    Serial.currentCycles = 0x00;\n    Serial.numberOfBitsTransferred = 0;\n    if (Cpu.GBCEnabled) {\n        // FF01 = 0x00\n        eightBitStoreIntoGBMemory(0xff02, 0x7c);\n        Serial.updateTransferControl(0x7c);\n    }\n    else {\n        // FF01 = 0x00\n        eightBitStoreIntoGBMemory(0xff02, 0x7e);\n        Serial.updateTransferControl(0x7e);\n    }\n}\n// TODO: Finish serial\n// See minimal serial: https://github.com/binji/binjgb/commit/64dece05c4ef5a052c4b9b75eb3ddbbfc6677cbe\n// Inlined because closure compiler inlines\nfunction updateSerial(numberOfCycles) {\n    // If we aren't starting our transfer, or transferring,\n    // return\n    if (!Serial.transferStartFlag) {\n        return;\n    }\n    // Want to increment 4 cycles at a time like an actual GB would\n    var cyclesIncreased = 0;\n    while (cyclesIncreased < numberOfCycles) {\n        var oldCycles = Serial.currentCycles;\n        var curCycles = oldCycles;\n        cyclesIncreased += 4;\n        curCycles += 4;\n        if (curCycles > 0xffff) {\n            curCycles -= 0x10000;\n        }\n        Serial.currentCycles = curCycles;\n        if (_checkFallingEdgeDetector(oldCycles, curCycles)) {\n            // TODO: Since no actual connection, always transfer 1\n            // Need to fix this\n            var memoryLocationSerialTransferData = Serial.memoryLocationSerialTransferData;\n            var transferData = eightBitLoadFromGBMemory(memoryLocationSerialTransferData);\n            transferData = (transferData << 1) + 1;\n            transferData = transferData & 0xff;\n            eightBitStoreIntoGBMemory(memoryLocationSerialTransferData, transferData);\n            var numberOfBitsTransferred = Serial.numberOfBitsTransferred;\n            if (++numberOfBitsTransferred === 8) {\n                Serial.numberOfBitsTransferred = 0;\n                requestSerialInterrupt();\n                // Disable transfer start\n                var memoryLocationSerialTransferControl = Serial.memoryLocationSerialTransferControl;\n                var transferControl = eightBitLoadFromGBMemory(memoryLocationSerialTransferControl);\n                eightBitStoreIntoGBMemory(memoryLocationSerialTransferControl, resetBitOnByte(7, transferControl));\n                Serial.transferStartFlag = false;\n            }\n            else {\n                Serial.numberOfBitsTransferred = numberOfBitsTransferred;\n            }\n        }\n    }\n}\n// Inlined because closure compiler inlines\nfunction _checkFallingEdgeDetector(oldCycles, newCycles) {\n    // Get our mask\n    var maskBit = _getFallingEdgeMaskBit();\n    // If the old register's watched bit was zero,\n    // but after adding the new registers wastch bit is now 1\n    return checkBitOnByte(maskBit, oldCycles) && !checkBitOnByte(maskBit, newCycles);\n}\n// Function to get our current tima mask bit\n// used for our falling edge detector\n// See The docs linked above, or TCAGB for this bit mapping\n// Inlined because closure compiler inlines\nfunction _getFallingEdgeMaskBit() {\n    return Serial.isClockSpeedFast ? 2 : 7;\n}\n\n// http://www.codeslinger.co.uk/pages/projects/gameboy/joypad.html\n// Joypad Register\n// Taken from pandocs\n// Bit 7 - Not used\n// Bit 6 - Not used\n// Bit 5 - P15 Select Button Keys (0=Select)\n// Bit 4 - P14 Select Direction Keys (0=Select)\n// Bit 3 - P13 Input Down or Start (0=Pressed) (Read Only)\n// Bit 2 - P12 Input Up or Select (0=Pressed) (Read Only)\n// Bit 1 - P11 Input Left or Button B (0=Pressed) (Read Only)\n// Bit 0 - P10 Input Right or Button A (0=Pressed) (Read Only)\n// Button Ids will be the following:\n// UP - 0\n// RIGHT - 1\n// DOWN - 2\n// LEFT - 3\n// A - 4\n// B - 5\n// SELECT - 6\n// START - 7\nvar Joypad = /** @class */ (function () {\n    function Joypad() {\n    }\n    Joypad.updateJoypad = function (value) {\n        Joypad.joypadRegisterFlipped = value ^ 0xff;\n        Joypad.isDpadType = checkBitOnByte(4, Joypad.joypadRegisterFlipped);\n        Joypad.isButtonType = checkBitOnByte(5, Joypad.joypadRegisterFlipped);\n    };\n    // Function to save the state of the class\n    Joypad.saveState = function () {\n        store(getSaveStateMemoryOffset(0x00, Joypad.saveStateSlot), Joypad.joypadRegisterFlipped);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x01, Joypad.saveStateSlot), Joypad.isDpadType);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x02, Joypad.saveStateSlot), Joypad.isButtonType);\n    };\n    // Function to load the save state from memory\n    Joypad.loadState = function () {\n        Joypad.joypadRegisterFlipped = load(getSaveStateMemoryOffset(0x00, Joypad.saveStateSlot));\n        Joypad.isDpadType = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x01, Joypad.saveStateSlot));\n        Joypad.isButtonType = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x02, Joypad.saveStateSlot));\n    };\n    Joypad.up = false;\n    Joypad.down = false;\n    Joypad.left = false;\n    Joypad.right = false;\n    Joypad.a = false;\n    Joypad.b = false;\n    Joypad.select = false;\n    Joypad.start = false;\n    Joypad.memoryLocationJoypadRegister = 0xff00;\n    // Cache some values on the Joypad register\n    Joypad.joypadRegisterFlipped = 0;\n    Joypad.isDpadType = false;\n    Joypad.isButtonType = false;\n    // Save States\n    // Not doing anything for Joypad for now\n    Joypad.saveStateSlot = 3;\n    return Joypad;\n}());\n// Inlined because closure compiler inlines\nfunction getJoypadState() {\n    // Get the joypad register\n    var joypadRegister = Joypad.joypadRegisterFlipped;\n    if (Joypad.isDpadType) {\n        // D-pad buttons\n        // Up\n        if (Joypad.up) {\n            joypadRegister = resetBitOnByte(2, joypadRegister);\n        }\n        else {\n            joypadRegister = setBitOnByte(2, joypadRegister);\n        }\n        // Right\n        if (Joypad.right) {\n            joypadRegister = resetBitOnByte(0, joypadRegister);\n        }\n        else {\n            joypadRegister = setBitOnByte(0, joypadRegister);\n        }\n        // Down\n        if (Joypad.down) {\n            joypadRegister = resetBitOnByte(3, joypadRegister);\n        }\n        else {\n            joypadRegister = setBitOnByte(3, joypadRegister);\n        }\n        // Left\n        if (Joypad.left) {\n            joypadRegister = resetBitOnByte(1, joypadRegister);\n        }\n        else {\n            joypadRegister = setBitOnByte(1, joypadRegister);\n        }\n    }\n    else if (Joypad.isButtonType) {\n        // A\n        if (Joypad.a) {\n            joypadRegister = resetBitOnByte(0, joypadRegister);\n        }\n        else {\n            joypadRegister = setBitOnByte(0, joypadRegister);\n        }\n        // B\n        if (Joypad.b) {\n            joypadRegister = resetBitOnByte(1, joypadRegister);\n        }\n        else {\n            joypadRegister = setBitOnByte(1, joypadRegister);\n        }\n        // Select\n        if (Joypad.select) {\n            joypadRegister = resetBitOnByte(2, joypadRegister);\n        }\n        else {\n            joypadRegister = setBitOnByte(2, joypadRegister);\n        }\n        // Start\n        if (Joypad.start) {\n            joypadRegister = resetBitOnByte(3, joypadRegister);\n        }\n        else {\n            joypadRegister = setBitOnByte(3, joypadRegister);\n        }\n    }\n    // Set the top 4 bits to on\n    joypadRegister = joypadRegister | 0xf0;\n    return joypadRegister;\n}\nfunction setJoypadState(up, right, down, left, a, b, select, start) {\n    if (up > 0) {\n        _pressJoypadButton(0);\n    }\n    else {\n        _releaseJoypadButton(0);\n    }\n    if (right > 0) {\n        _pressJoypadButton(1);\n    }\n    else {\n        _releaseJoypadButton(1);\n    }\n    if (down > 0) {\n        _pressJoypadButton(2);\n    }\n    else {\n        _releaseJoypadButton(2);\n    }\n    if (left > 0) {\n        _pressJoypadButton(3);\n    }\n    else {\n        _releaseJoypadButton(3);\n    }\n    if (a > 0) {\n        _pressJoypadButton(4);\n    }\n    else {\n        _releaseJoypadButton(4);\n    }\n    if (b > 0) {\n        _pressJoypadButton(5);\n    }\n    else {\n        _releaseJoypadButton(5);\n    }\n    if (select > 0) {\n        _pressJoypadButton(6);\n    }\n    else {\n        _releaseJoypadButton(6);\n    }\n    if (start > 0) {\n        _pressJoypadButton(7);\n    }\n    else {\n        _releaseJoypadButton(7);\n    }\n}\nfunction _pressJoypadButton(buttonId) {\n    // Un stop the CPU\n    Cpu.isStopped = false;\n    // Check if the button state changed from not pressed\n    var isButtonStateChanging = false;\n    if (!_getJoypadButtonStateFromButtonId(buttonId)) {\n        isButtonStateChanging = true;\n    }\n    // Set our joypad state\n    _setJoypadButtonStateFromButtonId(buttonId, true);\n    // If the button state is changing, check for an interrupt\n    if (isButtonStateChanging) {\n        // Determine if it is a button or a dpad button\n        var isDpadTypeButton = false;\n        if (buttonId <= 3) {\n            isDpadTypeButton = true;\n        }\n        // Determine if we should request an interrupt\n        var shouldRequestInterrupt = false;\n        // Check if the game is looking for a dpad type button press\n        if (Joypad.isDpadType && isDpadTypeButton) {\n            shouldRequestInterrupt = true;\n        }\n        // Check if the game is looking for a button type button press\n        if (Joypad.isButtonType && !isDpadTypeButton) {\n            shouldRequestInterrupt = true;\n        }\n        // Finally, request the interrupt, if the button state actually changed\n        if (shouldRequestInterrupt) {\n            requestJoypadInterrupt();\n        }\n    }\n}\n// Inlined because closure compiler inlines\nfunction _releaseJoypadButton(buttonId) {\n    // Set our joypad state\n    _setJoypadButtonStateFromButtonId(buttonId, false);\n}\nfunction _getJoypadButtonStateFromButtonId(buttonId) {\n    switch (buttonId) {\n        case 0:\n            return Joypad.up;\n        case 1:\n            return Joypad.right;\n        case 2:\n            return Joypad.down;\n        case 3:\n            return Joypad.left;\n        case 4:\n            return Joypad.a;\n        case 5:\n            return Joypad.b;\n        case 6:\n            return Joypad.select;\n        case 7:\n            return Joypad.start;\n        default:\n            return false;\n    }\n}\nfunction _setJoypadButtonStateFromButtonId(buttonId, isPressed) {\n    switch (buttonId) {\n        case 0:\n            Joypad.up = isPressed;\n            break;\n        case 1:\n            Joypad.right = isPressed;\n            break;\n        case 2:\n            Joypad.down = isPressed;\n            break;\n        case 3:\n            Joypad.left = isPressed;\n            break;\n        case 4:\n            Joypad.a = isPressed;\n            break;\n        case 5:\n            Joypad.b = isPressed;\n            break;\n        case 6:\n            Joypad.select = isPressed;\n            break;\n        case 7:\n            Joypad.start = isPressed;\n            break;\n    }\n}\n\n// Function to handle rom/rambanking\n// Inlined because closure compiler inlines\nfunction handleBanking(offset, value) {\n    // Is rom Only does not bank\n    if (Memory.isRomOnly) {\n        return;\n    }\n    var isMBC1 = Memory.isMBC1;\n    var isMBC2 = Memory.isMBC2;\n    // Enable Ram Banking\n    if (offset <= 0x1fff) {\n        if (isMBC2 && !checkBitOnByte(4, value)) {\n            // Do Nothing\n            return;\n        }\n        else {\n            var romEnableByte = value & 0x0f;\n            if (romEnableByte === 0x00) {\n                Memory.isRamBankingEnabled = false;\n            }\n            else if (romEnableByte === 0x0a) {\n                Memory.isRamBankingEnabled = true;\n            }\n        }\n    }\n    else if (offset <= 0x3fff) {\n        var isMBC5 = Memory.isMBC5;\n        if (!isMBC5 || offset <= 0x2fff) {\n            // Change Low Bits on the Current Rom Bank\n            var currentRomBank = Memory.currentRomBank;\n            if (isMBC2) {\n                currentRomBank = value & 0x0f;\n            }\n            // Set the number of bottom bytes from the MBC type\n            var romBankLowerBits = value;\n            if (isMBC1) {\n                // Only want the bottom 5\n                romBankLowerBits = romBankLowerBits & 0x1f;\n                currentRomBank &= 0xe0;\n            }\n            else if (Memory.isMBC3) {\n                // Only Want the bottom 7\n                romBankLowerBits = romBankLowerBits & 0x7f;\n                currentRomBank &= 0x80;\n            }\n            else if (isMBC5) {\n                // Going to switch the whole thing\n                currentRomBank &= 0x00;\n            }\n            // Set the lower bytes\n            currentRomBank |= romBankLowerBits;\n            Memory.currentRomBank = currentRomBank;\n            return;\n        }\n        else {\n            // TODO: MBC5 High bits Rom bank, check if this works, not sure about the value\n            var lowByte = splitLowByte(Memory.currentRomBank);\n            var highByte = (value > 0);\n            Memory.currentRomBank = concatenateBytes(highByte, lowByte);\n        }\n    }\n    else if (!isMBC2 && offset <= 0x5fff) {\n        // ROM / RAM Banking, MBC2 doesn't do this\n        if (isMBC1 && Memory.isMBC1RomModeEnabled) {\n            // Do an upper bit rom bank for MBC 1\n            // Remove upper bits of currentRomBank\n            var currentRomBank = Memory.currentRomBank & 0x1f;\n            var romBankHigherBits = value & 0xe0;\n            currentRomBank |= romBankHigherBits;\n            Memory.currentRomBank = currentRomBank;\n            return;\n        }\n        var ramBankBits = value;\n        if (!Memory.isMBC5) {\n            // Get the bottom 2 bits\n            ramBankBits &= 0x03;\n        }\n        else {\n            // Get the bottom nibble\n            ramBankBits &= 0x0f;\n        }\n        // Set our ram bank\n        Memory.currentRamBank = ramBankBits;\n        return;\n    }\n    else if (!isMBC2 && offset <= 0x7fff) {\n        if (isMBC1) {\n            Memory.isMBC1RomModeEnabled = checkBitOnByte(0, value);\n        }\n        // TODO: MBC3 Latch Clock Data\n    }\n}\n// Inlined because closure compiler inlines\nfunction getRomBankAddress(gameboyOffset) {\n    var currentRomBank = Memory.currentRomBank;\n    if (!Memory.isMBC5 && currentRomBank === 0) {\n        currentRomBank = 1;\n    }\n    // Adjust our gameboy offset relative to zero for the gameboy memory map\n    return (0x4000 * currentRomBank + (gameboyOffset - Memory.switchableCartridgeRomLocation));\n}\n// Inlined because closure compiler inlines\nfunction getRamBankAddress(gameboyOffset) {\n    // Adjust our gameboy offset relative to zero for the gameboy memory map\n    return (0x2000 * Memory.currentRamBank + (gameboyOffset - Memory.cartridgeRamLocation));\n}\n\n// Inlined because closure compiler inlines\nfunction initializeDma() {\n    if (Cpu.GBCEnabled) {\n        // GBC DMA\n        eightBitStoreIntoGBMemory(0xff51, 0xff);\n        eightBitStoreIntoGBMemory(0xff52, 0xff);\n        eightBitStoreIntoGBMemory(0xff53, 0xff);\n        eightBitStoreIntoGBMemory(0xff54, 0xff);\n        eightBitStoreIntoGBMemory(0xff55, 0xff);\n    }\n    else {\n        // GB DMA\n        eightBitStoreIntoGBMemory(0xff51, 0xff);\n        eightBitStoreIntoGBMemory(0xff52, 0xff);\n        eightBitStoreIntoGBMemory(0xff53, 0xff);\n        eightBitStoreIntoGBMemory(0xff54, 0xff);\n        eightBitStoreIntoGBMemory(0xff55, 0xff);\n    }\n}\n// Inlined because closure compiler inlines\nfunction startDmaTransfer(sourceAddressOffset) {\n    var sourceAddress = sourceAddressOffset << 8;\n    for (var i = 0; i <= 0x9f; ++i) {\n        var spriteInformationByte = eightBitLoadFromGBMemory(sourceAddress + i);\n        var spriteInformationAddress = Memory.spriteInformationTableLocation + i;\n        eightBitStoreIntoGBMemory(spriteInformationAddress, spriteInformationByte);\n    }\n    // TCAGBD:  This copy (DMA) needs 160 × 4 + 4 clocks to complete in both double speed and single speeds modes\n    // Increment all of our Cycle coiunters in ../cpu/opcodes\n    Memory.DMACycles = 644;\n}\n// https://gist.github.com/drhelius/3394856\n// http://bgb.bircd.org/pandocs.htm\n// Inlined because closure compiler inlines\nfunction startHdmaTransfer(hdmaTriggerByteToBeWritten) {\n    // Check if we are Gbc\n    if (!Cpu.GBCEnabled) {\n        return;\n    }\n    // Check if we are trying to terminate an already active HBLANK HDMA\n    if (Memory.isHblankHdmaActive && !checkBitOnByte(7, hdmaTriggerByteToBeWritten)) {\n        // Don't reset anything, just set bit 7 to 1 on the trigger byte\n        Memory.isHblankHdmaActive = false;\n        var hdmaTriggerByte = eightBitLoadFromGBMemory(Memory.memoryLocationHdmaTrigger);\n        eightBitStoreIntoGBMemory(Memory.memoryLocationHdmaTrigger, setBitOnByte(7, hdmaTriggerByte));\n        return;\n    }\n    // Get our source and destination for the HDMA\n    var hdmaSource = getHdmaSourceFromMemory();\n    var hdmaDestination = getHdmaDestinationFromMemory();\n    // Get the length from the trigger\n    // Lower 7 bits, Add 1, times 16\n    // https://gist.github.com/drhelius/3394856\n    var transferLength = resetBitOnByte(7, hdmaTriggerByteToBeWritten);\n    transferLength = (transferLength + 1) << 4;\n    // Get bit 7 of the trigger for the HDMA type\n    if (checkBitOnByte(7, hdmaTriggerByteToBeWritten)) {\n        // H-Blank DMA\n        Memory.isHblankHdmaActive = true;\n        Memory.hblankHdmaTransferLengthRemaining = transferLength;\n        Memory.hblankHdmaSource = hdmaSource;\n        Memory.hblankHdmaDestination = hdmaDestination;\n        // This will be handled in updateHblankHdma()\n        // Since we return false in write traps, we need to now write the byte\n        // Be sure to reset bit 7, to show that the hdma is active\n        eightBitStoreIntoGBMemory(Memory.memoryLocationHdmaTrigger, resetBitOnByte(7, hdmaTriggerByteToBeWritten));\n    }\n    else {\n        // General DMA\n        hdmaTransfer(hdmaSource, hdmaDestination, transferLength);\n        // Stop the DMA\n        eightBitStoreIntoGBMemory(Memory.memoryLocationHdmaTrigger, 0xff);\n    }\n}\n// Inlined because closure compiler inlines\nfunction updateHblankHdma() {\n    if (!Memory.isHblankHdmaActive) {\n        return;\n    }\n    // Get our amount of bytes to transfer (Only 0x10 bytes at a time)\n    var bytesToTransfer = 0x10;\n    var hblankHdmaTransferLengthRemaining = Memory.hblankHdmaTransferLengthRemaining;\n    if (hblankHdmaTransferLengthRemaining < bytesToTransfer) {\n        // Set to the difference\n        bytesToTransfer = hblankHdmaTransferLengthRemaining;\n    }\n    // Do the transfer (Only 0x10 bytes at a time)\n    hdmaTransfer(Memory.hblankHdmaSource, Memory.hblankHdmaDestination, bytesToTransfer);\n    // Update our source and destination\n    Memory.hblankHdmaSource += bytesToTransfer;\n    Memory.hblankHdmaDestination += bytesToTransfer;\n    hblankHdmaTransferLengthRemaining -= bytesToTransfer;\n    Memory.hblankHdmaTransferLengthRemaining = hblankHdmaTransferLengthRemaining;\n    var memoryLocationHdmaTrigger = Memory.memoryLocationHdmaTrigger;\n    if (hblankHdmaTransferLengthRemaining <= 0) {\n        // End the transfer\n        Memory.isHblankHdmaActive = false;\n        // Need to clear the HDMA with 0xFF, which sets bit 7 to 1 to show the HDMA has ended\n        eightBitStoreIntoGBMemory(memoryLocationHdmaTrigger, 0xff);\n    }\n    else {\n        // Set our new transfer length, make sure it is in the weird format,\n        // and make sure bit 7 is 0, to show that the HDMA is Active\n        var remainingTransferLength = hblankHdmaTransferLengthRemaining;\n        var transferLengthAsByte = (remainingTransferLength >> 4) - 1;\n        eightBitStoreIntoGBMemory(memoryLocationHdmaTrigger, resetBitOnByte(7, transferLengthAsByte));\n    }\n}\n// Simple Function to transfer the bytes from a destination to a source for a general pourpose or Hblank HDMA\nfunction hdmaTransfer(hdmaSource, hdmaDestination, transferLength) {\n    for (var i = 0; i < transferLength; ++i) {\n        var sourceByte = eightBitLoadFromGBMemoryWithTraps(hdmaSource + i);\n        // get the hdmaDestination with wrapping\n        // See issue #61: https://github.com/torch2424/wasmBoy/issues/61\n        var hdmaDestinationWithWrapping = hdmaDestination + i;\n        while (hdmaDestinationWithWrapping > 0x9fff) {\n            // Simply clear the top 3 bits\n            hdmaDestinationWithWrapping -= 0x2000;\n        }\n        eightBitStoreIntoGBMemoryWithTraps(hdmaDestinationWithWrapping, sourceByte);\n    }\n    // Set our Cycles used for the HDMA\n    // Since DMA in GBC Double Speed Mode takes 80 micro seconds,\n    // And HDMA takes 8 micro seconds per 0x10 bytes in GBC Double Speed mode (and GBC Normal Mode)\n    // Will assume (644 / 10) cycles for GBC Double Speed Mode,\n    // and (644 / 10 / 2) for GBC Normal Mode\n    var hdmaCycles = 32 << Cpu.GBCDoubleSpeed;\n    hdmaCycles = hdmaCycles * (transferLength >> 4);\n    Memory.DMACycles += hdmaCycles;\n}\n// Function to get our HDMA Source\n// Follows the poan docs\n// Inlined because closure compiler inlines\nfunction getHdmaSourceFromMemory() {\n    // Get our source for the HDMA\n    var hdmaSourceHigh = eightBitLoadFromGBMemory(Memory.memoryLocationHdmaSourceHigh);\n    var hdmaSourceLow = eightBitLoadFromGBMemory(Memory.memoryLocationHdmaSourceLow);\n    var hdmaSource = concatenateBytes(hdmaSourceHigh, hdmaSourceLow);\n    // And off the appopriate bits for the source and destination\n    // And off the bottom 4 bits\n    hdmaSource = hdmaSource & 0xfff0;\n    return hdmaSource;\n}\n// Function to get our HDMA Destination\n// Follows the poan docs\n// Inlined because closure compiler inlines\nfunction getHdmaDestinationFromMemory() {\n    var hdmaDestinationHigh = eightBitLoadFromGBMemory(Memory.memoryLocationHdmaDestinationHigh);\n    var hdmaDestinationLow = eightBitLoadFromGBMemory(Memory.memoryLocationHdmaDestinationLow);\n    var hdmaDestination = concatenateBytes(hdmaDestinationHigh, hdmaDestinationLow);\n    // Can only be in VRAM, 0x8000 -> 0x9FF0\n    // Pan docs says to knock off upper 3 bits, and lower 4 bits\n    // Which gives us: 0001111111110000 or 0x1FF0\n    // Meaning we must add 0x8000\n    hdmaDestination = hdmaDestination & 0x1ff0;\n    hdmaDestination += Memory.videoRamLocation;\n    return hdmaDestination;\n}\n\n// Internal function to trap any modify data trying to be written to Gameboy memory\n// Follows the Gameboy memory map\n// Return true if you want to continue the write, return false to end it here\nfunction checkWriteTraps(offset, value) {\n    // Cpu\n    if (offset === Cpu.memoryLocationSpeedSwitch) {\n        // TCAGBD, only Bit 0 is writable\n        eightBitStoreIntoGBMemory(Cpu.memoryLocationSpeedSwitch, value & 0x01);\n        // We did the write, dont need to\n        return false;\n    }\n    // Handle Boot ROM Switch\n    if (Cpu.BootROMEnabled && offset === Cpu.memoryLocationBootROMSwitch) {\n        // Disable the boot rom\n        Cpu.BootROMEnabled = false;\n        // Set the program counter to be incremented after this command\n        Cpu.programCounter = 0x00ff;\n        // Allow the write\n        return true;\n    }\n    // Graphics\n    // Cache globals used multiple times for performance\n    var videoRamLocation = Memory.videoRamLocation;\n    var spriteInformationTableLocation = Memory.spriteInformationTableLocation;\n    // Handle banking\n    if (offset < videoRamLocation) {\n        handleBanking(offset, value);\n        return false;\n    }\n    // Check the graphics mode to see if we can write to VRAM\n    // http://gbdev.gg8.se/wiki/articles/Video_Display#Accessing_VRAM_and_OAM\n    if (offset >= videoRamLocation && offset < Memory.cartridgeRamLocation) {\n        // Can only read/write from VRAM During Modes 0 - 2\n        // See graphics/lcd.ts\n        // TODO: This can do more harm than good in a beta emulator,\n        // requires precise timing disabling for now\n        // if (Graphics.currentLcdMode > 2) {\n        //   return false;\n        // }\n        // Not batch processing here for performance\n        // batchProcessGraphics();\n        // Allow the original write, and return since we dont need to look anymore\n        return true;\n    }\n    // Be sure to copy everything in EchoRam to Work Ram\n    // Codeslinger: The ECHO memory region (0xE000-0xFDFF) is quite different because any data written here is also written in the equivelent ram memory region 0xC000-0xDDFF.\n    // Hence why it is called echo\n    if (offset >= Memory.echoRamLocation && offset < spriteInformationTableLocation) {\n        var wramOffset = offset - 0x2000;\n        eightBitStoreIntoGBMemory(wramOffset, value);\n        // Allow the original write, and return since we dont need to look anymore\n        return true;\n    }\n    // Also check for individal writes\n    // Can only read/write from OAM During Modes 0 - 1\n    // See graphics/lcd.ts\n    if (offset >= spriteInformationTableLocation && offset <= Memory.spriteInformationTableLocationEnd) {\n        // Can only read/write from OAM During Mode 2\n        // See graphics/lcd.ts\n        // if (Lcd.currentLcdMode < 2) {\n        // return false;\n        // }\n        // Not batch processing here for performance\n        // batchProcessGraphics();\n        // Allow the original write, and return since we dont need to look anymore\n        // return true;\n        return Lcd.currentLcdMode >= 2;\n    }\n    if (offset >= Memory.unusableMemoryLocation && offset <= Memory.unusableMemoryEndLocation) {\n        return false;\n    }\n    // Serial\n    if (offset === Serial.memoryLocationSerialTransferControl) {\n        // SC\n        return Serial.updateTransferControl(value);\n    }\n    // Sound\n    // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Registers\n    if (offset >= 0xff10 && offset <= 0xff26) {\n        batchProcessAudio();\n        return SoundRegisterWriteTraps(offset, value);\n    }\n    // FF27 - FF2F not used\n    // Final Wave Table for Channel 3\n    if (offset >= 0xff30 && offset <= 0xff3f) {\n        batchProcessAudio();\n        // Need to handle the write if channel 3 is enabled\n        if (Channel3.isEnabled) {\n            Channel3.handleWaveRamWrite(value);\n            return false;\n        }\n        return true;\n    }\n    // Other Memory effects fomr read/write to Lcd/Graphics\n    if (offset >= Lcd.memoryLocationLcdControl && offset <= Graphics.memoryLocationWindowX) {\n        // Not batch processing here for performance\n        // batchProcessGraphics();\n        if (offset === Lcd.memoryLocationLcdControl) {\n            // Shorcut for isLCD Enabled since it gets \"hot\"\n            Lcd.updateLcdControl(value);\n            return true;\n        }\n        if (offset === Lcd.memoryLocationLcdStatus) {\n            // We are handling the write here\n            Lcd.updateLcdStatus(value);\n            return false;\n        }\n        // reset the current scanline if the game tries to write to it\n        if (offset === Graphics.memoryLocationScanlineRegister) {\n            Graphics.scanlineRegister = 0;\n            eightBitStoreIntoGBMemory(offset, 0);\n            return false;\n        }\n        // Cache our coincidence compare\n        if (offset === Lcd.memoryLocationCoincidenceCompare) {\n            Lcd.coincidenceCompare = value;\n            return true;\n        }\n        // Do the direct memory access transfer for spriteInformationTable\n        // Check the graphics mode to see if we can write to VRAM\n        // http://gbdev.gg8.se/wiki/articles/Video_Display#Accessing_VRAM_and_OAM\n        if (offset === Graphics.memoryLocationDmaTransfer) {\n            // otherwise, perform a DMA transfer\n            // And allow the original write\n            startDmaTransfer(value);\n            return true;\n        }\n        // Scroll and Window XY\n        switch (offset) {\n            case Graphics.memoryLocationScrollX:\n                Graphics.scrollX = value;\n                return true;\n            case Graphics.memoryLocationScrollY:\n                Graphics.scrollY = value;\n                return true;\n            case Graphics.memoryLocationWindowX:\n                Graphics.windowX = value;\n                return true;\n            case Graphics.memoryLocationWindowY:\n                Graphics.windowY = value;\n                return true;\n        }\n        // Allow the original write, and return since we dont need to look anymore\n        return true;\n    }\n    // Do an HDMA\n    if (offset === Memory.memoryLocationHdmaTrigger) {\n        startHdmaTransfer(value);\n        return false;\n    }\n    // Don't allow banking if we are doing an Hblank HDM transfer\n    // https://gist.github.com/drhelius/3394856\n    if (offset === Memory.memoryLocationGBCWRAMBank || offset === Memory.memoryLocationGBCVRAMBank) {\n        if (Memory.isHblankHdmaActive) {\n            var hblankHdmaSource = Memory.hblankHdmaSource;\n            if ((hblankHdmaSource >= 0x4000 && hblankHdmaSource <= 0x7fff) || (hblankHdmaSource >= 0xd000 && hblankHdmaSource <= 0xdfff)) {\n                return false;\n            }\n        }\n    }\n    // Handle GBC Pallete Write\n    if (offset >= Palette.memoryLocationBackgroundPaletteIndex && offset <= Palette.memoryLocationSpritePaletteData) {\n        // Incremeenting the palette handled by the write\n        writeColorPaletteToMemory(offset, value);\n        return true;\n    }\n    // Handle timer writes\n    if (offset >= Timers.memoryLocationDividerRegister && offset <= Timers.memoryLocationTimerControl) {\n        // Batch Process\n        batchProcessTimers();\n        switch (offset) {\n            case Timers.memoryLocationDividerRegister:\n                Timers.updateDividerRegister();\n                return false;\n            case Timers.memoryLocationTimerCounter:\n                Timers.updateTimerCounter(value);\n                return true;\n            case Timers.memoryLocationTimerModulo:\n                Timers.updateTimerModulo(value);\n                return true;\n            case Timers.memoryLocationTimerControl:\n                Timers.updateTimerControl(value);\n                return true;\n        }\n        return true;\n    }\n    // Handle Joypad writes for HW reg caching\n    if (offset === Joypad.memoryLocationJoypadRegister) {\n        Joypad.updateJoypad(value);\n    }\n    // Handle Interrupt writes\n    if (offset === Interrupts.memoryLocationInterruptRequest) {\n        Interrupts.updateInterruptRequested(value);\n        return true;\n    }\n    if (offset === Interrupts.memoryLocationInterruptEnabled) {\n        Interrupts.updateInterruptEnabled(value);\n        return true;\n    }\n    // Allow the original write\n    return true;\n}\n\n// WasmBoy memory map:\n// Private function to translate a offset meant for the gameboy memory map\n// To the wasmboy memory map\n// Following: http://gameboy.mongenel.com/dmg/asmmemmap.html\n// And https://github.com/Dooskington/GameLad/wiki/Part-11---Memory-Bank-Controllers\n// Performance help from @dcodeIO, and awesome-gbdev\nfunction getWasmBoyOffsetFromGameBoyOffset(gameboyOffset) {\n    // Get the top byte and switch\n    var gameboyOffsetHighByte = gameboyOffset >> 12;\n    switch (gameboyOffsetHighByte) {\n        case 0x00:\n            // Check if we are currently executing the boot rom\n            // Otherwise, bottom 0x0000 -> 0x03FF is Cartridge ROM Ram Bank 1\n            if (Cpu.BootROMEnabled) {\n                if (Cpu.GBCEnabled) {\n                    // See: http://gbdev.gg8.se/wiki/articles/Gameboy_Bootstrap_ROM\n                    // \"The rom dump includes the 256 byte rom (0x0000-0x00FF) and the,\n                    // 1792 byte rom (0x0200-0x08FF) which Dr. Decapitator observed,\n                    // but not the 512 byte rom,\n                    // which may be cpu microcode or lcd color lookup related.\"\n                    // First 0xFF bytes are BOOT rom\n                    if (gameboyOffset < 0x0100) {\n                        return gameboyOffset + BOOT_ROM_LOCATION;\n                    }\n                    // 0x100 -> 0x1FF is the actual ROM\n                    // Everything from 0x200 -> 0x8FF is BOOT ROM Again\n                    if (gameboyOffset > 0x01ff && gameboyOffset < 0x0900) {\n                        return gameboyOffset + BOOT_ROM_LOCATION;\n                    }\n                }\n                else if (!Cpu.GBCEnabled && gameboyOffset < 0x0100) {\n                    return gameboyOffset + BOOT_ROM_LOCATION;\n                }\n            }\n        case 0x01:\n        case 0x02:\n        case 0x03:\n            // Cartridge ROM - Bank 0 (fixed)\n            // 0x0000 -> 0x0D2400\n            return gameboyOffset + CARTRIDGE_ROM_LOCATION;\n        case 0x04:\n        case 0x05:\n        case 0x06:\n        case 0x07:\n            // Cartridge ROM - Switchable Banks 1-xx\n            // 0x4000 -> (0x0D2400 + 0x4000)\n            return getRomBankAddress(gameboyOffset) + CARTRIDGE_ROM_LOCATION;\n        case 0x08:\n        case 0x09:\n            // Video RAM\n            // 0x8000 -> 0x000400\n            var vramBankId = 0;\n            if (Cpu.GBCEnabled) {\n                // Find our current VRAM Bank\n                vramBankId = eightBitLoadFromGBMemory(Memory.memoryLocationGBCVRAMBank) & 0x01;\n                // Even though We added another 0x2000, the Cartridge ram is pulled out of our Internal Memory Space\n                // Therefore, we do not need to adjust for this extra 0x2000\n            }\n            return gameboyOffset - Memory.videoRamLocation + VIDEO_RAM_LOCATION + 0x2000 * vramBankId;\n        case 0x0a:\n        case 0x0b:\n            // Cartridge RAM - A.K.A External RAM\n            // 0xA000 -> 0x008400\n            return getRamBankAddress(gameboyOffset) + CARTRIDGE_RAM_LOCATION;\n        case 0x0c:\n            // Gameboy Ram Bank 0\n            // 0xC000 -> 0x000400\n            // Don't need to add head, since we move out 0x200 from the cartridge ram\n            return gameboyOffset - Memory.internalRamBankZeroLocation + WORK_RAM_LOCATION;\n        case 0x0d:\n            // Gameboy Ram Banks, Switchable in GBC Mode\n            // 0xD000 -> 0x000400\n            // In CGB Mode 32 KBytes internal RAM are available.\n            // This memory is divided into 8 banks of 4 KBytes each.\n            // Bank 0 is always available in memory at C000-CFFF,\n            // Bank 1-7 can be selected into the address space at D000-DFFF.\n            // http://gbdev.gg8.se/wiki/articles/CGB_Registers#FF70_-_SVBK_-_CGB_Mode_Only_-_WRAM_Bank\n            // Get the last 3 bits to find our wram ID\n            var wramBankId = 0;\n            if (Cpu.GBCEnabled) {\n                wramBankId = eightBitLoadFromGBMemory(Memory.memoryLocationGBCWRAMBank) & 0x07;\n            }\n            wramBankId = wramBankId < 1 ? 1 : wramBankId;\n            // (0x1000 * (wramBankId - 1)) -> To find the correct wram bank.\n            // wramBankId - 1, because we alreayd have the space for wramBank 1, and are currently in it\n            // So need to address space for 6 OTHER banks\n            return gameboyOffset - Memory.internalRamBankZeroLocation + WORK_RAM_LOCATION + 0x1000 * (wramBankId - 1);\n        default:\n            // Everything Else after Gameboy Ram Banks\n            // 0xE000 -> 0x000400\n            // 0x6000 For the Extra WRAM Banks\n            return gameboyOffset - Memory.echoRamLocation + OTHER_GAMEBOY_INTERNAL_MEMORY_LOCATION;\n    }\n}\n\n// Breakpoints for memory / cpu\nvar Breakpoints = /** @class */ (function () {\n    function Breakpoints() {\n    }\n    Breakpoints.programCounter = -1;\n    Breakpoints.readGbMemory = -1;\n    Breakpoints.writeGbMemory = -1;\n    Breakpoints.reachedBreakpoint = false;\n    return Breakpoints;\n}());\nfunction setProgramCounterBreakpoint(breakpoint) {\n    Breakpoints.programCounter = breakpoint;\n}\nfunction resetProgramCounterBreakpoint() {\n    Breakpoints.programCounter = -1;\n}\nfunction setReadGbMemoryBreakpoint(breakpoint) {\n    Breakpoints.readGbMemory = breakpoint;\n}\nfunction resetReadGbMemoryBreakpoint() {\n    Breakpoints.readGbMemory = -1;\n}\nfunction setWriteGbMemoryBreakpoint(breakpoint) {\n    Breakpoints.writeGbMemory = breakpoint;\n}\nfunction resetWriteGbMemoryBreakpoint() {\n    Breakpoints.writeGbMemory = -1;\n}\n\n// Store / Write memory access\nfunction eightBitStoreIntoGBMemory(gameboyOffset, value) {\n    store(getWasmBoyOffsetFromGameBoyOffset(gameboyOffset), value);\n}\nfunction eightBitStoreIntoGBMemoryWithTraps(offset, value) {\n    if (offset === Breakpoints.writeGbMemory) {\n        Breakpoints.reachedBreakpoint = true;\n    }\n    if (checkWriteTraps(offset, value)) {\n        eightBitStoreIntoGBMemory(offset, value);\n    }\n}\nfunction sixteenBitStoreIntoGBMemoryWithTraps(offset, value) {\n    // Dividing into two seperate eight bit calls to help with debugging tilemap overwrites\n    // Split the value into two seperate bytes\n    var highByte = splitHighByte(value);\n    var lowByte = splitLowByte(value);\n    if (checkWriteTraps(offset, lowByte)) {\n        eightBitStoreIntoGBMemory(offset, lowByte);\n    }\n    var nextOffset = offset + 1;\n    if (checkWriteTraps(nextOffset, highByte)) {\n        eightBitStoreIntoGBMemory(nextOffset, highByte);\n    }\n}\nfunction sixteenBitStoreIntoGBMemory(offset, value) {\n    // Dividing into two seperate eight bit calls to help with debugging tilemap overwrites\n    // Split the value into two seperate bytes\n    var highByte = splitHighByte(value);\n    var lowByte = splitLowByte(value);\n    eightBitStoreIntoGBMemory(offset + 0, lowByte);\n    eightBitStoreIntoGBMemory(offset + 1, highByte);\n}\nfunction storeBooleanDirectlyToWasmMemory(offset, value) {\n    store(offset, value);\n}\n\n// Funcitons for setting and checking the LCD\nvar Lcd = /** @class */ (function () {\n    function Lcd() {\n    }\n    // Function called in write traps to update our hardware registers\n    Lcd.updateLcdStatus = function (value) {\n        // Bottom three bits are read only\n        var currentLcdStatus = eightBitLoadFromGBMemory(Lcd.memoryLocationLcdStatus);\n        var valueNoBottomBits = value & 0xf8;\n        var lcdStatusOnlyBottomBits = currentLcdStatus & 0x07;\n        value = valueNoBottomBits | lcdStatusOnlyBottomBits;\n        // Top bit is always 1\n        value = setBitOnByte(7, value);\n        eightBitStoreIntoGBMemory(Lcd.memoryLocationLcdStatus, value);\n    };\n    // Function called in write traps to update our hardware registers\n    Lcd.updateLcdControl = function (value) {\n        var wasLcdEnabled = Lcd.enabled;\n        Lcd.enabled = checkBitOnByte(7, value);\n        Lcd.windowTileMapDisplaySelect = checkBitOnByte(6, value);\n        Lcd.windowDisplayEnabled = checkBitOnByte(5, value);\n        Lcd.bgWindowTileDataSelect = checkBitOnByte(4, value);\n        Lcd.bgTileMapDisplaySelect = checkBitOnByte(3, value);\n        Lcd.tallSpriteSize = checkBitOnByte(2, value);\n        Lcd.spriteDisplayEnable = checkBitOnByte(1, value);\n        Lcd.bgDisplayEnabled = checkBitOnByte(0, value);\n        if (wasLcdEnabled && !Lcd.enabled) {\n            // Disable the LCD\n            resetLcd(true);\n        }\n        if (!wasLcdEnabled && Lcd.enabled) {\n            // Re-enable the LCD\n            resetLcd(false);\n        }\n    };\n    // Memory Locations\n    // Also known at STAT\n    // LCD Status (0xFF41) bits Explanation\n    // 0                0                    000                    0             00\n    //       |Coicedence Interrupt|     |Mode Interrupts|  |coincidence flag|  | Mode |\n    // Modes:\n    // 0 or 00: H-Blank\n    // 1 or 01: V-Blank\n    // 2 or 10: Searching Sprites Atts\n    // 3 or 11: Transfering Data to LCD Driver\n    Lcd.memoryLocationLcdStatus = 0xff41;\n    Lcd.currentLcdMode = 0;\n    Lcd.memoryLocationCoincidenceCompare = 0xff45;\n    Lcd.coincidenceCompare = 0;\n    // Also known as LCDC\n    // http://www.codeslinger.co.uk/pages/projects/gameboy/graphics.html\n    // Bit 7 - LCD Display Enable (0=Off, 1=On)\n    // Bit 6 - Window Tile Map Display Select (0=9800-9BFF, 1=9C00-9FFF)\n    // Bit 5 - Window Display Enable (0=Off, 1=On)\n    // Bit 4 - BG & Window Tile Data Select (0=8800-97FF, 1=8000-8FFF)\n    // Bit 3 - BG Tile Map Display Select (0=9800-9BFF, 1=9C00-9FFF)\n    // Bit 2 - OBJ (Sprite) Size (0=8x8, 1=8x16)\n    // Bit 1 - OBJ (Sprite) Display Enable (0=Off, 1=On)\n    // Bit 0 - BG Display (for CGB see below) (0=Off, 1=On\n    Lcd.memoryLocationLcdControl = 0xff40;\n    // Decoupled LCDC for caching\n    Lcd.enabled = true;\n    Lcd.windowTileMapDisplaySelect = false;\n    Lcd.windowDisplayEnabled = false;\n    Lcd.bgWindowTileDataSelect = false;\n    Lcd.bgTileMapDisplaySelect = false;\n    Lcd.tallSpriteSize = false;\n    Lcd.spriteDisplayEnable = false;\n    Lcd.bgDisplayEnabled = false;\n    return Lcd;\n}());\nfunction resetLcd(shouldBlankScreen) {\n    // Reset scanline cycle counter\n    Graphics.scanlineCycleCounter = 0;\n    Graphics.scanlineRegister = 0;\n    eightBitStoreIntoGBMemory(Graphics.memoryLocationScanlineRegister, 0);\n    // Set to mode 0\n    // https://www.reddit.com/r/EmuDev/comments/4w6479/gb_dr_mario_level_generation_issues/\n    var lcdStatus = eightBitLoadFromGBMemory(Lcd.memoryLocationLcdStatus);\n    lcdStatus = resetBitOnByte(1, lcdStatus);\n    lcdStatus = resetBitOnByte(0, lcdStatus);\n    Lcd.currentLcdMode = 0;\n    // Store the status in memory\n    eightBitStoreIntoGBMemory(Lcd.memoryLocationLcdStatus, lcdStatus);\n    // Blank the screen\n    if (shouldBlankScreen) {\n        for (var i = 0; i < FRAME_SIZE; ++i) {\n            store(FRAME_LOCATION + i, 255);\n        }\n    }\n}\n// Pass in the lcd status for performance\n// Inlined because closure compiler inlines\nfunction setLcdStatus() {\n    // Check if the Lcd was disabled\n    if (!Lcd.enabled) {\n        return;\n    }\n    // Get our current scanline, and lcd mode\n    var scanlineRegister = Graphics.scanlineRegister;\n    var lcdMode = Lcd.currentLcdMode;\n    // Default to  H-Blank\n    var newLcdMode = 0;\n    // Find our newLcd mode\n    if (scanlineRegister >= 144) {\n        // VBlank mode\n        newLcdMode = 1;\n    }\n    else {\n        var scanlineCycleCounter = Graphics.scanlineCycleCounter;\n        var MIN_CYCLES_SPRITES_LCD_MODE = Graphics.MIN_CYCLES_SPRITES_LCD_MODE();\n        if (scanlineCycleCounter >= MIN_CYCLES_SPRITES_LCD_MODE) {\n            // Searching Sprites Atts\n            newLcdMode = 2;\n        }\n        else if (scanlineCycleCounter >= MIN_CYCLES_SPRITES_LCD_MODE) {\n            // Transferring data to lcd\n            newLcdMode = 3;\n        }\n    }\n    if (lcdMode !== newLcdMode) {\n        // Get our lcd status\n        var lcdStatus = eightBitLoadFromGBMemory(Lcd.memoryLocationLcdStatus);\n        // Save our lcd mode\n        Lcd.currentLcdMode = newLcdMode;\n        var shouldRequestInterrupt = false;\n        // Set our LCD Status accordingly\n        switch (newLcdMode) {\n            case 0x00:\n                lcdStatus = resetBitOnByte(0, lcdStatus);\n                lcdStatus = resetBitOnByte(1, lcdStatus);\n                shouldRequestInterrupt = checkBitOnByte(3, lcdStatus);\n                break;\n            case 0x01:\n                lcdStatus = resetBitOnByte(1, lcdStatus);\n                lcdStatus = setBitOnByte(0, lcdStatus);\n                shouldRequestInterrupt = checkBitOnByte(4, lcdStatus);\n                break;\n            case 0x02:\n                lcdStatus = resetBitOnByte(0, lcdStatus);\n                lcdStatus = setBitOnByte(1, lcdStatus);\n                shouldRequestInterrupt = checkBitOnByte(5, lcdStatus);\n                break;\n            case 0x03:\n                lcdStatus = setBitOnByte(0, lcdStatus);\n                lcdStatus = setBitOnByte(1, lcdStatus);\n                break;\n        }\n        // Check if we want to request an interrupt, and we JUST changed modes\n        if (shouldRequestInterrupt) {\n            requestLcdInterrupt();\n        }\n        // Check for updating the Hblank HDMA\n        if (newLcdMode === 0) {\n            // Update the Hblank DMA, will simply return if not active\n            updateHblankHdma();\n        }\n        // Check for requesting a VBLANK interrupt\n        if (newLcdMode === 1) {\n            requestVBlankInterrupt();\n        }\n        // Check for the coincidence\n        lcdStatus = checkCoincidence(newLcdMode, lcdStatus);\n        // Finally, save our status\n        eightBitStoreIntoGBMemory(Lcd.memoryLocationLcdStatus, lcdStatus);\n    }\n    else if (scanlineRegister === 153) {\n        // Special Case, need to check LYC\n        // Fix prehistorik man freeze\n        var lcdStatus = eightBitLoadFromGBMemory(Lcd.memoryLocationLcdStatus);\n        lcdStatus = checkCoincidence(newLcdMode, lcdStatus);\n        eightBitStoreIntoGBMemory(Lcd.memoryLocationLcdStatus, lcdStatus);\n    }\n}\nfunction checkCoincidence(lcdMode, lcdStatus) {\n    // Check for the coincidence flag\n    // Need to check on every mode, and not just HBLANK, as checking on hblank breaks shantae, which checks on vblank\n    if ((lcdMode === 0 || lcdMode === 1) && Graphics.scanlineRegister === Lcd.coincidenceCompare) {\n        lcdStatus = setBitOnByte(2, lcdStatus);\n        if (checkBitOnByte(6, lcdStatus)) {\n            requestLcdInterrupt();\n        }\n    }\n    else {\n        lcdStatus = resetBitOnByte(2, lcdStatus);\n    }\n    return lcdStatus;\n}\n\n// Functions for rendering the background\n// NOTE: i32Portable wraps modulo here as somehow it gets converted to a double:\n// https://github.com/torch2424/wasmboy/issues/216\n// Inlined because closure compiler inlines\nfunction renderBackground(scanlineRegister, tileDataMemoryLocation, tileMapMemoryLocation) {\n    // NOTE: Camera is reffering to what you can see inside the 160x144 viewport of the entire rendered 256x256 map.\n    // Get our scrollX and scrollY (u16 to play nice with assemblyscript)\n    // let scrollX: i32 = eightBitLoadFromGBMemory(Graphics.memoryLocationScrollX);\n    // let scrollY: i32 = eightBitLoadFromGBMemory(Graphics.memoryLocationScrollY);\n    var scrollX = Graphics.scrollX;\n    var scrollY = Graphics.scrollY;\n    // Get our current pixel y positon on the 160x144 camera (Row that the scanline draws across)\n    // this is done by getting the current scroll Y position,\n    // and adding it do what Y Value the scanline is drawing on the camera.\n    var pixelYPositionInMap = scanlineRegister + scrollY;\n    // Gameboy camera will \"wrap\" around the background map,\n    // meaning that if the pixelValue is 350, then we need to subtract 256 (decimal) to get it's actual value\n    // pixel values (scrollX and scrollY) range from 0x00 - 0xFF\n    pixelYPositionInMap &= 0x100 - 1;\n    // Draw the Background scanline\n    drawBackgroundWindowScanline(scanlineRegister, tileDataMemoryLocation, tileMapMemoryLocation, pixelYPositionInMap, 0, scrollX);\n}\n// Inlined because closure compiler inlines\nfunction renderWindow(scanlineRegister, tileDataMemoryLocation, tileMapMemoryLocation) {\n    // Get our windowX and windowY\n    // let windowX: i32 = eightBitLoadFromGBMemory(Graphics.memoryLocationWindowX);\n    // let windowY: i32 = eightBitLoadFromGBMemory(Graphics.memoryLocationWindowY);\n    var windowX = Graphics.windowX;\n    var windowY = Graphics.windowY;\n    // NOTE: Camera is reffering to what you can see inside the 160x144 viewport of the entire rendered 256x256 map.\n    // First ensure that the scanline is greater than our window\n    if (scanlineRegister < windowY) {\n        // Window is not within the current camera view\n        return;\n    }\n    // WindowX is offset by 7\n    windowX -= 7;\n    // Get our current pixel y positon on the 160x144 camera (Row that the scanline draws across)\n    var pixelYPositionInMap = scanlineRegister - windowY;\n    // xOffset is simply a neagative window x\n    // NOTE: This can become negative zero?\n    // https://github.com/torch2424/wasmboy/issues/216\n    var xOffset = i32Portable(-windowX);\n    // Draw the Background scanline\n    drawBackgroundWindowScanline(scanlineRegister, tileDataMemoryLocation, tileMapMemoryLocation, pixelYPositionInMap, windowX, xOffset);\n}\n// Function frankenstein'd together to allow background and window to share the same draw scanline function\nfunction drawBackgroundWindowScanline(scanlineRegister, tileDataMemoryLocation, tileMapMemoryLocation, pixelYPositionInMap, iStart, xOffset) {\n    // Get our tile Y position in the map\n    var tileYPositionInMap = pixelYPositionInMap >> 3;\n    // Loop through x to draw the line like a CRT\n    for (var i = iStart; i < 160; ++i) {\n        // Get our Current X position of our pixel on the on the 160x144 camera\n        // this is done by getting the current scroll X position,\n        // and adding it do what X Value the scanline is drawing on the camera.\n        var pixelXPositionInMap = i + xOffset;\n        // This is to compensate wrapping, same as pixelY\n        if (pixelXPositionInMap >= 0x100) {\n            pixelXPositionInMap -= 0x100;\n        }\n        // Divide our pixel position by 8 to get our tile.\n        // Since, there are 256x256 pixels, and 32x32 tiles.\n        // 256 / 8 = 32.\n        // Also, bitshifting by 3, do do a division by 8\n        // Need to use u16s, as they will be used to compute an address, which will cause weird errors and overflows\n        var tileXPositionInMap = pixelXPositionInMap >> 3;\n        // Get our tile address on the tileMap\n        // NOTE: (tileMap represents where each tile is displayed on the screen)\n        // NOTE: (tile map represents the entire map, now just what is within the \"camera\")\n        // For instance, if we have y pixel 144. 144 / 8 = 18. 18 * 32 = line address in map memory.\n        // And we have x pixel 160. 160 / 8 = 20.\n        // * 32, because remember, this is NOT only for the camera, the actual map is 32x32. Therefore, the next tile line of the map, is 32 byte offset.\n        // Think like indexing a 2d array, as a 1d array and it make sense :)\n        var tileMapAddress = tileMapMemoryLocation + (tileYPositionInMap << 5) + tileXPositionInMap;\n        // Get the tile Id on the Tile Map\n        var tileIdFromTileMap = loadFromVramBank(tileMapAddress, 0);\n        // Now that we have our Tile Id, let's check our Tile Cache\n        var usedTileCache = false;\n        if (Config.tileCaching) {\n            var pixelsDrawn = drawLineOfTileFromTileCache(i, scanlineRegister, pixelXPositionInMap, pixelYPositionInMap, tileMapAddress, tileDataMemoryLocation, tileIdFromTileMap);\n            // Increment i by 7, not 8 because i will be incremented at end of for loop\n            if (pixelsDrawn > 0) {\n                i += pixelsDrawn - 1;\n                usedTileCache = true;\n            }\n        }\n        if (Config.tileRendering && !usedTileCache) {\n            var pixelsDrawn = drawLineOfTileFromTileId(i, scanlineRegister, pixelXPositionInMap, pixelYPositionInMap, tileMapAddress, tileDataMemoryLocation, tileIdFromTileMap);\n            // A line of a tile is 8 pixels wide, therefore increase i by (pixelsDrawn - 1), and then the for loop will increment by 1\n            // For a net increment for 8\n            if (pixelsDrawn > 0) {\n                i += pixelsDrawn - 1;\n            }\n        }\n        else if (!usedTileCache) {\n            if (Cpu.GBCEnabled) {\n                // Draw the individual pixel\n                drawColorPixelFromTileId(i, scanlineRegister, pixelXPositionInMap, pixelYPositionInMap, tileMapAddress, tileDataMemoryLocation, tileIdFromTileMap);\n            }\n            else {\n                // Draw the individual pixel\n                drawMonochromePixelFromTileId(i, scanlineRegister, pixelXPositionInMap, pixelYPositionInMap, tileDataMemoryLocation, tileIdFromTileMap);\n            }\n        }\n    }\n}\n// Function to draw a pixel for the standard GB\n// Inlined because closure compiler inlines\nfunction drawMonochromePixelFromTileId(xPixel, yPixel, pixelXPositionInMap, pixelYPositionInMap, tileDataMemoryLocation, tileIdFromTileMap) {\n    // Now we can process the the individual bytes that represent the pixel on a tile\n    // Now get our tileDataAddress for the corresponding tileID we found in the map\n    // Read the comments in _getTileDataAddress() to see what's going on.\n    // tl;dr if we had the tile map of \"a b c d\", and wanted tileId 2.\n    // This funcitons returns the start of memory locaiton for the tile 'c'.\n    var tileDataAddress = getTileDataAddress(tileDataMemoryLocation, tileIdFromTileMap);\n    // Get the y pixel of the 8 by 8 tile.\n    // Simply modulo the scanline.\n    // For instance, let's say we are printing the first line of pixels on our camera,\n    // And the first line of pixels on our tile.\n    // yPixel = 1. 1 % 8 = 1.\n    // And for the last line\n    // yPixel = 144. 144 % 8 = 0.\n    // 0 Represents last line of pixels in a tile, 1 represents first. 1 2 3 4 5 6 7 0.\n    // Because remember, we are counting lines on the display NOT including zero\n    var pixelYInTile = i32Portable(pixelYPositionInMap & 7);\n    // Remember to represent a single line of 8 pixels on a tile, we need two bytes.\n    // Therefore, we need to times our modulo by 2, to get the correct line of pixels on the tile.\n    // Again, think like you had to map a 2d array as a 1d.\n    var byteOneForLineOfTilePixels = loadFromVramBank(tileDataAddress + pixelYInTile * 2, 0);\n    var byteTwoForLineOfTilePixels = loadFromVramBank(tileDataAddress + pixelYInTile * 2 + 1, 0);\n    // Same logic as pixelYInTile.\n    // However, We need to reverse our byte,\n    // As pixel 0 is on byte 7, and pixel 1 is on byte 6, etc...\n    // Therefore, is pixelX was 2, then really is need to be 5\n    // So 2 - 7 = -5, * 1 = 5\n    // Or to simplify, 7 - 2 = 5 haha!\n    var pixelXInTile = i32Portable(pixelXPositionInMap & 7);\n    pixelXInTile = 7 - pixelXInTile;\n    // Now we can get the color for that pixel\n    // Colors are represented by getting X position of ByteTwo, and X positon of Byte One\n    // To Get the color Id.\n    // For example, the result of the color id is 0000 00[xPixelByteTwo][xPixelByteOne]\n    // See: How to draw a tile/sprite from memory: http://www.codeslinger.co.uk/pages/projects/gameboy/graphics.html\n    var paletteColorId = 0;\n    if (checkBitOnByte(pixelXInTile, byteTwoForLineOfTilePixels)) {\n        // Byte one represents the second bit in our color id, so bit shift\n        paletteColorId += 1;\n        paletteColorId = paletteColorId << 1;\n    }\n    if (checkBitOnByte(pixelXInTile, byteOneForLineOfTilePixels)) {\n        paletteColorId += 1;\n    }\n    // Not checking u8 Portability overflow here, since it can't be greater than i32 over :p\n    // Now get the colorId from the pallete, to get our final color\n    // Developers could change colorIds to represents different colors\n    // in their palette, thus we need to grab the color from there\n    //let pixelColorInTileFromPalette: u8 = getColorFromPalette(paletteColorId, Graphics.memoryLocationBackgroundPalette);\n    // Moved below for perofrmance\n    // FINALLY, RENDER THAT PIXEL!\n    // Only rendering camera for now, so coordinates are for the camera.\n    // Get the rgb value for the color Id, will be repeated into R, G, B. if not colorized\n    var hexColor = getColorizedGbHexColorFromPalette(paletteColorId, Graphics.memoryLocationBackgroundPalette);\n    setPixelOnFrame(xPixel, yPixel, 0, getRedFromHexColor(hexColor));\n    setPixelOnFrame(xPixel, yPixel, 1, getGreenFromHexColor(hexColor));\n    setPixelOnFrame(xPixel, yPixel, 2, getBlueFromHexColor(hexColor));\n    // Lastly, add the pixel to our background priority map\n    // https://github.com/torch2424/wasmBoy/issues/51\n    // Bits 0 & 1 will represent the color Id drawn by the BG/Window\n    // Bit 2 will represent if the Bg/Window has GBC priority.\n    addPriorityforPixel(xPixel, yPixel, paletteColorId);\n}\n// Function to draw a pixel from a tile in C O L O R\n// See above for more context on some variables\n// Inlined because closure compiler inlines\nfunction drawColorPixelFromTileId(xPixel, yPixel, pixelXPositionInMap, pixelYPositionInMap, tileMapAddress, tileDataMemoryLocation, tileIdFromTileMap) {\n    // Now get our tileDataAddress for the corresponding tileID we found in the map\n    // Read the comments in _getTileDataAddress() to see what's going on.\n    // tl;dr if we had the tile map of \"a b c d\", and wanted tileId 2.\n    // This funcitons returns the start of memory locaiton for the tile 'c'.\n    var tileDataAddress = getTileDataAddress(tileDataMemoryLocation, tileIdFromTileMap);\n    // Get the GB Map Attributes\n    // Bit 0-2  Background Palette number  (BGP0-7)\n    // Bit 3    Tile VRAM Bank number      (0=Bank 0, 1=Bank 1)\n    // Bit 4    Not used\n    // Bit 5    Horizontal Flip            (0=Normal, 1=Mirror horizontally)\n    // Bit 6    Vertical Flip              (0=Normal, 1=Mirror vertically)\n    // Bit 7    BG-to-OAM Priority         (0=Use OAM priority bit, 1=BG Priority)\n    var bgMapAttributes = loadFromVramBank(tileMapAddress, 1);\n    // See above for explanation\n    var pixelYInTile = i32Portable(pixelYPositionInMap & 7);\n    if (checkBitOnByte(6, bgMapAttributes)) {\n        // We are mirroring the tile, therefore, we need to opposite byte\n        // So if our pixel was 0 our of 8, it wild become 7 :)\n        pixelYInTile = 7 - pixelYInTile;\n    }\n    // Remember to represent a single line of 8 pixels on a tile, we need two bytes.\n    // Therefore, we need to times our modulo by 2, to get the correct line of pixels on the tile.\n    // But we need to load the time from a specific Vram bank\n    var vramBankId = i32Portable(checkBitOnByte(3, bgMapAttributes));\n    var byteOneForLineOfTilePixels = loadFromVramBank(tileDataAddress + pixelYInTile * 2, vramBankId);\n    var byteTwoForLineOfTilePixels = loadFromVramBank(tileDataAddress + pixelYInTile * 2 + 1, vramBankId);\n    // Get our X pixel. Need to NOT reverse it if it was flipped.\n    // See above, you have to reverse this normally\n    var pixelXInTile = i32Portable(pixelXPositionInMap & 7);\n    if (!checkBitOnByte(5, bgMapAttributes)) {\n        pixelXInTile = 7 - pixelXInTile;\n    }\n    // Now we can get the color for that pixel\n    // Colors are represented by getting X position of ByteTwo, and X positon of Byte One\n    // To Get the color Id.\n    // For example, the result of the color id is 0000 00[xPixelByteTwo][xPixelByteOne]\n    // See: How to draw a tile/sprite from memory: http://www.codeslinger.co.uk/pages/projects/gameboy/graphics.html\n    var paletteColorId = 0;\n    if (checkBitOnByte(pixelXInTile, byteTwoForLineOfTilePixels)) {\n        // Byte one represents the second bit in our color id, so bit shift\n        paletteColorId += 1;\n        paletteColorId = paletteColorId << 1;\n    }\n    if (checkBitOnByte(pixelXInTile, byteOneForLineOfTilePixels)) {\n        paletteColorId += 1;\n    }\n    // Finally lets add some, C O L O R\n    // Want the botom 3 bits\n    var bgPalette = bgMapAttributes & 0x07;\n    // Call the helper function to grab the correct color from the palette\n    var rgbColorPalette = getRgbColorFromPalette(bgPalette, paletteColorId, false);\n    // Split off into red green and blue\n    var red = getColorComponentFromRgb(0, rgbColorPalette);\n    var green = getColorComponentFromRgb(1, rgbColorPalette);\n    var blue = getColorComponentFromRgb(2, rgbColorPalette);\n    // Finally Place our colors on the things\n    setPixelOnFrame(xPixel, yPixel, 0, red);\n    setPixelOnFrame(xPixel, yPixel, 1, green);\n    setPixelOnFrame(xPixel, yPixel, 2, blue);\n    // Lastly, add the pixel to our background priority map\n    // https://github.com/torch2424/wasmBoy/issues/51\n    // Bits 0 & 1 will represent the color Id drawn by the BG/Window\n    // Bit 2 will represent if the Bg/Window has GBC priority.\n    addPriorityforPixel(xPixel, yPixel, paletteColorId, checkBitOnByte(7, bgMapAttributes));\n}\n// Function to attempt to draw the tile from the tile cache\n// Inlined because closure compiler inlines\nfunction drawLineOfTileFromTileCache(xPixel, yPixel, pixelXPositionInMap, pixelYPositionInMap, tileMapAddress, tileDataMemoryLocation, tileIdFromTileMap) {\n    // First, initialize how many pixels we have drawn\n    var pixelsDrawn = 0;\n    // Check if the current tile matches our tileId\n    // TODO: Allow the first line to use the tile cache, for some odd reason it doesn't work when scanline is 0\n    var nextXIndexToPerformCacheCheck = TileCache.nextXIndexToPerformCacheCheck;\n    if (yPixel > 0 && xPixel > 8 && tileIdFromTileMap === TileCache.tileId && xPixel === nextXIndexToPerformCacheCheck) {\n        // Was last tile flipped\n        var wasLastTileHorizontallyFlipped = checkBitOnByte(5, eightBitLoadFromGBMemory(tileMapAddress - 1));\n        var isCurrentTileHorizontallyFlipped = checkBitOnByte(5, eightBitLoadFromGBMemory(tileMapAddress));\n        // Simply copy the last 8 pixels from memory to copy the line from the tile\n        for (var tileCacheIndex = 0; tileCacheIndex < 8; ++tileCacheIndex) {\n            // Check if we need to render backwards for flipping\n            if (wasLastTileHorizontallyFlipped !== isCurrentTileHorizontallyFlipped) {\n                tileCacheIndex = 7 - tileCacheIndex;\n            }\n            var xPos = xPixel + tileCacheIndex;\n            // First check for overflow\n            if (xPos <= 160) {\n                // Get the pixel location in memory of the tile\n                var previousXPixel = xPixel - (8 - tileCacheIndex);\n                var previousTilePixelLocation = FRAME_LOCATION + getRgbPixelStart(xPos, yPixel);\n                // Cycle through the RGB\n                // for (let tileCacheRgb = 0; tileCacheRgb < 3; ++tileCacheRgb) {\n                //  setPixelOnFrame(xPixel + tileCacheIndex, yPixel, tileCacheRgb, load<u8>(previousTilePixelLocation + tileCacheRgb));\n                // }\n                // unroll\n                setPixelOnFrame(xPos, yPixel, 0, load(previousTilePixelLocation, 0));\n                setPixelOnFrame(xPos, yPixel, 1, load(previousTilePixelLocation, 1));\n                setPixelOnFrame(xPos, yPixel, 2, load(previousTilePixelLocation, 2));\n                // Copy the priority for the pixel\n                var pixelPriority = getPriorityforPixel(previousXPixel, yPixel);\n                addPriorityforPixel(xPos, yPixel, resetBitOnByte(2, pixelPriority), checkBitOnByte(2, pixelPriority));\n                pixelsDrawn++;\n            }\n        }\n    }\n    else {\n        // Save our current tile Id, and the next x value we should check the x index\n        TileCache.tileId = tileIdFromTileMap;\n    }\n    // Calculate when we should do the tileCache calculation again\n    if (xPixel >= nextXIndexToPerformCacheCheck) {\n        nextXIndexToPerformCacheCheck = xPixel + 8;\n        var xOffsetTileWidthRemainder = i32Portable(pixelXPositionInMap & 7);\n        if (xPixel < xOffsetTileWidthRemainder) {\n            nextXIndexToPerformCacheCheck += xOffsetTileWidthRemainder;\n        }\n    }\n    TileCache.nextXIndexToPerformCacheCheck = nextXIndexToPerformCacheCheck;\n    return pixelsDrawn;\n}\n// Function to draw a line of a tile in Color\n// This is for tile rendering shortcuts\n// Inlined because closure compiler inlines\nfunction drawLineOfTileFromTileId(xPixel, yPixel, pixelXPositionInMap, pixelYPositionInMap, tileMapAddress, tileDataMemoryLocation, tileIdFromTileMap) {\n    // Get the which line of the tile we are rendering\n    var tileLineY = i32Portable(pixelYPositionInMap & 7);\n    // Now lets find our tileX start and end\n    // This is for the case where i = 0, but scroll X was 3.\n    // Or i is 157, and our camera is only 160 pixels wide\n    var tileXStart = 0;\n    if (xPixel == 0) {\n        tileXStart = pixelXPositionInMap - ((pixelXPositionInMap >> 3) << 3);\n    }\n    var tileXEnd = 7;\n    if (xPixel + 8 > 160) {\n        tileXEnd = 160 - xPixel;\n    }\n    // initialize some variables for GBC\n    var bgMapAttributes = -1;\n    var vramBankId = 0;\n    if (Cpu.GBCEnabled) {\n        // Get Our GBC properties\n        bgMapAttributes = loadFromVramBank(tileMapAddress, 1);\n        vramBankId = i32Portable(checkBitOnByte(3, bgMapAttributes));\n        if (checkBitOnByte(6, bgMapAttributes)) {\n            // We are mirroring the tile, therefore, we need to opposite byte\n            // So if our pixel was 0 our of 8, it wild become 7 :)\n            tileLineY = 7 - tileLineY;\n        }\n    }\n    // Return the number of pixels drawn\n    return drawPixelsFromLineOfTile(tileIdFromTileMap, tileDataMemoryLocation, vramBankId, tileXStart, tileXEnd, tileLineY, xPixel, yPixel, 160, FRAME_LOCATION, false, 0, bgMapAttributes, -1);\n}\n\n// Functions for rendering the sprites\n// Inlined because closure compiler inlines\nfunction renderSprites(scanlineRegister, useLargerSprites) {\n    // Need to loop through all 40 sprites to check their status\n    // Going backwards since lower sprites draw over higher ones\n    // Will fix dragon warrior 3 intro\n    for (var i = 39; i >= 0; --i) {\n        // Sprites occupy 4 bytes in the sprite attribute table\n        var spriteTableIndex = i * 4;\n        // Y positon is offset by 16, X position is offset by 8\n        var index = Graphics.memoryLocationSpriteAttributesTable + spriteTableIndex;\n        var spriteYPosition = eightBitLoadFromGBMemory(index + 0);\n        var spriteXPosition = eightBitLoadFromGBMemory(index + 1);\n        var spriteTileId = eightBitLoadFromGBMemory(index + 2);\n        // Pan docs of sprite attirbute table\n        // Bit7   OBJ-to-BG Priority (0=OBJ Above BG, 1=OBJ Behind BG color 1-3)\n        //      (Used for both BG and Window. BG color 0 is always behind OBJ)\n        // Bit6   Y flip          (0=Normal, 1=Vertically mirrored)\n        // Bit5   X flip          (0=Normal, 1=Horizontally mirrored)\n        // Bit4   Palette number  **Non CGB Mode Only** (0=OBP0, 1=OBP1)\n        // Bit3   Tile VRAM-Bank  **CGB Mode Only**     (0=Bank 0, 1=Bank 1)\n        // Bit2-0 Palette number  **CGB Mode Only**     (OBP0-7)\n        // Apply sprite X and Y offset\n        // TODO: Sprites are overflowing on x if less than 8\n        spriteYPosition -= 16;\n        spriteXPosition -= 8;\n        // Find our sprite height\n        var spriteHeight = 8;\n        if (useLargerSprites) {\n            spriteHeight = 16;\n            // @binji says in 8x16 mode, even tileId always drawn first\n            // This will fix shantae sprites which always uses odd numbered indexes\n            // TODO: Do the actual Pandocs thing:\n            // \"In 8x16 mode, the lower bit of the tile number is ignored. Ie. the upper 8x8 tile is \"NN AND FEh\", and the lower 8x8 tile is \"NN OR 01h\".\"\n            // So just knock off the last bit? :)\n            spriteTileId -= spriteTileId & 1;\n        }\n        // Find if our sprite is on the current scanline\n        if (scanlineRegister >= spriteYPosition && scanlineRegister < spriteYPosition + spriteHeight) {\n            // Then we need to draw the current sprite\n            // Get our sprite attributes since we know we shall be drawing the tile\n            var spriteAttributes = eightBitLoadFromGBMemory(Graphics.memoryLocationSpriteAttributesTable + spriteTableIndex + 3);\n            // Check sprite Priority\n            var isSpritePriorityBehindWindowAndBackground = checkBitOnByte(7, spriteAttributes);\n            // Check if we should flip the sprite on the x or y axis\n            var flipSpriteY = checkBitOnByte(6, spriteAttributes);\n            var flipSpriteX = checkBitOnByte(5, spriteAttributes);\n            // TODO: Torch2424 continue here.\n            // Find which line on the sprite we are on\n            var currentSpriteLine = scanlineRegister - spriteYPosition;\n            // If we fliiped the Y axis on our sprite, need to read from memory backwards to acheive the same effect\n            if (flipSpriteY) {\n                currentSpriteLine = spriteHeight - currentSpriteLine;\n                // Bug fix for the flipped flies in link's awakening\n                currentSpriteLine -= 1;\n            }\n            // Each line of a tile takes two bytes of memory\n            currentSpriteLine <<= 1;\n            // Get our sprite tile address, need to also add the current sprite line to get the correct bytes\n            var spriteTileAddressStart = getTileDataAddress(Graphics.memoryLocationTileDataSelectOneStart, spriteTileId);\n            spriteTileAddressStart += currentSpriteLine;\n            var spriteTileAddress = spriteTileAddressStart;\n            // Find which VRAM Bank to load from\n            var vramBankId = (Cpu.GBCEnabled && checkBitOnByte(3, spriteAttributes));\n            var spriteDataByteOneForLineOfTilePixels = loadFromVramBank(spriteTileAddress + 0, vramBankId);\n            var spriteDataByteTwoForLineOfTilePixels = loadFromVramBank(spriteTileAddress + 1, vramBankId);\n            // Iterate over the width of our sprite to find our individual pixels\n            for (var tilePixel = 7; tilePixel >= 0; --tilePixel) {\n                // Get our spritePixel, and check for flipping\n                var spritePixelXInTile = tilePixel;\n                if (flipSpriteX) {\n                    spritePixelXInTile -= 7;\n                    spritePixelXInTile = -spritePixelXInTile;\n                }\n                // Get the color Id of our sprite, similar to renderBackground()\n                // With the first byte, and second byte lined up method thing\n                // Yes, the second byte comes before the first, see ./background.ts\n                var spriteColorId = 0;\n                if (checkBitOnByte(spritePixelXInTile, spriteDataByteTwoForLineOfTilePixels)) {\n                    // Byte one represents the second bit in our color id, so bit shift\n                    spriteColorId = (spriteColorId + 1) << 1;\n                }\n                if (checkBitOnByte(spritePixelXInTile, spriteDataByteOneForLineOfTilePixels)) {\n                    spriteColorId += 1;\n                }\n                // ColorId zero (last two bits of pallette) are transparent\n                // http://gbdev.gg8.se/wiki/articles/Video_Display\n                if (spriteColorId !== 0) {\n                    // Find our actual X pixel location on the gameboy \"camera\" view\n                    // This cannot be less than zero, i32 will overflow\n                    var spriteXPixelLocationInCameraView = spriteXPosition + (7 - tilePixel);\n                    if (spriteXPixelLocationInCameraView >= 0 && spriteXPixelLocationInCameraView <= 160) {\n                        // There are two cases where wouldnt draw the pixel on top of the Bg/window\n                        // 1. if isSpritePriorityBehindWindowAndBackground, sprite can only draw over color 0\n                        // 2. if bit 2 of our priority is set, then BG-to-OAM Priority from pandoc\n                        //  is active, meaning BG tile will have priority above all OBJs\n                        //  (regardless of the priority bits in OAM memory)\n                        // But if GBC and Bit 0 of LCDC is set, we always draw the object\n                        var shouldShowFromLcdcPriority = Cpu.GBCEnabled && !Lcd.bgDisplayEnabled; // LCDC Priority\n                        var shouldHideFromOamPriority = false;\n                        var shouldHideFromBgPriority = false;\n                        if (!shouldShowFromLcdcPriority) {\n                            // Now that we have our coordinates, check for sprite priority\n                            // Lets get the priority byte we put in memory\n                            var bgPriorityByte = getPriorityforPixel(spriteXPixelLocationInCameraView, scanlineRegister);\n                            var bgColorFromPriorityByte = bgPriorityByte & 0x03;\n                            // Doing an else if, since either will automatically stop drawing the pixel\n                            if (isSpritePriorityBehindWindowAndBackground && bgColorFromPriorityByte > 0) {\n                                // OAM Priority\n                                shouldHideFromOamPriority = true;\n                            }\n                            else if (Cpu.GBCEnabled && checkBitOnByte(2, bgPriorityByte) && bgColorFromPriorityByte > 0) {\n                                // Bg priority\n                                shouldHideFromBgPriority = true;\n                            }\n                        }\n                        if (shouldShowFromLcdcPriority || (!shouldHideFromOamPriority && !shouldHideFromBgPriority)) {\n                            if (!Cpu.GBCEnabled) {\n                                // Get our monochrome color RGB from the current sprite pallete\n                                // Get our sprite pallete\n                                var spritePaletteLocation = Graphics.memoryLocationSpritePaletteOne;\n                                if (checkBitOnByte(4, spriteAttributes)) {\n                                    spritePaletteLocation = Graphics.memoryLocationSpritePaletteTwo;\n                                }\n                                var hexColor = getColorizedGbHexColorFromPalette(spriteColorId, spritePaletteLocation);\n                                // Finally set the pixel!\n                                setPixelOnFrame(spriteXPixelLocationInCameraView, scanlineRegister, 0, getRedFromHexColor(hexColor));\n                                setPixelOnFrame(spriteXPixelLocationInCameraView, scanlineRegister, 1, getGreenFromHexColor(hexColor));\n                                setPixelOnFrame(spriteXPixelLocationInCameraView, scanlineRegister, 2, getBlueFromHexColor(hexColor));\n                            }\n                            else {\n                                // Get our RGB Color\n                                // Finally lets add some, C O L O R\n                                // Want the botom 3 bits\n                                var bgPalette = spriteAttributes & 0x07;\n                                // Call the helper function to grab the correct color from the palette\n                                var rgbColorPalette = getRgbColorFromPalette(bgPalette, spriteColorId, true);\n                                // Split off into red green and blue\n                                var red = getColorComponentFromRgb(0, rgbColorPalette);\n                                var green = getColorComponentFromRgb(1, rgbColorPalette);\n                                var blue = getColorComponentFromRgb(2, rgbColorPalette);\n                                // Finally Place our colors on the things\n                                setPixelOnFrame(spriteXPixelLocationInCameraView, scanlineRegister, 0, red);\n                                setPixelOnFrame(spriteXPixelLocationInCameraView, scanlineRegister, 1, green);\n                                setPixelOnFrame(spriteXPixelLocationInCameraView, scanlineRegister, 2, blue);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Main Class and funcitons for rendering the gameboy display\nvar Graphics = /** @class */ (function () {\n    function Graphics() {\n    }\n    // Number of cycles to run in each batch process\n    // This number should be in sync so that graphics doesn't run too many cyles at once\n    // and does not exceed the minimum number of cyles for either scanlines, or\n    // How often we change the frame, or a channel's update process\n    Graphics.batchProcessCycles = function () {\n        return Graphics.MAX_CYCLES_PER_SCANLINE();\n    };\n    // TCAGBD says 456 per scanline, but 153 only a handful\n    Graphics.MAX_CYCLES_PER_SCANLINE = function () {\n        if (Graphics.scanlineRegister === 153) {\n            return 4 << Cpu.GBCDoubleSpeed;\n        }\n        else {\n            return 456 << Cpu.GBCDoubleSpeed;\n        }\n    };\n    Graphics.MIN_CYCLES_SPRITES_LCD_MODE = function () {\n        // TODO: Confirm these clock cyles, double similar to scanline, which TCAGBD did\n        return 376 << Cpu.GBCDoubleSpeed;\n    };\n    Graphics.MIN_CYCLES_TRANSFER_DATA_LCD_MODE = function () {\n        // TODO: Confirm these clock cyles, double similar to scanline, which TCAGBD did\n        return 249 << Cpu.GBCDoubleSpeed;\n    };\n    // Function to save the state of the class\n    Graphics.saveState = function () {\n        // Graphics\n        store(getSaveStateMemoryOffset(0x00, Graphics.saveStateSlot), Graphics.scanlineCycleCounter);\n        store(getSaveStateMemoryOffset(0x04, Graphics.saveStateSlot), Graphics.scanlineRegister);\n        store(getSaveStateMemoryOffset(0x05, Graphics.saveStateSlot), Graphics.scrollX);\n        store(getSaveStateMemoryOffset(0x06, Graphics.saveStateSlot), Graphics.scrollY);\n        store(getSaveStateMemoryOffset(0x07, Graphics.saveStateSlot), Graphics.windowX);\n        store(getSaveStateMemoryOffset(0x08, Graphics.saveStateSlot), Graphics.windowY);\n        // LCD\n        store(getSaveStateMemoryOffset(0x09, Graphics.saveStateSlot), Lcd.currentLcdMode);\n        store(getSaveStateMemoryOffset(0x0a, Graphics.saveStateSlot), Lcd.coincidenceCompare);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x0b, Graphics.saveStateSlot), Lcd.enabled);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x0c, Graphics.saveStateSlot), Lcd.windowTileMapDisplaySelect);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x0d, Graphics.saveStateSlot), Lcd.windowDisplayEnabled);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x0e, Graphics.saveStateSlot), Lcd.bgWindowTileDataSelect);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x0f, Graphics.saveStateSlot), Lcd.bgTileMapDisplaySelect);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x10, Graphics.saveStateSlot), Lcd.tallSpriteSize);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x11, Graphics.saveStateSlot), Lcd.spriteDisplayEnable);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x12, Graphics.saveStateSlot), Lcd.bgDisplayEnabled);\n    };\n    // Function to load the save state from memory\n    Graphics.loadState = function () {\n        // Graphics\n        Graphics.scanlineCycleCounter = load(getSaveStateMemoryOffset(0x00, Graphics.saveStateSlot));\n        Graphics.scanlineRegister = load(getSaveStateMemoryOffset(0x04, Graphics.scanlineRegister));\n        Graphics.scrollX = load(getSaveStateMemoryOffset(0x05, Graphics.saveStateSlot));\n        Graphics.scrollY = load(getSaveStateMemoryOffset(0x06, Graphics.saveStateSlot));\n        Graphics.windowX = load(getSaveStateMemoryOffset(0x07, Graphics.saveStateSlot));\n        Graphics.windowY = load(getSaveStateMemoryOffset(0x08, Graphics.saveStateSlot));\n        // LCD\n        Lcd.currentLcdMode = load(getSaveStateMemoryOffset(0x09, Graphics.saveStateSlot));\n        Lcd.coincidenceCompare = load(getSaveStateMemoryOffset(0x0a, Graphics.saveStateSlot));\n        Lcd.enabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x0b, Graphics.saveStateSlot));\n        Lcd.windowTileMapDisplaySelect = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x0c, Graphics.saveStateSlot));\n        Lcd.windowDisplayEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x0d, Graphics.saveStateSlot));\n        Lcd.bgWindowTileDataSelect = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x0e, Graphics.saveStateSlot));\n        Lcd.bgTileMapDisplaySelect = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x0f, Graphics.saveStateSlot));\n        Lcd.tallSpriteSize = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x10, Graphics.saveStateSlot));\n        Lcd.spriteDisplayEnable = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x11, Graphics.saveStateSlot));\n        Lcd.bgDisplayEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x12, Graphics.saveStateSlot));\n    };\n    // Current cycles\n    // This will be used for batch processing\n    Graphics.currentCycles = 0;\n    // Count the number of cycles to keep synced with cpu cycles\n    // Found GBC cycles by finding clock speed from Gb Cycles\n    // See TCAGBD For cycles\n    Graphics.scanlineCycleCounter = 0x00;\n    // LCD\n    // scanlineRegister also known as LY\n    // See: http://bgb.bircd.org/pandocs.txt , and search \" LY \"\n    Graphics.memoryLocationScanlineRegister = 0xff44;\n    Graphics.scanlineRegister = 0;\n    Graphics.memoryLocationDmaTransfer = 0xff46;\n    // Scroll and Window\n    Graphics.memoryLocationScrollX = 0xff43;\n    Graphics.scrollX = 0;\n    Graphics.memoryLocationScrollY = 0xff42;\n    Graphics.scrollY = 0;\n    Graphics.memoryLocationWindowX = 0xff4b;\n    Graphics.windowX = 0;\n    Graphics.memoryLocationWindowY = 0xff4a;\n    Graphics.windowY = 0;\n    // Tile Maps And Data\n    Graphics.memoryLocationTileMapSelectZeroStart = 0x9800;\n    Graphics.memoryLocationTileMapSelectOneStart = 0x9c00;\n    Graphics.memoryLocationTileDataSelectZeroStart = 0x8800;\n    Graphics.memoryLocationTileDataSelectOneStart = 0x8000;\n    // Sprites\n    Graphics.memoryLocationSpriteAttributesTable = 0xfe00;\n    // Palettes\n    Graphics.memoryLocationBackgroundPalette = 0xff47;\n    Graphics.memoryLocationSpritePaletteOne = 0xff48;\n    Graphics.memoryLocationSpritePaletteTwo = 0xff49;\n    // Screen data needs to be stored in wasm memory\n    // Save States\n    Graphics.saveStateSlot = 1;\n    return Graphics;\n}());\n// Batch Process Graphics\n// http://gameboy.mongenel.com/dmg/asmmemmap.html and http://gbdev.gg8.se/wiki/articles/Video_Display\n// Function to batch process our graphics after we skipped so many cycles\n// This is not currently checked in memory read/write\nfunction batchProcessGraphics() {\n    var batchProcessCycles = Graphics.batchProcessCycles();\n    while (Graphics.currentCycles >= batchProcessCycles) {\n        updateGraphics(batchProcessCycles);\n        Graphics.currentCycles -= batchProcessCycles;\n    }\n}\n// Inlined because closure compiler inlines\nfunction initializeGraphics() {\n    // Reset Stateful Variables\n    Graphics.currentCycles = 0;\n    Graphics.scanlineCycleCounter = 0x00;\n    Graphics.scanlineRegister = 0;\n    Graphics.scrollX = 0;\n    Graphics.scrollY = 0;\n    Graphics.windowX = 0;\n    Graphics.windowY = 0;\n    Graphics.scanlineRegister = 0x90;\n    if (Cpu.GBCEnabled) {\n        eightBitStoreIntoGBMemory(0xff41, 0x81);\n        // 0xFF42 -> 0xFF43 = 0x00\n        eightBitStoreIntoGBMemory(0xff44, 0x90);\n        // 0xFF45 -> 0xFF46 = 0x00\n        eightBitStoreIntoGBMemory(0xff47, 0xfc);\n        // 0xFF48 -> 0xFF4B = 0x00\n    }\n    else {\n        eightBitStoreIntoGBMemory(0xff41, 0x85);\n        // 0xFF42 -> 0xFF45 = 0x00\n        eightBitStoreIntoGBMemory(0xff46, 0xff);\n        eightBitStoreIntoGBMemory(0xff47, 0xfc);\n        eightBitStoreIntoGBMemory(0xff48, 0xff);\n        eightBitStoreIntoGBMemory(0xff49, 0xff);\n        // 0xFF4A -> 0xFF4B = 0x00\n        // GBC VRAM Banks (Handled by Memory, initializeCartridge)\n    }\n    // Scanline\n    // Bgb says LY is 90 on boot\n    Graphics.scanlineRegister = 0x90;\n    // LCDC register\n    eightBitStoreIntoGBMemory(0xff40, 0x91);\n    // GBC VRAM Banks\n    eightBitStoreIntoGBMemory(0xff4f, 0x00);\n    eightBitStoreIntoGBMemory(0xff70, 0x01);\n    // Override/reset some variables if the boot ROM is enabled\n    if (Cpu.BootROMEnabled) {\n        if (Cpu.GBCEnabled) {\n            // GBC\n            Graphics.scanlineRegister = 0x00;\n            eightBitStoreIntoGBMemory(0xff40, 0x00);\n            eightBitStoreIntoGBMemory(0xff41, 0x80);\n            eightBitStoreIntoGBMemory(0xff44, 0x00);\n        }\n        else {\n            // GB\n            Graphics.scanlineRegister = 0x00;\n            eightBitStoreIntoGBMemory(0xff40, 0x00);\n            eightBitStoreIntoGBMemory(0xff41, 0x84);\n        }\n    }\n    initializeColors();\n}\nfunction updateGraphics(numberOfCycles) {\n    if (Lcd.enabled) {\n        Graphics.scanlineCycleCounter += numberOfCycles;\n        var graphicsDisableScanlineRendering = Config.graphicsDisableScanlineRendering;\n        while (Graphics.scanlineCycleCounter >= Graphics.MAX_CYCLES_PER_SCANLINE()) {\n            // Reset the scanlineCycleCounter\n            // Don't set to zero to catch extra cycles\n            Graphics.scanlineCycleCounter -= Graphics.MAX_CYCLES_PER_SCANLINE();\n            // Move to next scanline\n            // let scanlineRegister: i32 = eightBitLoadFromGBMemory(Graphics.memoryLocationScanlineRegister);\n            var scanlineRegister = Graphics.scanlineRegister;\n            // Check if we've reached the last scanline\n            if (scanlineRegister === 144) {\n                // Draw the scanline\n                if (!graphicsDisableScanlineRendering) {\n                    _drawScanline(scanlineRegister);\n                }\n                else {\n                    _renderEntireFrame();\n                }\n                // Clear the priority map\n                clearPriorityMap();\n                // Reset the tile cache\n                resetTileCache();\n            }\n            else if (scanlineRegister < 144) {\n                // Draw the scanline\n                if (!graphicsDisableScanlineRendering) {\n                    _drawScanline(scanlineRegister);\n                }\n            }\n            // Post increment the scanline register after drawing\n            // TODO: Need to fix graphics timing\n            if (scanlineRegister > 153) {\n                // Check if we overflowed scanlines\n                // if so, reset our scanline number\n                scanlineRegister = 0;\n            }\n            else {\n                scanlineRegister += 1;\n            }\n            // Store our new scanline value\n            Graphics.scanlineRegister = scanlineRegister;\n            // eightBitStoreIntoGBMemory(Graphics.memoryLocationScanlineRegister, scanlineRegister);\n        }\n    }\n    // Games like Pokemon crystal want the vblank right as it turns to the value, and not have it increment after\n    // It will break and lead to an infinite loop in crystal\n    // Therefore, we want to be checking/Setting our LCD status after the scanline updates\n    setLcdStatus();\n}\n// TODO: Make this a _drawPixelOnScanline, as values can be updated while drawing a scanline\nfunction _drawScanline(scanlineRegister) {\n    // Get our seleted tile data memory location\n    var tileDataMemoryLocation = Graphics.memoryLocationTileDataSelectZeroStart;\n    if (Lcd.bgWindowTileDataSelect) {\n        tileDataMemoryLocation = Graphics.memoryLocationTileDataSelectOneStart;\n    }\n    // Check if the background is enabled\n    // NOTE: On Gameboy color, Pandocs says this does something completely different\n    // LCDC.0 - 2) CGB in CGB Mode: BG and Window Master Priority\n    // When Bit 0 is cleared, the background and window lose their priority -\n    // the sprites will be always displayed on top of background and window,\n    // independently of the priority flags in OAM and BG Map attributes.\n    // TODO: Enable this different feature for GBC\n    if (Cpu.GBCEnabled || Lcd.bgDisplayEnabled) {\n        // Get our map memory location\n        var tileMapMemoryLocation = Graphics.memoryLocationTileMapSelectZeroStart;\n        if (Lcd.bgTileMapDisplaySelect) {\n            tileMapMemoryLocation = Graphics.memoryLocationTileMapSelectOneStart;\n        }\n        // Finally, pass everything to draw the background\n        renderBackground(scanlineRegister, tileDataMemoryLocation, tileMapMemoryLocation);\n    }\n    // Check if the window is enabled, and we are currently\n    // Drawing lines on the window\n    if (Lcd.windowDisplayEnabled) {\n        // Get our map memory location\n        var tileMapMemoryLocation = Graphics.memoryLocationTileMapSelectZeroStart;\n        if (Lcd.windowTileMapDisplaySelect) {\n            tileMapMemoryLocation = Graphics.memoryLocationTileMapSelectOneStart;\n        }\n        // Finally, pass everything to draw the background\n        renderWindow(scanlineRegister, tileDataMemoryLocation, tileMapMemoryLocation);\n    }\n    if (Lcd.spriteDisplayEnable) {\n        // Sprites are enabled, render them!\n        renderSprites(scanlineRegister, Lcd.tallSpriteSize);\n    }\n}\n// Function to render everything for a frame at once\n// This is to improve performance\n// See above for comments on how things are donw\nfunction _renderEntireFrame() {\n    // Scanline needs to be in sync while we draw, thus, we can't shortcut anymore than here\n    for (var i = 0; i <= 144; ++i) {\n        _drawScanline(i);\n    }\n}\n// Function to get the start of a RGB pixel (R, G, B)\n// Inlined because closure compiler inlines\nfunction getRgbPixelStart(x, y) {\n    // Get the pixel number\n    // let pixelNumber: i32 = (y * 160) + x;\n    // Each pixel takes 3 slots, therefore, multiply by 3!\n    return (y * 160 + x) * 3;\n}\n// Also need to store current frame in memory to be read by JS\nfunction setPixelOnFrame(x, y, colorId, color) {\n    // Currently only supports 160x144\n    // Storing in X, then y\n    // So need an offset\n    store(FRAME_LOCATION + getRgbPixelStart(x, y) + colorId, color);\n}\n// Function to shortcut the memory map, and load directly from the VRAM Bank\nfunction loadFromVramBank(gameboyOffset, vramBankId) {\n    var wasmBoyAddress = gameboyOffset - Memory.videoRamLocation + GAMEBOY_INTERNAL_MEMORY_LOCATION + 0x2000 * (vramBankId & 0x01);\n    return load(wasmBoyAddress);\n}\n\n// Returns -1 if no trap found, otherwise returns a value that should be fed for the address\nfunction checkReadTraps(offset) {\n    // Cache globals used multiple times for performance\n    var videoRamLocation = Memory.videoRamLocation;\n    // Try to break early for most common scenario\n    if (offset < videoRamLocation) {\n        return -1;\n    }\n    // Check the graphics mode to see if we can read VRAM\n    // http://gbdev.gg8.se/wiki/articles/Video_Display#Accessing_VRAM_and_OAM\n    if (offset >= videoRamLocation && offset < Memory.cartridgeRamLocation) {\n        // Can only read/write from VRAM During Modes 0 - 2\n        // See graphics/lcd.ts\n        // TODO: This can do more harm than good in a beta emulator,\n        // requres precise timing, disabling for now\n        // if (Graphics.currentLcdMode > 2) {\n        //   return 0xFF;\n        // }\n        return -1;\n    }\n    // ECHO Ram, E000\tFDFF\tMirror of C000~DDFF (ECHO RAM)\n    // http://gbdev.gg8.se/wiki/articles/Memory_Map\n    if (offset >= Memory.echoRamLocation && offset < Memory.spriteInformationTableLocation) {\n        // Simply return the mirror'd value\n        return eightBitLoadFromGBMemory(offset - 0x2000);\n    }\n    // Check for individal writes\n    // Can only read/write from OAM During Modes 0 - 1\n    // See graphics/lcd.ts\n    if (offset >= Memory.spriteInformationTableLocation && offset <= Memory.spriteInformationTableLocationEnd) {\n        // Can only read/write from OAM During Mode 2\n        // See graphics/lcd.ts\n        // if (Lcd.currentLcdMode < 2) {\n        // return 0xff;\n        // }\n        // Not batch processing here for performance\n        // batchProcessGraphics();\n        // return -1;\n        return Lcd.currentLcdMode < 2 ? 0xff : -1;\n    }\n    // CPU\n    if (offset === Cpu.memoryLocationSpeedSwitch) {\n        // TCAGBD, only Bit 7 and 0 are readable, all others are 1\n        var response = 0xff;\n        var currentSpeedSwitchRegister = eightBitLoadFromGBMemory(Cpu.memoryLocationSpeedSwitch);\n        if (!checkBitOnByte(0, currentSpeedSwitchRegister)) {\n            response = resetBitOnByte(0, response);\n        }\n        if (!Cpu.GBCDoubleSpeed) {\n            response = resetBitOnByte(7, response);\n        }\n        return response;\n    }\n    // Graphics\n    // Not batch processing here for performance\n    // batchProcessGraphics();\n    if (offset === Graphics.memoryLocationScanlineRegister) {\n        eightBitStoreIntoGBMemory(offset, Graphics.scanlineRegister);\n        return Graphics.scanlineRegister;\n    }\n    // Sound\n    // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Registers\n    // TODO: Put these bounds on the Sound Class\n    if (offset >= 0xff10 && offset <= 0xff26) {\n        batchProcessAudio();\n        return SoundRegisterReadTraps(offset);\n    }\n    // FF27 - FF2F not used\n    // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Register_Reading\n    // Always read as 0xFF\n    if (offset >= 0xff27 && offset <= 0xff2f) {\n        return 0xff;\n    }\n    // Final Wave Table for Channel 3\n    if (offset >= 0xff30 && offset <= 0xff3f) {\n        batchProcessAudio();\n        if (Channel3.isEnabled) {\n            return Channel3.handleWaveRamRead();\n        }\n        return -1;\n    }\n    // Timers\n    if (offset === Timers.memoryLocationDividerRegister) {\n        // Divider register in memory is just the upper 8 bits\n        // http://gbdev.gg8.se/wiki/articles/Timer_Obscure_Behaviour\n        var upperDividerRegisterBits = splitHighByte(Timers.dividerRegister);\n        eightBitStoreIntoGBMemory(offset, upperDividerRegisterBits);\n        return upperDividerRegisterBits;\n    }\n    if (offset === Timers.memoryLocationTimerCounter) {\n        eightBitStoreIntoGBMemory(offset, Timers.timerCounter);\n        return Timers.timerCounter;\n    }\n    // Interrupts\n    if (offset === Interrupts.memoryLocationInterruptRequest) {\n        // TCAGB and BGB say the top 5 bits are always 1.\n        return 0xe0 | Interrupts.interruptsRequestedValue;\n    }\n    // Joypad\n    if (offset === Joypad.memoryLocationJoypadRegister) {\n        return getJoypadState();\n    }\n    return -1;\n}\n\n// Load/Read functionality for memory\nfunction eightBitLoadFromGBMemory(gameboyOffset) {\n    return load(getWasmBoyOffsetFromGameBoyOffset(gameboyOffset));\n}\nfunction eightBitLoadFromGBMemoryWithTraps(offset) {\n    if (offset === Breakpoints.readGbMemory) {\n        Breakpoints.reachedBreakpoint = true;\n    }\n    var readTrapResult = checkReadTraps(offset);\n    return readTrapResult === -1 ? eightBitLoadFromGBMemory(offset) : readTrapResult;\n}\n// TODO: Rename this to sixteenBitLoadFromGBMemoryWithTraps\n// Inlined because closure compiler inlines\nfunction sixteenBitLoadFromGBMemory(offset) {\n    // Get our low byte\n    var lowByteReadTrapResult = checkReadTraps(offset);\n    var lowByte = lowByteReadTrapResult === -1 ? eightBitLoadFromGBMemory(offset) : lowByteReadTrapResult;\n    // Get the next offset for the second byte\n    var nextOffset = offset + 1;\n    // Get our high byte\n    var highByteReadTrapResult = checkReadTraps(nextOffset);\n    var highByte = highByteReadTrapResult === -1 ? eightBitLoadFromGBMemory(nextOffset) : highByteReadTrapResult;\n    // Concatenate the bytes and return\n    return concatenateBytes(highByte, lowByte);\n}\nfunction loadBooleanDirectlyFromWasmMemory(offset) {\n    return load(offset) > 0;\n}\n\n// WasmBoy memory map:\nvar Memory = /** @class */ (function () {\n    function Memory() {\n    }\n    // Function to save the state of the class\n    Memory.saveState = function () {\n        store(getSaveStateMemoryOffset(0x00, Memory.saveStateSlot), Memory.currentRomBank);\n        store(getSaveStateMemoryOffset(0x02, Memory.saveStateSlot), Memory.currentRamBank);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x04, Memory.saveStateSlot), Memory.isRamBankingEnabled);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x05, Memory.saveStateSlot), Memory.isMBC1RomModeEnabled);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x06, Memory.saveStateSlot), Memory.isRomOnly);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x07, Memory.saveStateSlot), Memory.isMBC1);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x08, Memory.saveStateSlot), Memory.isMBC2);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x09, Memory.saveStateSlot), Memory.isMBC3);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x0a, Memory.saveStateSlot), Memory.isMBC5);\n        store(getSaveStateMemoryOffset(0x0b, Memory.saveStateSlot), Memory.DMACycles);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x0f, Memory.saveStateSlot), Memory.isHblankHdmaActive);\n        store(getSaveStateMemoryOffset(0x10, Memory.saveStateSlot), Memory.hblankHdmaTransferLengthRemaining);\n        store(getSaveStateMemoryOffset(0x14, Memory.saveStateSlot), Memory.hblankHdmaSource);\n        store(getSaveStateMemoryOffset(0x18, Memory.saveStateSlot), Memory.hblankHdmaDestination);\n    };\n    // Function to load the save state from memory\n    Memory.loadState = function () {\n        Memory.currentRomBank = load(getSaveStateMemoryOffset(0x00, Memory.saveStateSlot));\n        Memory.currentRamBank = load(getSaveStateMemoryOffset(0x02, Memory.saveStateSlot));\n        Memory.isRamBankingEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x04, Memory.saveStateSlot));\n        Memory.isMBC1RomModeEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x05, Memory.saveStateSlot));\n        Memory.isRomOnly = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x06, Memory.saveStateSlot));\n        Memory.isMBC1 = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x07, Memory.saveStateSlot));\n        Memory.isMBC2 = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x08, Memory.saveStateSlot));\n        Memory.isMBC3 = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x09, Memory.saveStateSlot));\n        Memory.isMBC5 = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x0a, Memory.saveStateSlot));\n        Memory.DMACycles = load(getSaveStateMemoryOffset(0x0b, Memory.saveStateSlot));\n        Memory.isHblankHdmaActive = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x0f, Memory.saveStateSlot));\n        Memory.hblankHdmaTransferLengthRemaining = load(getSaveStateMemoryOffset(0x10, Memory.saveStateSlot));\n        Memory.hblankHdmaSource = load(getSaveStateMemoryOffset(0x14, Memory.saveStateSlot));\n        Memory.hblankHdmaDestination = load(getSaveStateMemoryOffset(0x18, Memory.saveStateSlot));\n    };\n    // ----------------------------------\n    // Gameboy Memory Map\n    // ----------------------------------\n    // https://github.com/AntonioND/giibiiadvance/blob/master/docs/TCAGBD.pdf\n    // http://gameboy.mongenel.com/dmg/asmmemmap.html\n    // using Arrays, first index is start, second is end\n    Memory.cartridgeRomLocation = 0x0000;\n    Memory.switchableCartridgeRomLocation = 0x4000;\n    Memory.videoRamLocation = 0x8000;\n    Memory.cartridgeRamLocation = 0xa000;\n    Memory.internalRamBankZeroLocation = 0xc000;\n    // This ram bank is switchable\n    Memory.internalRamBankOneLocation = 0xd000;\n    Memory.echoRamLocation = 0xe000;\n    Memory.spriteInformationTableLocation = 0xfe00;\n    Memory.spriteInformationTableLocationEnd = 0xfe9f;\n    Memory.unusableMemoryLocation = 0xfea0;\n    Memory.unusableMemoryEndLocation = 0xfeff;\n    // Hardware I/O, 0xFF00 -> 0xFF7F\n    // Zero Page, 0xFF80 -> 0xFFFE\n    // Intterupt Enable Flag, 0xFFFF\n    // ----------------------------------\n    // Rom/Ram Banking\n    // ----------------------------------\n    // http://gbdev.gg8.se/wiki/articles/Memory_Bank_Controllers#MBC3_.28max_2MByte_ROM_and.2For_32KByte_RAM_and_Timer.29\n    // http://www.codeslinger.co.uk/pages/projects/gameboy/banking.html\n    Memory.currentRomBank = 0x00;\n    Memory.currentRamBank = 0x00;\n    Memory.isRamBankingEnabled = false;\n    Memory.isMBC1RomModeEnabled = true;\n    // Cartridge Types\n    // http://gbdev.gg8.se/wiki/articles/The_Cartridge_Header\n    Memory.isRomOnly = true;\n    Memory.isMBC1 = false;\n    Memory.isMBC2 = false;\n    Memory.isMBC3 = false;\n    Memory.isMBC5 = false;\n    // DMA\n    Memory.memoryLocationHdmaSourceHigh = 0xff51;\n    Memory.memoryLocationHdmaSourceLow = 0xff52;\n    Memory.memoryLocationHdmaDestinationHigh = 0xff53;\n    Memory.memoryLocationHdmaDestinationLow = 0xff54;\n    Memory.memoryLocationHdmaTrigger = 0xff55;\n    // Cycles accumulated for DMA\n    Memory.DMACycles = 0;\n    // Boolean we will mirror to indicate if Hdma is active\n    Memory.isHblankHdmaActive = false;\n    Memory.hblankHdmaTransferLengthRemaining = 0x00;\n    // Store the source and destination for performance, and update as needed\n    Memory.hblankHdmaSource = 0x00;\n    Memory.hblankHdmaDestination = 0x00;\n    // GBC Registers\n    Memory.memoryLocationGBCVRAMBank = 0xff4f;\n    Memory.memoryLocationGBCWRAMBank = 0xff70;\n    // Save States\n    Memory.saveStateSlot = 4;\n    return Memory;\n}());\n// Inlined because closure compiler inlines\nfunction initializeCartridge() {\n    // Reset stateful variables\n    Memory.isRamBankingEnabled = false;\n    Memory.isMBC1RomModeEnabled = true;\n    // Get our game MBC type from the cartridge header\n    // http://gbdev.gg8.se/wiki/articles/The_Cartridge_Header\n    var cartridgeType = eightBitLoadFromGBMemory(0x0147);\n    // Reset our Cartridge types\n    Memory.isRomOnly = cartridgeType === 0x00;\n    Memory.isMBC1 = cartridgeType >= 0x01 && cartridgeType <= 0x03;\n    Memory.isMBC2 = cartridgeType >= 0x05 && cartridgeType <= 0x06;\n    Memory.isMBC3 = cartridgeType >= 0x0f && cartridgeType <= 0x13;\n    Memory.isMBC5 = cartridgeType >= 0x19 && cartridgeType <= 0x1e;\n    Memory.currentRomBank = 0x01;\n    Memory.currentRamBank = 0x00;\n    // Set our GBC Banks\n    eightBitStoreIntoGBMemory(Memory.memoryLocationGBCVRAMBank, 0x00);\n    eightBitStoreIntoGBMemory(Memory.memoryLocationGBCWRAMBank, 0x01);\n}\n\n// WasmBoy memory map:\n\n// Everything Static as class instances just aren't quite there yet\n// https://github.com/AssemblyScript/assemblyscript/blob/master/tests/compiler/showcase.ts\nvar Cpu = /** @class */ (function () {\n    function Cpu() {\n    }\n    Cpu.CLOCK_SPEED = function () {\n        // 2^23, thanks binji!\n        // return Cpu.GBCDoubleSpeed ? 8388608 : 4194304;\n        return 4194304 << Cpu.GBCDoubleSpeed;\n    };\n    // Cycles Per Frame = Clock Speed / fps\n    // So: 4194304 / 59.73\n    Cpu.MAX_CYCLES_PER_FRAME = function () {\n        // return Cpu.GBCDoubleSpeed ? 140448 : 70224;\n        return 70224 << Cpu.GBCDoubleSpeed;\n    };\n    // See section 4.10 of TCAGBD\n    // Cpu Halting explained: https://www.reddit.com/r/EmuDev/comments/5ie3k7/infinite_loop_trying_to_pass_blarggs_interrupt/db7xnbe/\n    Cpu.enableHalt = function () {\n        if (Interrupts.masterInterruptSwitch) {\n            Cpu.isHaltNormal = true;\n            return;\n        }\n        var haltTypeValue = Interrupts.interruptsEnabledValue & Interrupts.interruptsRequestedValue & 0x1f;\n        if (haltTypeValue === 0) {\n            Cpu.isHaltNoJump = true;\n            return;\n        }\n        Cpu.isHaltBug = true;\n    };\n    Cpu.exitHaltAndStop = function () {\n        Cpu.isHaltNoJump = false;\n        Cpu.isHaltNormal = false;\n        Cpu.isHaltBug = false;\n        Cpu.isStopped = false;\n    };\n    Cpu.isHalted = function () {\n        return Cpu.isHaltNormal || Cpu.isHaltNoJump;\n    };\n    // Function to save the state of the class\n    Cpu.saveState = function () {\n        // Registers\n        store(getSaveStateMemoryOffset(0x00, Cpu.saveStateSlot), Cpu.registerA);\n        store(getSaveStateMemoryOffset(0x01, Cpu.saveStateSlot), Cpu.registerB);\n        store(getSaveStateMemoryOffset(0x02, Cpu.saveStateSlot), Cpu.registerC);\n        store(getSaveStateMemoryOffset(0x03, Cpu.saveStateSlot), Cpu.registerD);\n        store(getSaveStateMemoryOffset(0x04, Cpu.saveStateSlot), Cpu.registerE);\n        store(getSaveStateMemoryOffset(0x05, Cpu.saveStateSlot), Cpu.registerH);\n        store(getSaveStateMemoryOffset(0x06, Cpu.saveStateSlot), Cpu.registerL);\n        store(getSaveStateMemoryOffset(0x07, Cpu.saveStateSlot), Cpu.registerF);\n        store(getSaveStateMemoryOffset(0x08, Cpu.saveStateSlot), Cpu.stackPointer);\n        store(getSaveStateMemoryOffset(0x0a, Cpu.saveStateSlot), Cpu.programCounter);\n        store(getSaveStateMemoryOffset(0x0c, Cpu.saveStateSlot), Cpu.currentCycles);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x11, Cpu.saveStateSlot), Cpu.isHaltNormal);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x12, Cpu.saveStateSlot), Cpu.isHaltNoJump);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x13, Cpu.saveStateSlot), Cpu.isHaltBug);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x14, Cpu.saveStateSlot), Cpu.isStopped);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x15, Cpu.saveStateSlot), Cpu.BootROMEnabled);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x16, Cpu.saveStateSlot), Cpu.GBCEnabled);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x17, Cpu.saveStateSlot), Cpu.GBCDoubleSpeed);\n    };\n    // Function to load the save state from memory\n    Cpu.loadState = function () {\n        // Registers\n        Cpu.registerA = load(getSaveStateMemoryOffset(0x00, Cpu.saveStateSlot));\n        Cpu.registerB = load(getSaveStateMemoryOffset(0x01, Cpu.saveStateSlot));\n        Cpu.registerC = load(getSaveStateMemoryOffset(0x02, Cpu.saveStateSlot));\n        Cpu.registerD = load(getSaveStateMemoryOffset(0x03, Cpu.saveStateSlot));\n        Cpu.registerE = load(getSaveStateMemoryOffset(0x04, Cpu.saveStateSlot));\n        Cpu.registerH = load(getSaveStateMemoryOffset(0x05, Cpu.saveStateSlot));\n        Cpu.registerL = load(getSaveStateMemoryOffset(0x06, Cpu.saveStateSlot));\n        Cpu.registerF = load(getSaveStateMemoryOffset(0x07, Cpu.saveStateSlot));\n        Cpu.stackPointer = load(getSaveStateMemoryOffset(0x08, Cpu.saveStateSlot));\n        Cpu.programCounter = load(getSaveStateMemoryOffset(0x0a, Cpu.saveStateSlot));\n        Cpu.currentCycles = load(getSaveStateMemoryOffset(0x0c, Cpu.saveStateSlot));\n        Cpu.isHaltNormal = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x11, Cpu.saveStateSlot));\n        Cpu.isHaltNoJump = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x12, Cpu.saveStateSlot));\n        Cpu.isHaltBug = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x13, Cpu.saveStateSlot));\n        Cpu.isStopped = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x14, Cpu.saveStateSlot));\n        Cpu.BootROMEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x15, Cpu.saveStateSlot));\n        Cpu.GBCEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x16, Cpu.saveStateSlot));\n        Cpu.GBCDoubleSpeed = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x17, Cpu.saveStateSlot));\n    };\n    // Status to track if we are currently executing the boot rom\n    Cpu.memoryLocationBootROMSwitch = 0xff50;\n    Cpu.BootROMEnabled = false;\n    // Status to track if we are in Gameboy Color Mode, and GBC State\n    Cpu.GBCEnabled = false;\n    // Memory Location for the GBC Speed switch\n    // And the current status\n    Cpu.memoryLocationSpeedSwitch = 0xff4d;\n    Cpu.GBCDoubleSpeed = false;\n    // 8-bit Cpu.registers\n    Cpu.registerA = 0;\n    Cpu.registerB = 0;\n    Cpu.registerC = 0;\n    Cpu.registerD = 0;\n    Cpu.registerE = 0;\n    Cpu.registerH = 0;\n    Cpu.registerL = 0;\n    Cpu.registerF = 0;\n    // 16-bit Cpu.registers\n    Cpu.stackPointer = 0;\n    // Boot rom from 0x00 to 0x99, all games start at 0x100\n    Cpu.programCounter = 0x00;\n    // Current number of cycles, shouldn't execeed max number of cycles\n    Cpu.currentCycles = 0;\n    // HALT and STOP instructions need to stop running opcodes, but simply check timers\n    // https://github.com/nakardo/node-gameboy/blob/master/lib/cpu/opcodes.js\n    // Matt said is should work to, so it must work!\n    // TCAGBD shows three different HALT states. Therefore, we need to handle each\n    Cpu.isHaltNormal = false;\n    Cpu.isHaltNoJump = false;\n    Cpu.isHaltBug = false;\n    Cpu.isStopped = false;\n    // Save States\n    Cpu.saveStateSlot = 0;\n    return Cpu;\n}());\n// Inlined because closure compiler does so\nfunction initializeCpu() {\n    // Reset all stateful Cpu variables\n    // Cpu.GBCEnabled is done by core/initialize\n    Cpu.GBCDoubleSpeed = false;\n    Cpu.registerA = 0;\n    Cpu.registerB = 0;\n    Cpu.registerC = 0;\n    Cpu.registerD = 0;\n    Cpu.registerE = 0;\n    Cpu.registerH = 0;\n    Cpu.registerL = 0;\n    Cpu.registerF = 0;\n    Cpu.stackPointer = 0;\n    Cpu.programCounter = 0x00;\n    Cpu.currentCycles = 0;\n    Cpu.isHaltNormal = false;\n    Cpu.isHaltNoJump = false;\n    Cpu.isHaltBug = false;\n    Cpu.isStopped = false;\n    // Everything is done by Boot ROM is enabled.\n    if (Cpu.BootROMEnabled) {\n        return;\n    }\n    if (Cpu.GBCEnabled) {\n        // CPU Registers\n        Cpu.registerA = 0x11;\n        Cpu.registerF = 0x80;\n        Cpu.registerB = 0x00;\n        Cpu.registerC = 0x00;\n        Cpu.registerD = 0xff;\n        Cpu.registerE = 0x56;\n        Cpu.registerH = 0x00;\n        Cpu.registerL = 0x0d;\n    }\n    else {\n        // Cpu Registers\n        Cpu.registerA = 0x01;\n        Cpu.registerF = 0xb0;\n        Cpu.registerB = 0x00;\n        Cpu.registerC = 0x13;\n        Cpu.registerD = 0x00;\n        Cpu.registerE = 0xd8;\n        Cpu.registerH = 0x01;\n        Cpu.registerL = 0x4d;\n    }\n    // Cpu Control Flow\n    Cpu.programCounter = 0x100;\n    Cpu.stackPointer = 0xfffe;\n}\n\n// Imports\n// General Logic Instructions\n// Such as the ones found on the CB table and 0x40 - 0xBF\n// NOTE: Only CB table uses these for now, was mostly me realizing that I messed up, trying to be all cute and verbose :p\n// NOTE: TODO: Refactor honestly shouldn't take that long, and may happen once assembly script is improved\nfunction addARegister(register) {\n    var registerA = Cpu.registerA;\n    checkAndSetEightBitHalfCarryFlag(registerA, register);\n    checkAndSetEightBitCarryFlag(registerA, register);\n    registerA = u8Portable(registerA + register);\n    Cpu.registerA = registerA;\n    setZeroFlag$$1((registerA === 0));\n    setSubtractFlag(0);\n}\nfunction addAThroughCarryRegister(register) {\n    // Handling flags manually as they require some special overflow\n    // From: https://github.com/nakardo/node-gameboy/blob/master/lib/cpu/opcodes.js\n    // CTRL+F adc\n    var registerA = Cpu.registerA;\n    var result = u8Portable(registerA + register + getCarryFlag$$1());\n    setHalfCarryFlag(((u8Portable(registerA ^ register ^ result) & 0x10) != 0));\n    var overflowedResult = u16Portable(registerA + register + getCarryFlag$$1());\n    setCarryFlag(((overflowedResult & 0x100) > 0));\n    Cpu.registerA = result;\n    setZeroFlag$$1((result === 0));\n    setSubtractFlag(0);\n}\nfunction subARegister(register) {\n    // Need to convert the register on one line, and flip the sign on another\n    var negativeRegister = register;\n    negativeRegister = negativeRegister * -1;\n    var registerA = Cpu.registerA;\n    checkAndSetEightBitHalfCarryFlag(registerA, negativeRegister);\n    checkAndSetEightBitCarryFlag(registerA, negativeRegister);\n    registerA = u8Portable(registerA - register);\n    Cpu.registerA = registerA;\n    setZeroFlag$$1((registerA === 0));\n    setSubtractFlag(1);\n}\nfunction subAThroughCarryRegister(register) {\n    // Handling flags manually as they require some special overflow\n    // From: https://github.com/nakardo/node-gameboy/blob/master/lib/cpu/opcodes.js\n    // CTRL+F adc\n    var registerA = Cpu.registerA;\n    var result = u8Portable(registerA - register - getCarryFlag$$1());\n    var carryRegisterCheck = u8Portable((registerA ^ register ^ result) & 0x10);\n    setHalfCarryFlag((carryRegisterCheck != 0));\n    var overflowedResult = u16Portable(registerA - register - getCarryFlag$$1());\n    setCarryFlag(((overflowedResult & 0x100) > 0));\n    Cpu.registerA = result;\n    setZeroFlag$$1((result === 0));\n    setSubtractFlag(1);\n}\nfunction andARegister(register) {\n    var registerA = Cpu.registerA & register;\n    Cpu.registerA = registerA;\n    setZeroFlag$$1((registerA === 0));\n    setSubtractFlag(0);\n    setHalfCarryFlag(1);\n    setCarryFlag(0);\n}\nfunction xorARegister(register) {\n    var registerA = u8Portable(Cpu.registerA ^ register);\n    Cpu.registerA = registerA;\n    setZeroFlag$$1((registerA === 0));\n    setSubtractFlag(0);\n    setHalfCarryFlag(0);\n    setCarryFlag(0);\n}\nfunction orARegister(register) {\n    var registerA = Cpu.registerA | register;\n    Cpu.registerA = registerA;\n    setZeroFlag$$1((registerA === 0));\n    setSubtractFlag(0);\n    setHalfCarryFlag(0);\n    setCarryFlag(0);\n}\nfunction cpARegister(register) {\n    // 0xB8 - 0xBF\n    // CP B\n    // 1  4\n    // Z 1 H C\n    var registerA = Cpu.registerA;\n    var negativeRegister = register;\n    negativeRegister = negativeRegister * -1;\n    checkAndSetEightBitHalfCarryFlag(registerA, negativeRegister);\n    checkAndSetEightBitCarryFlag(registerA, negativeRegister);\n    var tempResult = registerA + negativeRegister;\n    setZeroFlag$$1((tempResult === 0));\n    setSubtractFlag(1);\n}\n// Inlined because closure compiler inlines\nfunction rotateRegisterLeft(register) {\n    // RLC register 8-bit\n    // Z 0 0 C\n    setCarryFlag(((register & 0x80) === 0x80));\n    register = rotateByteLeft(register);\n    setZeroFlag$$1((register === 0));\n    // Set all other flags to zero\n    setSubtractFlag(0);\n    setHalfCarryFlag(0);\n    // Return the register\n    return register;\n}\n// Inlined because closure compiler inlines\nfunction rotateRegisterRight(register) {\n    // RLC register 8-bit\n    // Z 0 0 C\n    // Check for the last bit, to see if it will be carried\n    setCarryFlag(((register & 0x01) > 0));\n    register = rotateByteRight(register);\n    setZeroFlag$$1((register === 0));\n    setSubtractFlag(0);\n    setHalfCarryFlag(0);\n    // Return the register\n    return register;\n}\n// Inlined because closure compiler inlines\nfunction rotateRegisterLeftThroughCarry(register) {\n    // RL register 8-bit\n    // Z 0 0 C\n    // setting has first bit since we need to use carry\n    var hasHighbit = (register & 0x80) === 0x80;\n    register = rotateByteLeftThroughCarry(register);\n    setCarryFlag(hasHighbit);\n    setZeroFlag$$1((register === 0));\n    setSubtractFlag(0);\n    setHalfCarryFlag(0);\n    return register;\n}\n// Inlined because closure compiler inlines\nfunction rotateRegisterRightThroughCarry(register) {\n    // RR register 8-bit\n    // Z 0 0 C\n    var hasLowBit = (register & 0x01) === 0x01;\n    register = rotateByteRightThroughCarry(register);\n    setCarryFlag(hasLowBit);\n    setZeroFlag$$1((register === 0));\n    setSubtractFlag(0);\n    setHalfCarryFlag(0);\n    return register;\n}\n// Inlined because closure compiler inlines\nfunction shiftLeftRegister(register) {\n    // SLA register 8-bit\n    // Z 0 0 C\n    var hasHighbit = (register & 0x80) === 0x80;\n    register = u8Portable(register << 1);\n    setCarryFlag(hasHighbit);\n    setZeroFlag$$1((register === 0));\n    setSubtractFlag(0);\n    setHalfCarryFlag(0);\n    return register;\n}\n// Inlined because closure compiler inlines\nfunction shiftRightArithmeticRegister(register) {\n    // SRA register 8-bit\n    // Z 0 0 C\n    // NOTE: This C flag may need to be set to 0;\n    // This preserves the MSB (Most significant bit)\n    var hasHighbit = (register & 0x80) === 0x80;\n    var hasLowbit = (register & 0x01) === 0x01;\n    register = u8Portable(register >> 1);\n    if (hasHighbit) {\n        register = register | 0x80;\n    }\n    setZeroFlag$$1((register === 0));\n    setSubtractFlag(0);\n    setHalfCarryFlag(0);\n    setCarryFlag(hasLowbit);\n    return register;\n}\n// Inlined because closure compiler inlines\nfunction swapNibblesOnRegister(register) {\n    // SWAP register 8-bit\n    // Z 0 0 0\n    var highNibble = register & 0xf0;\n    var lowNibble = register & 0x0f;\n    register = u8Portable((lowNibble << 4) | (highNibble >> 4));\n    setZeroFlag$$1((register === 0));\n    setSubtractFlag(0);\n    setHalfCarryFlag(0);\n    setCarryFlag(0);\n    return register;\n}\n// Inlined because closure compiler inlines\nfunction shiftRightLogicalRegister(register) {\n    // SRA register 8-bit\n    // Z 0 0 C\n    // NOTE: This C flag may need to be set to 0;\n    // This does NOT preserve MSB (most significant bit)\n    var hasLowbit = (register & 0x01) === 0x01;\n    register = u8Portable(register >> 1);\n    setZeroFlag$$1((register === 0));\n    setSubtractFlag(0);\n    setHalfCarryFlag(0);\n    setCarryFlag(hasLowbit);\n    return register;\n}\nfunction testBitOnRegister(bitPosition, register) {\n    // BIT bitPosition ,register 8-bit\n    // Z 0 1 -\n    var testByte = 0x01 << bitPosition;\n    var result = register & testByte;\n    setZeroFlag$$1((result === 0x00));\n    setSubtractFlag(0);\n    setHalfCarryFlag(1);\n    return register;\n}\nfunction setBitOnRegister(bitPosition, bitValue, register) {\n    // RES 0,B or SET 0,B depending on bit value\n    if (bitValue > 0) {\n        var setByte = 0x01 << bitPosition;\n        register = register | setByte;\n    }\n    else {\n        // NOT (byte we want)\n        // 0000 0100 becomes 1111 1011\n        var setByte = ~(0x01 << bitPosition);\n        register = register & setByte;\n    }\n    return register;\n}\n// Private function for our relative jumps\nfunction relativeJump(value) {\n    // Need to convert the value to i8, since in this case, u8 can be negative\n    var relativeJumpOffset = i8Portable(value);\n    var programCounter = Cpu.programCounter;\n    programCounter = u16Portable(programCounter + relativeJumpOffset);\n    // Realtive jump, using bgb debugger\n    // and my debugger shows,\n    // on JR you need to jump to the relative jump offset,\n    // However, if the jump fails (such as conditional), only jump +2 in total\n    programCounter = u16Portable(programCounter + 1);\n    Cpu.programCounter = programCounter;\n}\n\n// Imports\n// Handle CB Opcodes\n// NOTE: Program stpes and cycles are standardized depending on the register type\n// NOTE: Doing some funny stuff to get around not having arrays or objects\n// Inlined because closure compiler inlines.\nfunction handleCbOpcode(cbOpcode) {\n    var numberOfCycles = -1;\n    var handledOpcode = false;\n    // The result of our cb logic instruction\n    var instructionRegisterValue = 0;\n    var instructionRegisterResult = 0;\n    // Get our register number by modulo 0x08 (number of registers)\n    // cbOpcode % 0x08\n    var registerNumber = cbOpcode & 0x07;\n    // NOTE: registerNumber = register on CB table. Cpu.registerB = 0, Cpu.registerC = 1....Cpu.registerA = 7\n    switch (registerNumber) {\n        case 0:\n            instructionRegisterValue = Cpu.registerB;\n            break;\n        case 1:\n            instructionRegisterValue = Cpu.registerC;\n            break;\n        case 2:\n            instructionRegisterValue = Cpu.registerD;\n            break;\n        case 3:\n            instructionRegisterValue = Cpu.registerE;\n            break;\n        case 4:\n            instructionRegisterValue = Cpu.registerH;\n            break;\n        case 5:\n            instructionRegisterValue = Cpu.registerL;\n            break;\n        case 6:\n            // Value at register HL\n            // 4 cycles\n            instructionRegisterValue = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            break;\n        case 7:\n            instructionRegisterValue = Cpu.registerA;\n            break;\n    }\n    // Grab the high nibble to perform skips to speed up performance\n    var opcodeHighNibble = cbOpcode & 0xf0;\n    opcodeHighNibble = opcodeHighNibble >> 4;\n    // Send to the correct function\n    switch (opcodeHighNibble) {\n        case 0x00:\n            if (cbOpcode <= 0x07) {\n                // RLC register 8-bit\n                // Z 0 0 C\n                instructionRegisterResult = rotateRegisterLeft(instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0x0f) {\n                // RRC register 8-bit\n                // Z 0 0 C\n                instructionRegisterResult = rotateRegisterRight(instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x01:\n            if (cbOpcode <= 0x17) {\n                // RL register 8-bit\n                // Z 0 0 C\n                instructionRegisterResult = rotateRegisterLeftThroughCarry(instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0x1f) {\n                // RR register 8-bit\n                // Z 0 0 C\n                instructionRegisterResult = rotateRegisterRightThroughCarry(instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x02:\n            if (cbOpcode <= 0x27) {\n                // SLA register 8-bit\n                // Z 0 0 C\n                instructionRegisterResult = shiftLeftRegister(instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0x2f) {\n                // SRA register 8-bit\n                // Z 0 0 0\n                instructionRegisterResult = shiftRightArithmeticRegister(instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x03:\n            if (cbOpcode <= 0x37) {\n                // SWAP register 8-bit\n                // Z 0 0 0\n                instructionRegisterResult = swapNibblesOnRegister(instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0x3f) {\n                // SRL B\n                // Z 0 0 C\n                instructionRegisterResult = shiftRightLogicalRegister(instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x04:\n            if (cbOpcode <= 0x47) {\n                // BIT 0,register 8-bit\n                // Z 0 1 -\n                //TODO: Optimize this not to do logic of setting register back\n                instructionRegisterResult = testBitOnRegister(0, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0x4f) {\n                // BIT 1,register 8-bit\n                // Z 0 1 -\n                instructionRegisterResult = testBitOnRegister(1, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x05:\n            if (cbOpcode <= 0x57) {\n                // BIT 2,register 8-bit\n                // Z 0 1 -\n                instructionRegisterResult = testBitOnRegister(2, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0x5f) {\n                // BIT 3,register 8-bit\n                // Z 0 1 -\n                instructionRegisterResult = testBitOnRegister(3, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x06:\n            if (cbOpcode <= 0x67) {\n                // BIT 4,register 8-bit\n                // Z 0 1 -\n                instructionRegisterResult = testBitOnRegister(4, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0x6f) {\n                // BIT 5,register 8-bit\n                // Z 0 1 -\n                instructionRegisterResult = testBitOnRegister(5, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x07:\n            if (cbOpcode <= 0x77) {\n                // BIT 6,register 8-bit\n                // Z 0 1 -\n                instructionRegisterResult = testBitOnRegister(6, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0x7f) {\n                // BIT 7,register 8-bit\n                // Z 0 1 -\n                instructionRegisterResult = testBitOnRegister(7, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x08:\n            if (cbOpcode <= 0x87) {\n                // Res 0,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(0, 0, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0x8f) {\n                // Res 1,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(1, 0, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x09:\n            if (cbOpcode <= 0x97) {\n                // Res 2,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(2, 0, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0x9f) {\n                // Res 3,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(3, 0, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x0a:\n            if (cbOpcode <= 0xa7) {\n                // Res 4,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(4, 0, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0xaf) {\n                // Res 5,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(5, 0, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x0b:\n            if (cbOpcode <= 0xb7) {\n                // Res 6,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(6, 0, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0xbf) {\n                // Res 7,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(7, 0, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x0c:\n            if (cbOpcode <= 0xc7) {\n                // SET 0,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(0, 1, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0xcf) {\n                // SET 1,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(1, 1, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x0d:\n            if (cbOpcode <= 0xd7) {\n                // SET 2,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(2, 1, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0xdf) {\n                // SET 3,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(3, 1, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x0e:\n            if (cbOpcode <= 0xe7) {\n                // SET 4,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(4, 1, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0xef) {\n                // SET 5,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(5, 1, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x0f:\n            if (cbOpcode <= 0xf7) {\n                // SET 6,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(6, 1, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0xff) {\n                // SET 7,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(7, 1, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n    }\n    // Finally Pass back into the correct register\n    switch (registerNumber) {\n        case 0:\n            Cpu.registerB = instructionRegisterResult;\n            break;\n        case 1:\n            Cpu.registerC = instructionRegisterResult;\n            break;\n        case 2:\n            Cpu.registerD = instructionRegisterResult;\n            break;\n        case 3:\n            Cpu.registerE = instructionRegisterResult;\n            break;\n        case 4:\n            Cpu.registerH = instructionRegisterResult;\n            break;\n        case 5:\n            Cpu.registerL = instructionRegisterResult;\n            break;\n        case 6:\n            // Value at register HL\n            // Opcodes 0x40 -> 0x7F only do simple\n            // Bit test, and don't need to be stored back in memory\n            // Thus they take 4 less cycles to run\n            if (opcodeHighNibble < 0x04 || opcodeHighNibble > 0x07) {\n                // Store the result back\n                // 4 cycles\n                eightBitStoreSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL), instructionRegisterResult);\n            }\n            break;\n        case 7:\n            Cpu.registerA = instructionRegisterResult;\n            break;\n    }\n    // Finally our number of cycles\n    // Set if we handled the opcode\n    if (handledOpcode) {\n        numberOfCycles = 4;\n    }\n    // Return our number of cycles\n    return numberOfCycles;\n}\n\n// Imports\n// Take in any opcode, and decode it, and return the number of cycles\n// Program counter can be gotten from getProgramCounter();\n// Setting return value to i32 instead of u16, as we want to return a negative number on error\n// https://rednex.github.io/rgbds/gbz80.7.html\n// http://pastraiser.com/cpu/gameboy/gameboyopcodes.html\nfunction executeOpcode$$1(opcode) {\n    // Always implement the program counter by one\n    // Any other value can just subtract or add however much offset before reaching this line\n    var programCounter = Cpu.programCounter;\n    programCounter = u16Portable(programCounter + 1);\n    // Check if we are in the halt bug\n    if (Cpu.isHaltBug) {\n        // Need to not increment program counter,\n        // thus, running the next opcode twice\n        // E.g\n        // 0x76 - halt\n        // FA 34 12 - ld a,(1234)\n        // Becomes\n        // FA FA 34 ld a,(34FA)\n        // 12 ld (de),a\n        programCounter = u16Portable(programCounter - 1);\n    }\n    Cpu.programCounter = programCounter;\n    // Split our opcode into a high nibble to speed up performance\n    // Running 255 if statements is slow, even in wasm haha!\n    var opcodeHighNibble = opcode & 0xf0;\n    opcodeHighNibble = opcodeHighNibble >> 4;\n    // NOTE: @binji rule of thumb: it takes 4 cpu cycles to read one byte\n    // Therefore isntructions that use more than just the opcode (databyte one and two) will take at least\n    // 8 cyckles to use getDataByteOne(), and two cycles to use the concatented\n    // Not using a switch statement to avoid cannot redeclare this variable errors\n    // And it would be a ton of work :p\n    switch (opcodeHighNibble) {\n        case 0x00:\n            return handleOpcode0x(opcode);\n        case 0x01:\n            return handleOpcode1x(opcode);\n        case 0x02:\n            return handleOpcode2x(opcode);\n        case 0x03:\n            return handleOpcode3x(opcode);\n        case 0x04:\n            return handleOpcode4x(opcode);\n        case 0x05:\n            return handleOpcode5x(opcode);\n        case 0x06:\n            return handleOpcode6x(opcode);\n        case 0x07:\n            return handleOpcode7x(opcode);\n        case 0x08:\n            return handleOpcode8x(opcode);\n        case 0x09:\n            return handleOpcode9x(opcode);\n        case 0x0a:\n            return handleOpcodeAx(opcode);\n        case 0x0b:\n            return handleOpcodeBx(opcode);\n        case 0x0c:\n            return handleOpcodeCx(opcode);\n        case 0x0d:\n            return handleOpcodeDx(opcode);\n        case 0x0e:\n            return handleOpcodeEx(opcode);\n        default:\n            return handleOpcodeFx(opcode);\n    }\n}\n// Wrapper functions around loading and storing memory, and syncing those cycles\nfunction eightBitLoadSyncCycles(gameboyOffset) {\n    syncCycles(4);\n    return eightBitLoadFromGBMemoryWithTraps(gameboyOffset);\n}\nfunction eightBitStoreSyncCycles(gameboyOffset, value) {\n    syncCycles(4);\n    eightBitStoreIntoGBMemoryWithTraps(gameboyOffset, value);\n}\nfunction sixteenBitLoadSyncCycles(gameboyOffset) {\n    syncCycles(8);\n    // sixteen bit load has traps even though it has no label\n    return sixteenBitLoadFromGBMemory(gameboyOffset);\n}\nfunction sixteenBitStoreSyncCycles(gameboyOffset, value) {\n    syncCycles(8);\n    sixteenBitStoreIntoGBMemoryWithTraps(gameboyOffset, value);\n}\n// Functions to access the next operands of a opcode, reffering to them as \"dataBytes\"\nfunction getDataByteOne() {\n    syncCycles(4);\n    return eightBitLoadFromGBMemory(Cpu.programCounter);\n}\nfunction getDataByteTwo() {\n    syncCycles(4);\n    return eightBitLoadFromGBMemory(u16Portable(Cpu.programCounter + 1));\n}\n// Get our concatenated databyte one and getDataByteTwo()\n// Find and replace with : getConcatenatedDataByte()\nfunction getConcatenatedDataByte() {\n    return concatenateBytes(getDataByteTwo(), getDataByteOne());\n}\nfunction handleOpcode0x(opcode) {\n    switch (opcode) {\n        case 0x00:\n            // NOP\n            // 1  4\n            // No Operation\n            return 4;\n        case 0x01: {\n            // LD BC,d16\n            // 3  12\n            // 8 cycles\n            var concatenatedDataByte = getConcatenatedDataByte();\n            Cpu.registerB = splitHighByte(concatenatedDataByte);\n            Cpu.registerC = splitLowByte(concatenatedDataByte);\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n            return 4;\n        }\n        case 0x02: {\n            // LD (BC),A\n            // 1  8\n            // () means load into address pointed by BC\n            // 4 cycles\n            eightBitStoreSyncCycles(concatenateBytes(Cpu.registerB, Cpu.registerC), Cpu.registerA);\n            return 4;\n        }\n        case 0x03: {\n            // INC BC\n            // 1  8\n            var registerBC3 = concatenateBytes(Cpu.registerB, Cpu.registerC);\n            registerBC3++;\n            Cpu.registerB = splitHighByte(registerBC3);\n            Cpu.registerC = splitLowByte(registerBC3);\n            return 8;\n        }\n        case 0x04: {\n            // INC B\n            // 1  4\n            // Z 0 H -\n            var registerB = Cpu.registerB;\n            checkAndSetEightBitHalfCarryFlag(registerB, 1);\n            registerB = u8Portable(registerB + 1);\n            Cpu.registerB = registerB;\n            setZeroFlag$$1((registerB === 0));\n            setSubtractFlag(0);\n            return 4;\n        }\n        case 0x05: {\n            // DEC B\n            // 1  4\n            // Z 1 H -\n            var registerB = Cpu.registerB;\n            checkAndSetEightBitHalfCarryFlag(registerB, -1);\n            registerB = u8Portable(registerB - 1);\n            Cpu.registerB = registerB;\n            setZeroFlag$$1((registerB === 0));\n            setSubtractFlag(1);\n            return 4;\n        }\n        case 0x06: {\n            // LD B,d8\n            // 2  8\n            // 4 cycles\n            Cpu.registerB = getDataByteOne();\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0x07: {\n            // RLCA\n            // 1  4\n            // 0 0 0 C\n            // Check for the carry\n            var registerA = Cpu.registerA;\n            setCarryFlag(((registerA & 0x80) === 0x80));\n            Cpu.registerA = rotateByteLeft(registerA);\n            // Set all other flags to zero\n            setZeroFlag$$1(0);\n            setSubtractFlag(0);\n            setHalfCarryFlag(0);\n            return 4;\n        }\n        case 0x08: {\n            // LD (a16),SP\n            // 3  20\n            // Load the stack pointer into the 16 bit address represented by the two data bytes\n            // 16 cycles, 8 from data byte, 8 from sixteenbit store\n            sixteenBitStoreSyncCycles(getConcatenatedDataByte(), Cpu.stackPointer);\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n            return 4;\n        }\n        case 0x09: {\n            // ADD HL,BC\n            // 1 8\n            // - 0 H C\n            var registerHL = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            var registerBC9 = concatenateBytes(Cpu.registerB, Cpu.registerC);\n            checkAndSetSixteenBitFlagsAddOverflow(registerHL, registerBC9, false);\n            var result = u16Portable((registerHL + registerBC9));\n            Cpu.registerH = splitHighByte(result);\n            Cpu.registerL = splitLowByte(result);\n            setSubtractFlag(0);\n            return 8;\n        }\n        case 0x0a: {\n            // LD A,(BC)\n            // 1 8\n            // 4 cycles from load\n            Cpu.registerA = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerB, Cpu.registerC));\n            return 4;\n        }\n        case 0x0b: {\n            // DEC BC\n            // 1  8\n            var registerBCB = concatenateBytes(Cpu.registerB, Cpu.registerC);\n            registerBCB = u16Portable(registerBCB - 1);\n            Cpu.registerB = splitHighByte(registerBCB);\n            Cpu.registerC = splitLowByte(registerBCB);\n            return 8;\n        }\n        case 0x0c: {\n            // INC C\n            // 1  4\n            // Z 0 H -\n            var registerC = Cpu.registerC;\n            checkAndSetEightBitHalfCarryFlag(registerC, 1);\n            registerC = u8Portable(registerC + 1);\n            Cpu.registerC = registerC;\n            setZeroFlag$$1((registerC === 0));\n            setSubtractFlag(0);\n            return 4;\n        }\n        case 0x0d: {\n            // DEC C\n            // 1  4\n            // Z 1 H -\n            var registerC = Cpu.registerC;\n            checkAndSetEightBitHalfCarryFlag(registerC, -1);\n            registerC = u8Portable(registerC - 1);\n            Cpu.registerC = registerC;\n            setZeroFlag$$1((registerC === 0));\n            setSubtractFlag(1);\n            return 4;\n        }\n        case 0x0e: {\n            // LD C,d8\n            // 2 8\n            // 4 cycles\n            Cpu.registerC = getDataByteOne();\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0x0f: {\n            // RRCA\n            // 1 4\n            // 0 0 0 C\n            // Check for the last bit, to see if it will be carried\n            var registerA = Cpu.registerA;\n            setCarryFlag(((registerA & 0x01) > 0));\n            Cpu.registerA = rotateByteRight(registerA);\n            // Set all other flags to zero\n            setZeroFlag$$1(0);\n            setSubtractFlag(0);\n            setHalfCarryFlag(0);\n            return 4;\n        }\n    }\n    return -1;\n}\nfunction handleOpcode1x(opcode) {\n    switch (opcode) {\n        case 0x10: {\n            // STOP 0\n            // 2 4\n            // Enter CPU very low power mode. Also used to switch between double and normal speed CPU modes in GBC.\n            // Meaning Don't Decode anymore opcodes , or updated the LCD until joypad interrupt (or when button is pressed if I am wrong)\n            // See HALT\n            // If we are in gameboy color mode, set the new speed\n            if (Cpu.GBCEnabled) {\n                // 4 cycles\n                var speedSwitch = eightBitLoadSyncCycles(Cpu.memoryLocationSpeedSwitch);\n                if (checkBitOnByte(0, speedSwitch)) {\n                    // Reset the prepare bit\n                    speedSwitch = resetBitOnByte(0, speedSwitch);\n                    // Switch to the new mode, and set the speed switch to the OTHER speed, to represent our new speed\n                    if (!checkBitOnByte(7, speedSwitch)) {\n                        Cpu.GBCDoubleSpeed = true;\n                        speedSwitch = setBitOnByte(7, speedSwitch);\n                    }\n                    else {\n                        Cpu.GBCDoubleSpeed = false;\n                        speedSwitch = resetBitOnByte(7, speedSwitch);\n                    }\n                    // Store the final speed switch\n                    // 4 cycles\n                    eightBitStoreSyncCycles(Cpu.memoryLocationSpeedSwitch, speedSwitch);\n                    // Cycle accurate gameboy docs says this takes 76 clocks\n                    // 76 - 8 cycles (from load/store) = 68\n                    return 68;\n                }\n            }\n            // NOTE: This breaks Blarggs CPU tests if CGB Stop is not implemented\n            Cpu.isStopped = true;\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0x11: {\n            // LD DE,d16\n            // 3  12\n            // 8 cycles\n            var concatenatedDataByte = getConcatenatedDataByte();\n            Cpu.registerD = splitHighByte(concatenatedDataByte);\n            Cpu.registerE = splitLowByte(concatenatedDataByte);\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n            return 4;\n        }\n        case 0x12: {\n            // LD (DE),A\n            // 1 8\n            // 4 cycles\n            eightBitStoreSyncCycles(concatenateBytes(Cpu.registerD, Cpu.registerE), Cpu.registerA);\n            return 4;\n        }\n        case 0x13: {\n            // INC DE\n            // 1 8\n            var registerDE3 = concatenateBytes(Cpu.registerD, Cpu.registerE);\n            registerDE3 = u16Portable(registerDE3 + 1);\n            Cpu.registerD = splitHighByte(registerDE3);\n            Cpu.registerE = splitLowByte(registerDE3);\n            return 8;\n        }\n        case 0x14: {\n            // INC D\n            // 1  4\n            // Z 0 H -\n            var registerD = Cpu.registerD;\n            checkAndSetEightBitHalfCarryFlag(registerD, 1);\n            registerD = u8Portable(registerD + 1);\n            Cpu.registerD = registerD;\n            setZeroFlag$$1((Cpu.registerD === 0));\n            setSubtractFlag(0);\n            return 4;\n        }\n        case 0x15: {\n            // DEC D\n            // 1  4\n            // Z 1 H -\n            var registerD = Cpu.registerD;\n            checkAndSetEightBitHalfCarryFlag(registerD, -1);\n            registerD = u8Portable(registerD - 1);\n            Cpu.registerD = registerD;\n            setZeroFlag$$1((Cpu.registerD === 0));\n            setSubtractFlag(1);\n            return 4;\n        }\n        case 0x16: {\n            // LD D,d8\n            // 2 8\n            // 4 cycles\n            Cpu.registerD = getDataByteOne();\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0x17: {\n            // RLA\n            // 1 4\n            // 0 0 0 C\n            // Check for the carry\n            // setting has first bit since we need to use carry\n            var hasHighbit = (Cpu.registerA & 0x80) === 0x80;\n            Cpu.registerA = rotateByteLeftThroughCarry(Cpu.registerA);\n            // OR the carry flag to the end\n            setCarryFlag(hasHighbit);\n            // Set all other flags to zero\n            setZeroFlag$$1(0);\n            setSubtractFlag(0);\n            setHalfCarryFlag(0);\n            return 4;\n        }\n        case 0x18: {\n            // JR r8\n            // 2  12\n            // NOTE: Discoved dataByte is signed\n            // However the relative Jump Function handles this\n            // 4 cycles\n            relativeJump(getDataByteOne());\n            return 8;\n        }\n        // Relative Jump Function Handles program counter\n        case 0x19: {\n            // ADD HL,DE\n            // 1  8\n            // - 0 H C\n            var registerHL = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            var registerDE9 = concatenateBytes(Cpu.registerD, Cpu.registerE);\n            checkAndSetSixteenBitFlagsAddOverflow(registerHL, registerDE9, false);\n            var result = u16Portable((registerHL + registerDE9));\n            Cpu.registerH = splitHighByte(result);\n            Cpu.registerL = splitLowByte(result);\n            setSubtractFlag(0);\n            return 8;\n        }\n        case 0x1a: {\n            // LD A,(DE)\n            // 1 8\n            var registerDEA = concatenateBytes(Cpu.registerD, Cpu.registerE);\n            // 4 cycles\n            Cpu.registerA = eightBitLoadSyncCycles(registerDEA);\n            return 4;\n        }\n        case 0x1b: {\n            // DEC DE\n            // 1 8\n            var registerDEB = concatenateBytes(Cpu.registerD, Cpu.registerE);\n            registerDEB = u16Portable(registerDEB - 1);\n            Cpu.registerD = splitHighByte(registerDEB);\n            Cpu.registerE = splitLowByte(registerDEB);\n            return 8;\n        }\n        case 0x1c: {\n            // INC E\n            // 1  4\n            // Z 0 H -\n            var registerE = Cpu.registerE;\n            checkAndSetEightBitHalfCarryFlag(registerE, 1);\n            registerE = u8Portable(registerE + 1);\n            Cpu.registerE = registerE;\n            setZeroFlag$$1((registerE === 0));\n            setSubtractFlag(0);\n            return 4;\n        }\n        case 0x1d: {\n            // DEC E\n            // 1  4\n            // Z 1 H -\n            var registerE = Cpu.registerE;\n            checkAndSetEightBitHalfCarryFlag(registerE, -1);\n            registerE = u8Portable(registerE - 1);\n            Cpu.registerE = registerE;\n            setZeroFlag$$1((registerE === 0));\n            setSubtractFlag(1);\n            return 4;\n        }\n        case 0x1e: {\n            // LD E,d8\n            // 2 8\n            // 4 cycles\n            Cpu.registerE = getDataByteOne();\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0x1f: {\n            // RRA\n            // 1 4\n            // 0 0 0 C\n            // Check for the carry\n            // setting has low bit since we need to use carry\n            var hasLowBit = (Cpu.registerA & 0x01) === 0x01;\n            Cpu.registerA = rotateByteRightThroughCarry(Cpu.registerA);\n            setCarryFlag(hasLowBit);\n            // Set all other flags to zero\n            setZeroFlag$$1(0);\n            setSubtractFlag(0);\n            setHalfCarryFlag(0);\n            return 4;\n        }\n    }\n    return -1;\n}\nfunction handleOpcode2x(opcode) {\n    switch (opcode) {\n        case 0x20: {\n            // JR NZ,r8\n            // 2  12/8\n            // NOTE: NZ stands for not [flag], so in this case, not zero flag\n            // Also, / means, if condition. so if met, 12 cycles, otherwise 8 cycles\n            if (getZeroFlag$$1() === 0) {\n                // 4 cycles\n                relativeJump(getDataByteOne());\n                // Relative Jump Funciton handles program counter\n            }\n            else {\n                Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            }\n            return 8;\n        }\n        case 0x21: {\n            // LD HL,d16\n            // 3  12\n            // 8 cycles\n            var sixteenBitDataByte = getConcatenatedDataByte();\n            Cpu.registerH = splitHighByte(sixteenBitDataByte);\n            Cpu.registerL = splitLowByte(sixteenBitDataByte);\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n            return 4;\n        }\n        case 0x22: {\n            // LD (HL+),A\n            // 1 8\n            var registerHL2 = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            // 4 cycles\n            eightBitStoreSyncCycles(registerHL2, Cpu.registerA);\n            registerHL2 = u16Portable(registerHL2 + 1);\n            Cpu.registerH = splitHighByte(registerHL2);\n            Cpu.registerL = splitLowByte(registerHL2);\n            return 4;\n        }\n        case 0x23: {\n            // INC HL\n            // 1  8\n            var registerHL3 = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            registerHL3 = u16Portable(registerHL3 + 1);\n            Cpu.registerH = splitHighByte(registerHL3);\n            Cpu.registerL = splitLowByte(registerHL3);\n            return 8;\n        }\n        case 0x24: {\n            // INC H\n            // 1  4\n            // Z 0 H -\n            var registerH = Cpu.registerH;\n            checkAndSetEightBitHalfCarryFlag(registerH, 1);\n            registerH = u8Portable(registerH + 1);\n            Cpu.registerH = registerH;\n            setZeroFlag$$1((registerH === 0));\n            setSubtractFlag(0);\n            return 4;\n        }\n        case 0x25: {\n            // DEC H\n            // 1  4\n            // Z 1 H -\n            var registerH = Cpu.registerH;\n            checkAndSetEightBitHalfCarryFlag(registerH, -1);\n            registerH = u8Portable(registerH - 1);\n            Cpu.registerH = registerH;\n            setZeroFlag$$1((registerH === 0));\n            setSubtractFlag(1);\n            return 4;\n        }\n        case 0x26: {\n            // LD H,d8\n            // 2 8\n            // 4 cycles\n            Cpu.registerH = getDataByteOne();\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0x27: {\n            // DAA\n            // 1 4\n            // Z - 0 C\n            var adjustedRegister = 0;\n            var adjustment = 0;\n            if (getHalfCarryFlag() > 0) {\n                adjustment = adjustment | 0x06;\n            }\n            if (getCarryFlag$$1() > 0) {\n                adjustment = adjustment | 0x60;\n            }\n            var registerA = Cpu.registerA;\n            if (getSubtractFlag() > 0) {\n                adjustedRegister = u8Portable(registerA - adjustment);\n            }\n            else {\n                if ((registerA & 0x0f) > 0x09) {\n                    adjustment = adjustment | 0x06;\n                }\n                if (registerA > 0x99) {\n                    adjustment = adjustment | 0x60;\n                }\n                adjustedRegister = u8Portable(registerA + adjustment);\n            }\n            // Now set our flags to the correct values\n            setZeroFlag$$1((adjustedRegister === 0));\n            setCarryFlag(((adjustment & 0x60) !== 0));\n            setHalfCarryFlag(0);\n            Cpu.registerA = adjustedRegister;\n            return 4;\n        }\n        case 0x28: {\n            // JR Z,r8\n            // 2  12/8\n            if (getZeroFlag$$1() > 0) {\n                // 4 cycles\n                relativeJump(getDataByteOne());\n                // Relative Jump funciton handles pogram counter\n            }\n            else {\n                Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            }\n            return 8;\n        }\n        case 0x29: {\n            // ADD HL,HL\n            // 1  8\n            // - 0 H C\n            var registerHL9 = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            checkAndSetSixteenBitFlagsAddOverflow(registerHL9, registerHL9, false);\n            registerHL9 = u16Portable(registerHL9 * 2);\n            Cpu.registerH = splitHighByte(registerHL9);\n            Cpu.registerL = splitLowByte(registerHL9);\n            setSubtractFlag(0);\n            return 8;\n        }\n        case 0x2a: {\n            // LD A,(HL+)\n            // 1  8\n            var registerHLA = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            // 4 cycles\n            Cpu.registerA = eightBitLoadSyncCycles(registerHLA);\n            registerHLA = u16Portable(registerHLA + 1);\n            Cpu.registerH = splitHighByte(registerHLA);\n            Cpu.registerL = splitLowByte(registerHLA);\n            return 4;\n        }\n        case 0x2b: {\n            // DEC HL\n            // 1 8\n            var registerHLB = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            registerHLB = u16Portable(registerHLB - 1);\n            Cpu.registerH = splitHighByte(registerHLB);\n            Cpu.registerL = splitLowByte(registerHLB);\n            return 8;\n        }\n        case 0x2c: {\n            // INC L\n            // 1  4\n            // Z 0 H -\n            var registerL = Cpu.registerL;\n            checkAndSetEightBitHalfCarryFlag(registerL, 1);\n            registerL = u8Portable(registerL + 1);\n            Cpu.registerL = registerL;\n            setZeroFlag$$1((registerL === 0));\n            setSubtractFlag(0);\n            return 4;\n        }\n        case 0x2d: {\n            // DEC L\n            // 1  4\n            // Z 1 H -\n            var registerL = Cpu.registerL;\n            checkAndSetEightBitHalfCarryFlag(registerL, -1);\n            registerL = u8Portable(registerL - 1);\n            Cpu.registerL = registerL;\n            setZeroFlag$$1((registerL === 0));\n            setSubtractFlag(1);\n            return 4;\n        }\n        case 0x2e: {\n            // LD L,d8\n            // 2  8\n            // 4 cycles\n            Cpu.registerL = getDataByteOne();\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0x2f: {\n            // CPL\n            // 1 4\n            // - 1 1 -\n            Cpu.registerA = ~Cpu.registerA;\n            setSubtractFlag(1);\n            setHalfCarryFlag(1);\n            return 4;\n        }\n    }\n    return -1;\n}\nfunction handleOpcode3x(opcode) {\n    switch (opcode) {\n        case 0x30: {\n            // JR NC,r8\n            // 2 12 / 8\n            if (getCarryFlag$$1() === 0) {\n                // 4 cycles\n                relativeJump(getDataByteOne());\n                // Relative Jump function handles program counter\n            }\n            else {\n                Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            }\n            return 8;\n        }\n        case 0x31: {\n            // LD SP,d16\n            // 3 12\n            // 8 cycles\n            Cpu.stackPointer = getConcatenatedDataByte();\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n            return 4;\n        }\n        case 0x32: {\n            // LD (HL-),A\n            // 1 8\n            var registerHL2 = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            // 4 cycles\n            eightBitStoreSyncCycles(registerHL2, Cpu.registerA);\n            registerHL2 = u16Portable(registerHL2 - 1);\n            Cpu.registerH = splitHighByte(registerHL2);\n            Cpu.registerL = splitLowByte(registerHL2);\n            return 4;\n        }\n        case 0x33: {\n            // INC SP\n            // 1 8\n            Cpu.stackPointer = u16Portable(Cpu.stackPointer + 1);\n            return 8;\n        }\n        case 0x34: {\n            // INC (HL)\n            // 1  12\n            // Z 0 H -\n            var registerHL4 = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            // 4 cycles\n            var valueAtHL4 = eightBitLoadSyncCycles(registerHL4);\n            // Creating a varible for this to fix assemblyscript overflow bug\n            // Requires explicit casting\n            // https://github.com/AssemblyScript/assemblyscript/issues/26\n            var incrementer = 1;\n            checkAndSetEightBitHalfCarryFlag(valueAtHL4, incrementer);\n            valueAtHL4 = u8Portable(valueAtHL4 + incrementer);\n            setZeroFlag$$1((valueAtHL4 === 0));\n            setSubtractFlag(0);\n            // 4 cycles\n            eightBitStoreSyncCycles(registerHL4, valueAtHL4);\n            return 4;\n        }\n        case 0x35: {\n            // DEC (HL)\n            // 1  12\n            // Z 1 H -\n            var registerHL5 = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            // 4 cycles\n            var valueAtHL5 = eightBitLoadSyncCycles(registerHL5);\n            // NOTE: This opcode may not overflow correctly,\n            // Please see previous opcode\n            checkAndSetEightBitHalfCarryFlag(valueAtHL5, -1);\n            valueAtHL5 = u8Portable(valueAtHL5 - 1);\n            setZeroFlag$$1((valueAtHL5 === 0));\n            setSubtractFlag(1);\n            // 4 cycles\n            eightBitStoreSyncCycles(registerHL5, valueAtHL5);\n            return 4;\n        }\n        case 0x36: {\n            // LD (HL),d8\n            // 2  12\n            // 8 cycles, 4 from store, 4 from data byte\n            eightBitStoreSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL), getDataByteOne());\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0x37: {\n            // SCF\n            // 1  4\n            // - 0 0 1\n            // Simply set the carry flag\n            setSubtractFlag(0);\n            setHalfCarryFlag(0);\n            setCarryFlag(1);\n            return 4;\n        }\n        case 0x38: {\n            // JR C,r8\n            // 2 12/8\n            if (getCarryFlag$$1() === 1) {\n                // 4 cycles\n                relativeJump(getDataByteOne());\n                // Relative Jump Funciton handles program counter\n            }\n            else {\n                Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            }\n            return 8;\n        }\n        case 0x39: {\n            // ADD HL,SP\n            // 1 8\n            // - 0 H C\n            var registerHL9 = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            checkAndSetSixteenBitFlagsAddOverflow(registerHL9, Cpu.stackPointer, false);\n            var result = u16Portable((registerHL9 + Cpu.stackPointer));\n            Cpu.registerH = splitHighByte(result);\n            Cpu.registerL = splitLowByte(result);\n            setSubtractFlag(0);\n            return 8;\n        }\n        case 0x3a: {\n            // LD A,(HL-)\n            // 1 8\n            var registerHLA = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            // 4 cycles\n            Cpu.registerA = eightBitLoadSyncCycles(registerHLA);\n            registerHLA = u16Portable(registerHLA - 1);\n            Cpu.registerH = splitHighByte(registerHLA);\n            Cpu.registerL = splitLowByte(registerHLA);\n            return 4;\n        }\n        case 0x3b: {\n            // DEC SP\n            // 1 8\n            Cpu.stackPointer = u16Portable(Cpu.stackPointer - 1);\n            return 8;\n        }\n        case 0x3c: {\n            // INC A\n            // 1  4\n            // Z 0 H -\n            var registerA = Cpu.registerA;\n            checkAndSetEightBitHalfCarryFlag(registerA, 1);\n            registerA = u8Portable(registerA + 1);\n            Cpu.registerA = registerA;\n            setZeroFlag$$1((registerA === 0));\n            setSubtractFlag(0);\n            return 4;\n        }\n        case 0x3d: {\n            // DEC A\n            // 1  4\n            // Z 1 H -\n            var registerA = Cpu.registerA;\n            checkAndSetEightBitHalfCarryFlag(registerA, -1);\n            registerA = u8Portable(registerA - 1);\n            Cpu.registerA = registerA;\n            setZeroFlag$$1((registerA === 0));\n            setSubtractFlag(1);\n            return 4;\n        }\n        case 0x3e: {\n            // LD A,d8\n            // 2 8\n            // 4 cycles\n            Cpu.registerA = getDataByteOne();\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0x3f: {\n            // CCF\n            // 1 4\n            // - 0 0 C\n            setSubtractFlag(0);\n            setHalfCarryFlag(0);\n            setCarryFlag((getCarryFlag$$1() <= 0));\n            return 4;\n        }\n    }\n    return -1;\n}\nfunction handleOpcode4x(opcode) {\n    switch (opcode) {\n        case 0x40:\n            // LD B,B\n            // 1 4\n            // Load B into B, Do nothing\n            return 4;\n        case 0x41:\n            // LD B,C\n            // 1 4\n            Cpu.registerB = Cpu.registerC;\n            return 4;\n        case 0x42:\n            // LD B,D\n            // 1 4\n            Cpu.registerB = Cpu.registerD;\n            return 4;\n        case 0x43:\n            // LD B,E\n            // 1 4\n            Cpu.registerB = Cpu.registerE;\n            return 4;\n        case 0x44:\n            // LD B,H\n            // 1 4\n            Cpu.registerB = Cpu.registerH;\n            return 4;\n        case 0x45:\n            // LD B,L\n            // 1 4\n            Cpu.registerB = Cpu.registerL;\n            return 4;\n        case 0x46:\n            // LD B,(HL)\n            // 1 8\n            // 4 cycles\n            Cpu.registerB = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            return 4;\n        case 0x47:\n            // LD B,A\n            // 1 4\n            Cpu.registerB = Cpu.registerA;\n            return 4;\n        case 0x48:\n            // LD C,B\n            // 1 4\n            Cpu.registerC = Cpu.registerB;\n            return 4;\n        case 0x49:\n            // LD C,C\n            // 1 4\n            // Do nothing\n            return 4;\n        case 0x4a:\n            // LD C,D\n            // 1 4\n            Cpu.registerC = Cpu.registerD;\n            return 4;\n        case 0x4b:\n            // LD C,E\n            // 1 4\n            Cpu.registerC = Cpu.registerE;\n            return 4;\n        case 0x4c:\n            // LD C,H\n            // 1 4\n            Cpu.registerC = Cpu.registerH;\n            return 4;\n        case 0x4d:\n            // LD C,L\n            // 1 4\n            Cpu.registerC = Cpu.registerL;\n            return 4;\n        case 0x4e:\n            // LD C,(HL)\n            // 1 8\n            // 4 cycles\n            Cpu.registerC = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            return 4;\n        case 0x4f:\n            // LD C,A\n            // 1 4\n            Cpu.registerC = Cpu.registerA;\n            return 4;\n    }\n    return -1;\n}\nfunction handleOpcode5x(opcode) {\n    switch (opcode) {\n        case 0x50:\n            // LD D,B\n            // 1 4\n            Cpu.registerD = Cpu.registerB;\n            return 4;\n        case 0x51:\n            // LD D,C\n            // 1 4\n            Cpu.registerD = Cpu.registerC;\n            return 4;\n        case 0x52:\n            // LD D,D\n            // 1 4\n            // Do Nothing\n            return 4;\n        case 0x53:\n            // LD D,E\n            // 1 4\n            Cpu.registerD = Cpu.registerE;\n            return 4;\n        case 0x54:\n            // LD D,H\n            // 1 4\n            Cpu.registerD = Cpu.registerH;\n            return 4;\n        case 0x55:\n            // LD D,L\n            // 1 4\n            Cpu.registerD = Cpu.registerL;\n            return 4;\n        case 0x56:\n            // LD D,(HL)\n            // 1 8\n            // 4 cycles\n            Cpu.registerD = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            return 4;\n        case 0x57:\n            // LD D,A\n            // 1 4\n            Cpu.registerD = Cpu.registerA;\n            return 4;\n        case 0x58:\n            // LD E,B\n            // 1 4\n            Cpu.registerE = Cpu.registerB;\n            return 4;\n        case 0x59:\n            // LD E,C\n            // 1 4\n            Cpu.registerE = Cpu.registerC;\n            return 4;\n        case 0x5a:\n            // LD E,D\n            // 1 4\n            Cpu.registerE = Cpu.registerD;\n            return 4;\n        case 0x5b:\n            // LD E,E\n            // 1 4\n            // Do Nothing\n            return 4;\n        case 0x5c:\n            // LD E,H\n            // 1 4\n            Cpu.registerE = Cpu.registerH;\n            return 4;\n        case 0x5d:\n            // LD E,L\n            // 1 4\n            Cpu.registerE = Cpu.registerL;\n            return 4;\n        case 0x5e:\n            // LD E,(HL)\n            // 1 8\n            // 4 cycles\n            Cpu.registerE = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            return 4;\n        case 0x5f:\n            // LD E,A\n            // 1 4\n            Cpu.registerE = Cpu.registerA;\n            return 4;\n    }\n    return -1;\n}\nfunction handleOpcode6x(opcode) {\n    switch (opcode) {\n        case 0x60:\n            // LD H,B\n            // 1 4\n            Cpu.registerH = Cpu.registerB;\n            return 4;\n        case 0x61:\n            // LD H,C\n            // 1 4\n            Cpu.registerH = Cpu.registerC;\n            return 4;\n        case 0x62:\n            // LD H,D\n            // 1 4\n            Cpu.registerH = Cpu.registerD;\n            return 4;\n        case 0x63:\n            // LD H,E\n            // 1 4\n            Cpu.registerH = Cpu.registerE;\n            return 4;\n        case 0x64:\n            // LD H,H\n            // 1 4\n            Cpu.registerH = Cpu.registerH;\n            return 4;\n        case 0x65:\n            // LD H,L\n            // 1 4\n            Cpu.registerH = Cpu.registerL;\n            return 4;\n        case 0x66:\n            // LD H,(HL)\n            // 1 8\n            // 4 cycles\n            Cpu.registerH = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            return 4;\n        case 0x67:\n            // LD H,A\n            // 1 4\n            Cpu.registerH = Cpu.registerA;\n            return 4;\n        case 0x68:\n            // LD L,B\n            // 1 4\n            Cpu.registerL = Cpu.registerB;\n            return 4;\n        case 0x69:\n            // LD L,C\n            // 1 4\n            Cpu.registerL = Cpu.registerC;\n            return 4;\n        case 0x6a:\n            // LD L,D\n            // 1 4\n            Cpu.registerL = Cpu.registerD;\n            return 4;\n        case 0x6b:\n            // LD L,E\n            // 1 4\n            Cpu.registerL = Cpu.registerE;\n            return 4;\n        case 0x6c:\n            // LD L,H\n            // 1 4\n            Cpu.registerL = Cpu.registerH;\n            return 4;\n        case 0x6d:\n            // LD L,L\n            // 1 4\n            Cpu.registerL = Cpu.registerL;\n            return 4;\n        case 0x6e:\n            // LD L,(HL)\n            // 1 8\n            // 4 cycles\n            Cpu.registerL = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            return 4;\n        case 0x6f:\n            // LD L,A\n            // 1 4\n            Cpu.registerL = Cpu.registerA;\n            return 4;\n    }\n    return -1;\n}\nfunction handleOpcode7x(opcode) {\n    switch (opcode) {\n        case 0x70:\n            // LD (HL),B\n            // 1 8\n            // 4 cycles\n            eightBitStoreSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL), Cpu.registerB);\n            return 4;\n        case 0x71:\n            // LD (HL),C\n            // 1 8\n            // 4 cycles\n            eightBitStoreSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL), Cpu.registerC);\n            return 4;\n        case 0x72:\n            // LD (HL),D\n            // 1 8\n            // 4 cycles\n            eightBitStoreSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL), Cpu.registerD);\n            return 4;\n        case 0x73:\n            // LD (HL),E\n            // 1 8\n            // 4 cycles\n            eightBitStoreSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL), Cpu.registerE);\n            return 4;\n        case 0x74:\n            // LD (HL),H\n            // 1 8\n            // 4 cycles\n            eightBitStoreSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL), Cpu.registerH);\n            return 4;\n        case 0x75:\n            // LD (HL),L\n            // 1 8\n            // 4 cycles\n            eightBitStoreSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL), Cpu.registerL);\n            return 4;\n        case 0x76:\n            // HALT\n            // 1 4\n            // Enter CPU very low power mode\n            // Meaning Don't Decode anymore opcodes until an interrupt occurs\n            // Still need to do timers and things\n            // Can't Halt during an HDMA\n            // https://gist.github.com/drhelius/3394856\n            if (!Memory.isHblankHdmaActive) {\n                Cpu.enableHalt();\n            }\n            return 4;\n        case 0x77:\n            // LD (HL),A\n            // 1 8\n            // 4 cycles\n            eightBitStoreSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL), Cpu.registerA);\n            return 4;\n        case 0x78:\n            // LD A,B\n            // 1 4\n            Cpu.registerA = Cpu.registerB;\n            return 4;\n        case 0x79:\n            // LD A,C\n            // 1 4\n            Cpu.registerA = Cpu.registerC;\n            return 4;\n        case 0x7a:\n            // LD A,D\n            // 1 4\n            Cpu.registerA = Cpu.registerD;\n            return 4;\n        case 0x7b:\n            // LD A,E\n            // 1 4\n            Cpu.registerA = Cpu.registerE;\n            return 4;\n        case 0x7c:\n            // LD A,H\n            // 1 4\n            Cpu.registerA = Cpu.registerH;\n            return 4;\n        case 0x7d:\n            // LD A,L\n            // 1 4\n            Cpu.registerA = Cpu.registerL;\n            return 4;\n        case 0x7e:\n            // LD A,(HL)\n            // 1 8\n            // NOTE: Thanks to @binji for catching that this should be 8 cycles, not 4\n            // 4 cycles\n            Cpu.registerA = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            return 4;\n        case 0x7f:\n            // LD A,A\n            // 1 4\n            // Do Nothing\n            return 4;\n    }\n    return -1;\n}\nfunction handleOpcode8x(opcode) {\n    switch (opcode) {\n        case 0x80:\n            // ADD A,B\n            // 1 4\n            // Z 0 H C\n            addARegister(Cpu.registerB);\n            return 4;\n        case 0x81:\n            // ADD A,C\n            // 1 4\n            // Z 0 H C\n            addARegister(Cpu.registerC);\n            return 4;\n        case 0x82:\n            // ADD A,D\n            // 1 4\n            // Z 0 H C\n            addARegister(Cpu.registerD);\n            return 4;\n        case 0x83:\n            // ADD A,E\n            // 1 4\n            // Z 0 H C\n            addARegister(Cpu.registerE);\n            return 4;\n        case 0x84:\n            // ADD A,H\n            // 1 4\n            // Z 0 H C\n            addARegister(Cpu.registerH);\n            return 4;\n        case 0x85:\n            // ADD A,L\n            // 1 4\n            // Z 0 H C\n            addARegister(Cpu.registerL);\n            return 4;\n        case 0x86:\n            // ADD A,(HL)\n            // 1 8\n            // Z 0 H C\n            // 4 cycles\n            var valueAtHL6 = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            addARegister(valueAtHL6);\n            return 4;\n        case 0x87:\n            // ADD A,A\n            // 1 4\n            // Z 0 H C\n            addARegister(Cpu.registerA);\n            return 4;\n        case 0x88:\n            // ADC A,B\n            // 1 4\n            // Z 0 H C\n            addAThroughCarryRegister(Cpu.registerB);\n            return 4;\n        case 0x89:\n            // ADC A,C\n            // 1 4\n            // Z 0 H C\n            addAThroughCarryRegister(Cpu.registerC);\n            return 4;\n        case 0x8a:\n            // ADC A,D\n            // 1 4\n            // Z 0 H C\n            addAThroughCarryRegister(Cpu.registerD);\n            return 4;\n        case 0x8b:\n            // ADC A,E\n            // 1 4\n            // Z 0 H C\n            addAThroughCarryRegister(Cpu.registerE);\n            return 4;\n        case 0x8c:\n            // ADC A,H\n            // 1 4\n            // Z 0 H C\n            addAThroughCarryRegister(Cpu.registerH);\n            return 4;\n        case 0x8d:\n            // ADC A,L\n            // 1 4\n            // Z 0 H C\n            addAThroughCarryRegister(Cpu.registerL);\n            return 4;\n        case 0x8e:\n            // ADC A,(HL)\n            // 1 8\n            // Z 0 H C\n            // 4 cycles\n            var valueAtHLE = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            addAThroughCarryRegister(valueAtHLE);\n            return 4;\n        case 0x8f:\n            // ADC A,A\n            // 1 4\n            // Z 0 H C\n            addAThroughCarryRegister(Cpu.registerA);\n            return 4;\n    }\n    return -1;\n}\nfunction handleOpcode9x(opcode) {\n    switch (opcode) {\n        case 0x90:\n            // SUB B\n            // 1  4\n            // Z 1 H C\n            subARegister(Cpu.registerB);\n            return 4;\n        case 0x91:\n            // SUB C\n            // 1  4\n            // Z 1 H C\n            subARegister(Cpu.registerC);\n            return 4;\n        case 0x92:\n            // SUB D\n            // 1  4\n            // Z 1 H C\n            subARegister(Cpu.registerD);\n            return 4;\n        case 0x93:\n            // SUB E\n            // 1  4\n            // Z 1 H C\n            subARegister(Cpu.registerE);\n            return 4;\n        case 0x94:\n            // SUB H\n            // 1  4\n            // Z 1 H C\n            subARegister(Cpu.registerH);\n            return 4;\n        case 0x95:\n            // SUB L\n            // 1  4\n            // Z 1 H C\n            subARegister(Cpu.registerL);\n            return 4;\n        case 0x96:\n            // SUB (HL)\n            // 1  8\n            // Z 1 H C\n            // 4 cycles\n            var valueAtHL6 = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            subARegister(valueAtHL6);\n            return 4;\n        case 0x97:\n            // SUB A\n            // 1  4\n            // Z 1 H C\n            subARegister(Cpu.registerA);\n            return 4;\n        case 0x98:\n            // SBC A,B\n            // 1  4\n            // Z 1 H C\n            subAThroughCarryRegister(Cpu.registerB);\n            return 4;\n        case 0x99:\n            // SBC A,C\n            // 1  4\n            // Z 1 H C\n            subAThroughCarryRegister(Cpu.registerC);\n            return 4;\n        case 0x9a:\n            // SBC A,D\n            // 1  4\n            // Z 1 H C\n            subAThroughCarryRegister(Cpu.registerD);\n            return 4;\n        case 0x9b:\n            // SBC A,E\n            // 1  4\n            // Z 1 H C\n            subAThroughCarryRegister(Cpu.registerE);\n            return 4;\n        case 0x9c:\n            // SBC A,H\n            // 1  4\n            // Z 1 H C\n            subAThroughCarryRegister(Cpu.registerH);\n            return 4;\n        case 0x9d:\n            // SBC A,L\n            // 1  4\n            // Z 1 H C\n            subAThroughCarryRegister(Cpu.registerL);\n            return 4;\n        case 0x9e:\n            // SBC A,(HL)\n            // 1  8\n            // Z 1 H C\n            // 4 cycles\n            var valueAtHLE = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            subAThroughCarryRegister(valueAtHLE);\n            return 4;\n        case 0x9f:\n            // SBC A,A\n            // 1  4\n            // Z 1 H C\n            subAThroughCarryRegister(Cpu.registerA);\n            return 4;\n    }\n    return -1;\n}\nfunction handleOpcodeAx(opcode) {\n    switch (opcode) {\n        case 0xa0:\n            // AND B\n            // 1  4\n            // Z 0 1 0\n            andARegister(Cpu.registerB);\n            return 4;\n        case 0xa1:\n            // AND C\n            // 1  4\n            // Z 0 1 0\n            andARegister(Cpu.registerC);\n            return 4;\n        case 0xa2:\n            // AND D\n            // 1  4\n            // Z 0 1 0\n            andARegister(Cpu.registerD);\n            return 4;\n        case 0xa3:\n            // AND E\n            // 1  4\n            // Z 0 1 0\n            andARegister(Cpu.registerE);\n            return 4;\n        case 0xa4:\n            // AND H\n            // 1  4\n            // Z 0 1 0\n            andARegister(Cpu.registerH);\n            return 4;\n        case 0xa5:\n            // AND L\n            // 1  4\n            // Z 0 1 0\n            andARegister(Cpu.registerL);\n            return 4;\n        case 0xa6:\n            // AND (HL)\n            // 1  8\n            // Z 0 1 0\n            // 4 cycles\n            var valueAtHL6 = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            andARegister(valueAtHL6);\n            return 4;\n        case 0xa7:\n            // AND A\n            // 1  4\n            // Z 0 1 0\n            // NOTE: & Yourself, does nothing\n            andARegister(Cpu.registerA);\n            return 4;\n        case 0xa8:\n            // XOR B\n            // 1  4\n            // Z 0 0 0\n            xorARegister(Cpu.registerB);\n            return 4;\n        case 0xa9:\n            // XOR C\n            // 1  4\n            // Z 0 0 0\n            xorARegister(Cpu.registerC);\n            return 4;\n        case 0xaa:\n            // XOR D\n            // 1  4\n            // Z 0 0 0\n            xorARegister(Cpu.registerD);\n            return 4;\n        case 0xab:\n            // XOR E\n            // 1  4\n            // Z 0 0 0\n            xorARegister(Cpu.registerE);\n            return 4;\n        case 0xac:\n            // XOR H\n            // 1  4\n            // Z 0 0 0\n            xorARegister(Cpu.registerH);\n            return 4;\n        case 0xad:\n            // XOR L\n            // 1  4\n            // Z 0 0 0\n            xorARegister(Cpu.registerL);\n            return 4;\n        case 0xae:\n            // XOR (HL)\n            // 1  8\n            // Z 0 0 0\n            // 4 cycles\n            var valueAtHLE = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            xorARegister(valueAtHLE);\n            return 4;\n        case 0xaf:\n            // XOR A\n            // 1  4\n            // Z 0 0 0\n            xorARegister(Cpu.registerA);\n            return 4;\n    }\n    return -1;\n}\nfunction handleOpcodeBx(opcode) {\n    switch (opcode) {\n        case 0xb0:\n            // OR B\n            // 1  4\n            // Z 0 0 0\n            orARegister(Cpu.registerB);\n            return 4;\n        case 0xb1:\n            // OR C\n            // 1  4\n            // Z 0 0 0\n            orARegister(Cpu.registerC);\n            return 4;\n        case 0xb2:\n            // OR D\n            // 1  4\n            // Z 0 0 0\n            orARegister(Cpu.registerD);\n            return 4;\n        case 0xb3:\n            // OR E\n            // 1  4\n            // Z 0 0 0\n            orARegister(Cpu.registerE);\n            return 4;\n        case 0xb4:\n            // OR H\n            // 1  4\n            // Z 0 0 0\n            orARegister(Cpu.registerH);\n            return 4;\n        case 0xb5:\n            // OR L\n            // 1  4\n            // Z 0 0 0\n            orARegister(Cpu.registerL);\n            return 4;\n        case 0xb6:\n            // OR (HL)\n            // 1  8\n            // Z 0 0 0\n            // 4 cycles\n            var valueAtHL6 = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            orARegister(valueAtHL6);\n            return 4;\n        case 0xb7:\n            // OR A\n            // 1  4\n            // Z 0 0 0\n            orARegister(Cpu.registerA);\n            return 4;\n        case 0xb8:\n            // CP B\n            // 1  4\n            // Z 1 H C\n            cpARegister(Cpu.registerB);\n            return 4;\n        case 0xb9:\n            // CP C\n            // 1  4\n            // Z 1 H C\n            cpARegister(Cpu.registerC);\n            return 4;\n        case 0xba:\n            // CP D\n            // 1  4\n            // Z 1 H C\n            cpARegister(Cpu.registerD);\n            return 4;\n        case 0xbb:\n            // CP E\n            // 1  4\n            // Z 1 H C\n            cpARegister(Cpu.registerE);\n            return 4;\n        case 0xbc:\n            // CP H\n            // 1  4\n            // Z 1 H C\n            cpARegister(Cpu.registerH);\n            return 4;\n        case 0xbd:\n            // CP L\n            // 1  4\n            // Z 1 H C\n            cpARegister(Cpu.registerL);\n            return 4;\n        case 0xbe:\n            // CP (HL)\n            // 1  8\n            // Z 1 H C\n            // 4 cycles\n            var valueAtHLE = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            cpARegister(valueAtHLE);\n            return 4;\n        case 0xbf:\n            // CP A\n            // 1  4\n            // Z 1 H C\n            cpARegister(Cpu.registerA);\n            return 4;\n    }\n    return -1;\n}\nfunction handleOpcodeCx(opcode) {\n    switch (opcode) {\n        case 0xc0: {\n            // RET NZ\n            // 1  20/8\n            if (getZeroFlag$$1() === 0) {\n                // 8 cycles\n                var stackPointer = Cpu.stackPointer;\n                Cpu.programCounter = sixteenBitLoadSyncCycles(stackPointer);\n                Cpu.stackPointer = u16Portable(stackPointer + 2);\n                return 12;\n            }\n            else {\n                return 8;\n            }\n        }\n        case 0xc1: {\n            // POP BC\n            // 1  12\n            // 8 cycles\n            var registerBC1 = sixteenBitLoadSyncCycles(Cpu.stackPointer);\n            Cpu.stackPointer = u16Portable(Cpu.stackPointer + 2);\n            Cpu.registerB = splitHighByte(registerBC1);\n            Cpu.registerC = splitLowByte(registerBC1);\n            return 4;\n        }\n        case 0xc2: {\n            // JP NZ,a16\n            // 3  16/12\n            if (getZeroFlag$$1() === 0) {\n                // 8 cycles\n                Cpu.programCounter = getConcatenatedDataByte();\n                return 8;\n            }\n            else {\n                Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n                return 12;\n            }\n        }\n        case 0xc3: {\n            // JP a16\n            // 3  16\n            // 8 cycles\n            Cpu.programCounter = getConcatenatedDataByte();\n            return 8;\n        }\n        case 0xc4: {\n            // CALL NZ,a16\n            // 3  24/12\n            if (getZeroFlag$$1() === 0) {\n                var stackPointer = u16Portable(Cpu.stackPointer - 2);\n                Cpu.stackPointer = stackPointer;\n                // 8 cycles\n                sixteenBitStoreSyncCycles(stackPointer, u16Portable(Cpu.programCounter + 2));\n                // 8 cycles\n                Cpu.programCounter = getConcatenatedDataByte();\n                return 8;\n            }\n            else {\n                Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n                return 12;\n            }\n        }\n        case 0xc5: {\n            // PUSH BC\n            // 1  16\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, concatenateBytes(Cpu.registerB, Cpu.registerC));\n            return 8;\n        }\n        case 0xc6: {\n            // ADD A,d8\n            // 2 8\n            // Z 0 H C\n            // 4 cycles\n            addARegister(getDataByteOne());\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0xc7: {\n            // RST 00H\n            // 1 16\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, Cpu.programCounter);\n            Cpu.programCounter = 0x00;\n            return 8;\n        }\n        case 0xc8: {\n            // RET Z\n            // 1  20/8\n            if (getZeroFlag$$1() === 1) {\n                // 8 cycles\n                var stackPointer = Cpu.stackPointer;\n                Cpu.programCounter = sixteenBitLoadSyncCycles(stackPointer);\n                Cpu.stackPointer = u16Portable(stackPointer + 2);\n                return 12;\n            }\n            else {\n                return 8;\n            }\n        }\n        case 0xc9: {\n            // RET\n            // 1 16\n            // 8 cycles\n            var stackPointer = Cpu.stackPointer;\n            Cpu.programCounter = sixteenBitLoadSyncCycles(stackPointer);\n            Cpu.stackPointer = u16Portable(stackPointer + 2);\n            return 8;\n        }\n        case 0xca: {\n            // JP Z,a16\n            // 3 16/12\n            if (getZeroFlag$$1() === 1) {\n                // 8 cycles\n                Cpu.programCounter = getConcatenatedDataByte();\n                return 8;\n            }\n            else {\n                Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n                return 12;\n            }\n        }\n        case 0xcb: {\n            // PREFIX CB\n            // 1  4\n            // 4 cycles\n            var cbCycles = handleCbOpcode(getDataByteOne());\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return cbCycles;\n        }\n        case 0xcc: {\n            // CALL Z,a16\n            // 3  24/12\n            if (getZeroFlag$$1() === 1) {\n                var stackPointer = u16Portable(Cpu.stackPointer - 2);\n                Cpu.stackPointer = stackPointer;\n                // 8 cycles\n                sixteenBitStoreSyncCycles(stackPointer, Cpu.programCounter + 2);\n                // 8 cycles\n                Cpu.programCounter = getConcatenatedDataByte();\n                return 8;\n            }\n            else {\n                Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n                return 12;\n            }\n        }\n        case 0xcd: {\n            // CALL a16\n            // 3  24\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, u16Portable(Cpu.programCounter + 2));\n            // 8 cycles\n            Cpu.programCounter = getConcatenatedDataByte();\n            return 8;\n        }\n        case 0xce: {\n            // ADC A,d8\n            // 2  8\n            // Z 0 H C\n            // 4 cycles\n            addAThroughCarryRegister(getDataByteOne());\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0xcf: {\n            // RST 08H\n            // 1 16\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, Cpu.programCounter);\n            Cpu.programCounter = 0x08;\n            return 8;\n        }\n    }\n    return -1;\n}\nfunction handleOpcodeDx(opcode) {\n    switch (opcode) {\n        case 0xd0: {\n            // RET NC\n            // 1  20/8\n            if (getCarryFlag$$1() === 0) {\n                // 8 cycles\n                var stackPointer = Cpu.stackPointer;\n                Cpu.programCounter = sixteenBitLoadSyncCycles(stackPointer);\n                Cpu.stackPointer = u16Portable(stackPointer + 2);\n                return 12;\n            }\n            else {\n                return 8;\n            }\n        }\n        case 0xd1: {\n            // POP DE\n            // 1  12\n            // 8 cycles\n            var stackPointer = Cpu.stackPointer;\n            var registerDE1 = sixteenBitLoadSyncCycles(stackPointer);\n            Cpu.stackPointer = u16Portable(stackPointer + 2);\n            Cpu.registerD = splitHighByte(registerDE1);\n            Cpu.registerE = splitLowByte(registerDE1);\n            return 4;\n        }\n        case 0xd2: {\n            // JP NC,a16\n            // 3  16/12\n            if (getCarryFlag$$1() === 0) {\n                // 8 cycles\n                Cpu.programCounter = getConcatenatedDataByte();\n                return 8;\n            }\n            else {\n                Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n                return 12;\n            }\n        }\n        /* No Opcode for: 0xD3 */\n        case 0xd4: {\n            // CALL NC,a16\n            // 3  24/12\n            if (getCarryFlag$$1() === 0) {\n                var stackPointer = u16Portable(Cpu.stackPointer - 2);\n                Cpu.stackPointer = stackPointer;\n                // 8 cycles\n                sixteenBitStoreSyncCycles(stackPointer, Cpu.programCounter + 2);\n                // 8 cycles\n                Cpu.programCounter = getConcatenatedDataByte();\n                return 8;\n            }\n            else {\n                Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n                return 12;\n            }\n        }\n        case 0xd5: {\n            // PUSH DE\n            // 1 16\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, concatenateBytes(Cpu.registerD, Cpu.registerE));\n            return 8;\n        }\n        case 0xd6: {\n            // SUB d8\n            // 2  8\n            // Z 1 H C\n            // 4 cycles\n            subARegister(getDataByteOne());\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0xd7: {\n            // RST 10H\n            // 1 16\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, Cpu.programCounter);\n            Cpu.programCounter = 0x10;\n            return 8;\n        }\n        case 0xd8: {\n            // RET C\n            // 1  20/8\n            if (getCarryFlag$$1() === 1) {\n                var stackPointer = Cpu.stackPointer;\n                // 8 cycles\n                Cpu.programCounter = sixteenBitLoadSyncCycles(stackPointer);\n                Cpu.stackPointer = u16Portable(stackPointer + 2);\n                return 12;\n            }\n            else {\n                return 8;\n            }\n        }\n        case 0xd9: {\n            // RETI\n            // 1  16\n            var stackPointer = Cpu.stackPointer;\n            // 8 cycles\n            Cpu.programCounter = sixteenBitLoadSyncCycles(stackPointer);\n            // Enable interrupts\n            setInterrupts(true);\n            Cpu.stackPointer = u16Portable(stackPointer + 2);\n            return 8;\n        }\n        case 0xda: {\n            // JP C,a16\n            // 3 16/12\n            if (getCarryFlag$$1() === 1) {\n                // 8 cycles\n                Cpu.programCounter = getConcatenatedDataByte();\n                return 8;\n            }\n            else {\n                Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n                return 12;\n            }\n        }\n        /* No Opcode for: 0xDB */\n        case 0xdc: {\n            // CALL C,a16\n            // 3  24/12\n            if (getCarryFlag$$1() === 1) {\n                var stackPointer = u16Portable(Cpu.stackPointer - 2);\n                Cpu.stackPointer = stackPointer;\n                // 8 cycles\n                sixteenBitStoreSyncCycles(stackPointer, u16Portable(Cpu.programCounter + 2));\n                // 8 cycles\n                Cpu.programCounter = getConcatenatedDataByte();\n                return 8;\n            }\n            else {\n                Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n                return 12;\n            }\n        }\n        /* No Opcode for: 0xDD */\n        case 0xde: {\n            // SBC A,d8\n            // 2 8\n            // Z 1 H C\n            // 4 cycles\n            subAThroughCarryRegister(getDataByteOne());\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0xdf: {\n            // RST 18H\n            // 1 16\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, Cpu.programCounter);\n            Cpu.programCounter = 0x18;\n            return 8;\n        }\n    }\n    return -1;\n}\nfunction handleOpcodeEx(opcode) {\n    switch (opcode) {\n        case 0xe0: {\n            // LDH (a8),A\n            // 2  12\n            // Store value in high RAM ($FF00 + a8)\n            // 4 cycles\n            var largeDataByteOne = getDataByteOne();\n            // 4 cycles\n            eightBitStoreSyncCycles(0xff00 + largeDataByteOne, Cpu.registerA);\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0xe1: {\n            // POP HL\n            // 1  12\n            // 8 cycles\n            var stackPointer = Cpu.stackPointer;\n            var registerHL1 = sixteenBitLoadSyncCycles(stackPointer);\n            Cpu.stackPointer = u16Portable(stackPointer + 2);\n            Cpu.registerH = splitHighByte(registerHL1);\n            Cpu.registerL = splitLowByte(registerHL1);\n            return 4;\n        }\n        case 0xe2: {\n            // LD (C),A\n            // 1  8\n            // NOTE: Table says 2 Program counter,\n            // But stepping through the boot rom, should be one\n            // Also should change 0xF2\n            // Store value in high RAM ($FF00 + register c)\n            // 4 cycles\n            eightBitStoreSyncCycles(0xff00 + Cpu.registerC, Cpu.registerA);\n            return 4;\n        }\n        /* No Opcode for: 0xE3, 0xE4 */\n        case 0xe5: {\n            // PUSH HL\n            // 1 16\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, concatenateBytes(Cpu.registerH, Cpu.registerL));\n            return 8;\n        }\n        case 0xe6: {\n            // AND d8\n            // 2  8\n            // Z 0 1 0\n            // 4 cycles\n            andARegister(getDataByteOne());\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0xe7: {\n            // RST 20H\n            // 1 16\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, Cpu.programCounter);\n            Cpu.programCounter = 0x20;\n            return 8;\n        }\n        case 0xe8: {\n            // ADD SP, r8\n            // 2 16\n            // 0 0 H C\n            // NOTE: Discoved dataByte is signed\n            // 4 cycles\n            var signedDataByteOne = i8Portable(getDataByteOne());\n            checkAndSetSixteenBitFlagsAddOverflow(Cpu.stackPointer, signedDataByteOne, true);\n            Cpu.stackPointer = u16Portable(Cpu.stackPointer + signedDataByteOne);\n            setZeroFlag$$1(0);\n            setSubtractFlag(0);\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 12;\n        }\n        case 0xe9: {\n            // JP HL\n            // 1 4\n            Cpu.programCounter = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            return 4;\n        }\n        case 0xea: {\n            // LD (a16),A\n            // 3 16\n            // 12 cycles, 4 from store, 8 from concatenated data byte\n            eightBitStoreSyncCycles(getConcatenatedDataByte(), Cpu.registerA);\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n            return 4;\n        }\n        /* No Opcode for: 0xEB, 0xEC, 0xED */\n        case 0xee: {\n            // XOR d8\n            // 2 8\n            // Z 0 0 0\n            // 4 cycles\n            xorARegister(getDataByteOne());\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0xef: {\n            // RST 28H\n            // 1 16\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, Cpu.programCounter);\n            Cpu.programCounter = 0x28;\n            return 8;\n        }\n    }\n    return -1;\n}\nfunction handleOpcodeFx(opcode) {\n    switch (opcode) {\n        case 0xf0: {\n            // LDH A,(a8)\n            // 2 12\n            // 4 cycles\n            var largeDataByteOne = getDataByteOne();\n            // 4 cycles\n            Cpu.registerA = u8Portable(eightBitLoadSyncCycles(0xff00 + largeDataByteOne));\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0xf1: {\n            // POP AF\n            // 1 12\n            // Z N H C (But No work require, flags are already set)\n            // 8 cycles\n            var stackPointer = Cpu.stackPointer;\n            var registerAF1 = sixteenBitLoadSyncCycles(stackPointer);\n            Cpu.stackPointer = u16Portable(stackPointer + 2);\n            Cpu.registerA = splitHighByte(registerAF1);\n            Cpu.registerF = splitLowByte(registerAF1);\n            return 4;\n        }\n        case 0xf2: {\n            // LD A,(C)\n            // 1 8\n            // 4 cycles\n            Cpu.registerA = u8Portable(eightBitLoadSyncCycles(0xff00 + Cpu.registerC));\n            return 4;\n        }\n        case 0xf3: {\n            // DI\n            // 1 4\n            setInterrupts(false);\n            return 4;\n        }\n        /* No Opcode for: 0xF4 */\n        case 0xf5: {\n            // PUSH AF\n            // 1 16\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, concatenateBytes(Cpu.registerA, Cpu.registerF));\n            return 8;\n        }\n        case 0xf6: {\n            // OR d8\n            // 2 8\n            // Z 0 0 0\n            // 4 cycles\n            orARegister(getDataByteOne());\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0xf7: {\n            // RST 30H\n            // 1 16\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, Cpu.programCounter);\n            Cpu.programCounter = 0x30;\n            return 8;\n        }\n        case 0xf8: {\n            // LD HL,SP+r8\n            // 2 12\n            // 0 0 H C\n            // NOTE: Discoved dataByte is signed\n            // 4 cycles\n            var signedDataByteOne = i8Portable(getDataByteOne());\n            var stackPointer = Cpu.stackPointer;\n            // First, let's handle flags\n            setZeroFlag$$1(0);\n            setSubtractFlag(0);\n            checkAndSetSixteenBitFlagsAddOverflow(stackPointer, signedDataByteOne, true);\n            var registerHL = u16Portable(stackPointer + signedDataByteOne);\n            Cpu.registerH = splitHighByte(registerHL);\n            Cpu.registerL = splitLowByte(registerHL);\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 8;\n        }\n        case 0xf9: {\n            // LD SP,HL\n            // 1 8\n            Cpu.stackPointer = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            return 8;\n        }\n        case 0xfa: {\n            // LD A,(a16)\n            // 3 16\n            // 12 cycles, 4 from load, 8 from concatenated data byte\n            Cpu.registerA = eightBitLoadSyncCycles(getConcatenatedDataByte());\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n            return 4;\n        }\n        case 0xfb: {\n            // EI\n            // 1 4\n            setInterrupts(true);\n            return 4;\n        }\n        /* No Opcode for: 0xFC, 0xFD */\n        case 0xfe: {\n            // CP d8\n            // 2 8\n            // Z 1 H C\n            // 4 cycles\n            cpARegister(getDataByteOne());\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0xff: {\n            // RST 38H\n            // 1 16\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, Cpu.programCounter);\n            Cpu.programCounter = 0x38;\n            return 8;\n        }\n    }\n    return -1;\n}\n\n// NOTE: Code is very verbose, and will have some copy pasta'd lines.\n\n// Syncing and Tracking executed cycles\nvar Cycles = /** @class */ (function () {\n    function Cycles() {\n    }\n    // An even number below the max 32 bit integer\n    Cycles.cyclesPerCycleSet = 2000000000;\n    Cycles.cycleSets = 0;\n    Cycles.cycles = 0;\n    return Cycles;\n}());\nfunction getCyclesPerCycleSet() {\n    return Cycles.cyclesPerCycleSet;\n}\nfunction getCycleSets() {\n    return Cycles.cycleSets;\n}\nfunction getCycles() {\n    return Cycles.cycles;\n}\n// Inlined because closure compiler inlines\nfunction trackCyclesRan(numberOfCycles) {\n    var cycles = Cycles.cycles;\n    cycles += numberOfCycles;\n    if (cycles >= Cycles.cyclesPerCycleSet) {\n        Cycles.cycleSets += 1;\n        cycles -= Cycles.cyclesPerCycleSet;\n    }\n    Cycles.cycles = cycles;\n}\n// Inlined because closure compiler inlines\nfunction resetCycles() {\n    Cycles.cyclesPerCycleSet = 2000000000;\n    Cycles.cycleSets = 0;\n    Cycles.cycles = 0;\n}\n// Sync other GB Components with the number of cycles\nfunction syncCycles(numberOfCycles) {\n    // Check if we did a DMA TRansfer, if we did add the cycles\n    if (Memory.DMACycles > 0) {\n        numberOfCycles += Memory.DMACycles;\n        Memory.DMACycles = 0;\n    }\n    // Finally, Add our number of cycles to the CPU Cycles\n    Cpu.currentCycles += numberOfCycles;\n    // Check other Gameboy components\n    if (!Cpu.isStopped) {\n        if (Config.graphicsBatchProcessing) {\n            // Need to do this, since a lot of things depend on the scanline\n            // Batch processing will simply return if the number of cycles is too low\n            Graphics.currentCycles += numberOfCycles;\n            batchProcessGraphics();\n        }\n        else {\n            updateGraphics(numberOfCycles);\n        }\n        if (Config.audioBatchProcessing) {\n            Sound.currentCycles += numberOfCycles;\n            batchProcessAudio();\n        }\n        else {\n            updateSound(numberOfCycles);\n        }\n        updateSerial(numberOfCycles);\n    }\n    if (Config.timersBatchProcessing) {\n        // Batch processing will simply return if the number of cycles is too low\n        Timers.currentCycles += numberOfCycles;\n        batchProcessTimers();\n    }\n    else {\n        updateTimers(numberOfCycles);\n    }\n    trackCyclesRan(numberOfCycles);\n}\n\n// Functions involving executing/running the emulator after initializtion\nvar Execute = /** @class */ (function () {\n    function Execute() {\n    }\n    // An even number bewlow the max 32 bit integer\n    Execute.stepsPerStepSet = 2000000000;\n    Execute.stepSets = 0;\n    Execute.steps = 0;\n    // Response Codes from Execute Conditions\n    Execute.RESPONSE_CONDITION_ERROR = -1;\n    Execute.RESPONSE_CONDITION_FRAME = 0;\n    Execute.RESPONSE_CONDITION_AUDIO = 1;\n    Execute.RESPONSE_CONDITION_BREAKPOINT = 2;\n    return Execute;\n}());\nfunction getStepsPerStepSet() {\n    return Execute.stepsPerStepSet;\n}\nfunction getStepSets() {\n    return Execute.stepSets;\n}\nfunction getSteps() {\n    return Execute.steps;\n}\n// Inlined because closure compiler inlines\nfunction trackStepsRan(steps) {\n    var esteps = Execute.steps;\n    esteps += steps;\n    if (esteps >= Execute.stepsPerStepSet) {\n        Execute.stepSets += 1;\n        esteps -= Execute.stepsPerStepSet;\n    }\n    Execute.steps = esteps;\n}\n// Inlined because closure compiler inlines\nfunction resetSteps() {\n    Execute.stepsPerStepSet = 2000000000;\n    Execute.stepSets = 0;\n    Execute.steps = 0;\n}\n// // Public funciton to run frames until,\n// the specified number of frames have run or error.\n// Return values:\n// -1 = error\n// 0 = render a frame\nfunction executeMultipleFrames(numberOfFrames) {\n    var frameResponse = 0;\n    var framesRun = 0;\n    while (framesRun < numberOfFrames && frameResponse >= 0) {\n        frameResponse = executeFrame();\n        framesRun += 1;\n    }\n    if (frameResponse < 0) {\n        return frameResponse;\n    }\n    return 0;\n}\n// Public funciton to run opcodes until,\n// a frame is ready, or error.\n// Return values:\n// -1 = error\n// 0 = render a frame\nfunction executeFrame() {\n    return executeUntilCondition(true, -1);\n}\n// Public Function to run opcodes until,\n// a frame is ready, audio bufer is filled, or error\nfunction executeFrameAndCheckAudio(maxAudioBuffer) {\n    if (maxAudioBuffer === void 0) { maxAudioBuffer = 0; }\n    return executeUntilCondition(true, maxAudioBuffer);\n}\n// Base function that executes steps, and checks conditions\n// Return values:\nfunction executeUntilCondition(checkMaxCyclesPerFrame, maxAudioBuffer) {\n    if (checkMaxCyclesPerFrame === void 0) { checkMaxCyclesPerFrame = true; }\n    if (maxAudioBuffer === void 0) { maxAudioBuffer = -1; }\n    // Common tracking variables\n    var numberOfCycles = -1;\n    var audioBufferSize = 1024;\n    if (maxAudioBuffer > 0) {\n        audioBufferSize = maxAudioBuffer;\n    }\n    else if (maxAudioBuffer < 0) {\n        audioBufferSize = -1;\n    }\n    var errorCondition = false;\n    var frameCondition = false;\n    var audioBufferCondition = false;\n    while (!errorCondition && !frameCondition && !audioBufferCondition && !Breakpoints.reachedBreakpoint) {\n        numberOfCycles = executeStep();\n        // Error Condition\n        if (numberOfCycles < 0) {\n            errorCondition = true;\n        }\n        else if (Cpu.currentCycles >= Cpu.MAX_CYCLES_PER_FRAME()) {\n            frameCondition = true;\n        }\n        else if (audioBufferSize > -1 && getNumberOfSamplesInAudioBuffer() >= audioBufferSize) {\n            audioBufferCondition = true;\n        }\n    }\n    // Find our exit reason\n    if (frameCondition) {\n        // Render a frame\n        // Reset our currentCycles\n        Cpu.currentCycles -= Cpu.MAX_CYCLES_PER_FRAME();\n        return Execute.RESPONSE_CONDITION_FRAME;\n    }\n    if (audioBufferCondition) {\n        return Execute.RESPONSE_CONDITION_AUDIO;\n    }\n    if (Breakpoints.reachedBreakpoint) {\n        Breakpoints.reachedBreakpoint = false;\n        return Execute.RESPONSE_CONDITION_BREAKPOINT;\n    }\n    // TODO: Boot ROM handling\n    // There was an error, return -1, and push the program counter back to grab the error opcode\n    Cpu.programCounter = u16Portable(Cpu.programCounter - 1);\n    return -1;\n}\n// Function to execute an opcode, and update other gameboy hardware.\n// http://www.codeslinger.co.uk/pages/projects/gameboy/beginning.html\nfunction executeStep() {\n    // Set has started to 1 since we ran a emulation step\n    setHasCoreStarted(true);\n    // Check if we are in the halt bug\n    if (Cpu.isHaltBug) {\n        // Need to not increment program counter,\n        // thus, running the next opcode twice\n        // E.g\n        // 0x76 - halt\n        // FA 34 12 - ld a,(1234)\n        // Becomes\n        // FA FA 34 ld a,(34FA)\n        // 12 ld (de),a\n        var haltBugOpcode = eightBitLoadFromGBMemory(Cpu.programCounter);\n        // Execute opcode will handle the actual PC behavior\n        var haltBugCycles = executeOpcode$$1(haltBugOpcode);\n        syncCycles(haltBugCycles);\n        Cpu.exitHaltAndStop();\n    }\n    // Interrupts should be handled before reading an opcode\n    // https://github.com/Gekkio/mooneye-gb/blob/master/docs/accuracy.markdown#what-is-the-exact-timing-of-cpu-servicing-an-interrupt\n    var interruptCycles = checkInterrupts();\n    if (interruptCycles > 0) {\n        syncCycles(interruptCycles);\n    }\n    // Get the opcode, and additional bytes to be handled\n    // Number of cycles defaults to 4, because while we're halted, we run 4 cycles (according to matt :))\n    var numberOfCycles = 4;\n    var opcode = 0;\n    // If we are not halted or stopped, run instructions\n    // If we are halted, this will be skipped and just sync the 4 cycles\n    if (!Cpu.isHalted() && !Cpu.isStopped) {\n        opcode = eightBitLoadFromGBMemory(Cpu.programCounter);\n        numberOfCycles = executeOpcode$$1(opcode);\n    }\n    // blarggFixes, don't allow register F to have the bottom nibble\n    Cpu.registerF = Cpu.registerF & 0xf0;\n    // Check if there was an error decoding the opcode\n    if (numberOfCycles <= 0) {\n        return numberOfCycles;\n    }\n    // Sync other GB Components with the number of cycles\n    syncCycles(numberOfCycles);\n    // Update our steps\n    trackStepsRan(1);\n    // Check if we reached the CPU breakpoint\n    if (Cpu.programCounter === Breakpoints.programCounter) {\n        Breakpoints.reachedBreakpoint = true;\n    }\n    return numberOfCycles;\n}\n\n// Imports\n// Grow our memory to the specified size\nif (memory.size() < WASMBOY_WASM_PAGES) {\n    memory.grow(WASMBOY_WASM_PAGES - memory.size());\n}\n// Function to track if the core has started\nvar hasStarted = false;\nfunction setHasCoreStarted(value) {\n    hasStarted = value;\n}\nfunction hasCoreStarted() {\n    return hasStarted;\n}\n// Function to configure & initialize wasmboy\nfunction config(enableBootRom, useGbcWhenAvailable, audioBatchProcessing, graphicsBatchProcessing, timersBatchProcessing, graphicsDisableScanlineRendering, audioAccumulateSamples, tileRendering, tileCaching, enableAudioDebugging) {\n    // TODO: depending on the boot rom, initialization may be different\n    // From: http://www.codeslinger.co.uk/pages/projects/gameboy/hardware.html\n    // All values default to zero in memory, so not setting them yet\n    // log('initializing (includeBootRom=$0)', 1, enableBootRom);\n    Config.enableBootRom = enableBootRom > 0;\n    Config.useGbcWhenAvailable = useGbcWhenAvailable > 0;\n    Config.audioBatchProcessing = audioBatchProcessing > 0;\n    Config.graphicsBatchProcessing = graphicsBatchProcessing > 0;\n    Config.timersBatchProcessing = timersBatchProcessing > 0;\n    Config.graphicsDisableScanlineRendering = graphicsDisableScanlineRendering > 0;\n    Config.audioAccumulateSamples = audioAccumulateSamples > 0;\n    Config.tileRendering = tileRendering > 0;\n    Config.tileCaching = tileCaching > 0;\n    Config.enableAudioDebugging = enableAudioDebugging > 0;\n    initialize();\n}\n// Function to initiialize the core\nfunction initialize() {\n    // Initialization variables from BGB\n    // First, try to switch to Gameboy Color Mode\n    // Get our GBC support from the cartridge header\n    // http://gbdev.gg8.se/wiki/articles/The_Cartridge_Header\n    var gbcType = eightBitLoadFromGBMemory(0x0143);\n    // Detecting GBC http://bgb.bircd.org/pandocs.htm#cgbregisters\n    if (gbcType === 0xc0 || (Config.useGbcWhenAvailable && gbcType === 0x80)) {\n        Cpu.GBCEnabled = true;\n    }\n    else {\n        Cpu.GBCEnabled = false;\n    }\n    // Reset hasStarted, since we are now reset\n    setHasCoreStarted(false);\n    // Reset our cycles ran\n    resetCycles();\n    resetSteps();\n    if (Config.enableBootRom) {\n        Cpu.BootROMEnabled = true;\n    }\n    else {\n        Cpu.BootROMEnabled = false;\n    }\n    // Call our respective classes intialization\n    // NOTE: Boot ROM Only handles some initialization, thus we need to check in each one\n    // respecitvely :p\n    initializeCpu();\n    initializeCartridge();\n    initializeDma();\n    initializeGraphics();\n    initializePalette();\n    initializeSound();\n    initializeInterrupts();\n    initializeTimers();\n    initializeSerial();\n    initializeVarious();\n}\nfunction initializeVarious() {\n    // Various Other Registers\n    if (Cpu.GBCEnabled) {\n        // Various other registers\n        eightBitStoreIntoGBMemory(0xff70, 0xf8);\n        eightBitStoreIntoGBMemory(0xff4f, 0xfe);\n        eightBitStoreIntoGBMemory(0xff4d, 0x7e);\n        eightBitStoreIntoGBMemory(0xff00, 0xcf);\n        eightBitStoreIntoGBMemory(0xff0f, 0xe1);\n        // 0xFFFF = 0x00\n        // Undocumented from Pandocs\n        eightBitStoreIntoGBMemory(0xff6c, 0xfe);\n        eightBitStoreIntoGBMemory(0xff75, 0x8f);\n    }\n    else {\n        eightBitStoreIntoGBMemory(0xff70, 0xff);\n        eightBitStoreIntoGBMemory(0xff4f, 0xff);\n        eightBitStoreIntoGBMemory(0xff4d, 0xff);\n        eightBitStoreIntoGBMemory(0xff00, 0xcf);\n        eightBitStoreIntoGBMemory(0xff0f, 0xe1);\n        // 0xFFFF = 0x00\n    }\n}\n// Function to return if we are currently playing a GBC ROM\nfunction isGBC() {\n    return Cpu.GBCEnabled;\n}\n// Function to return an address to store into save state memory\n// this is to regulate our 20 slots\n// https://docs.google.com/spreadsheets/d/17xrEzJk5-sCB9J2mMJcVnzhbE-XH_NvczVSQH9OHvRk/edit?usp=sharing\n// Inlined because closure compiler inlines\nfunction getSaveStateMemoryOffset(offset, saveStateSlot) {\n    // 50 bytes per save state memory partiton sli32\n    return WASMBOY_STATE_LOCATION + offset + 50 * saveStateSlot;\n}\n// Function to save state to memory for all of our classes\nfunction saveState() {\n    Cpu.saveState();\n    Graphics.saveState();\n    Interrupts.saveState();\n    Joypad.saveState();\n    Memory.saveState();\n    Timers.saveState();\n    Sound.saveState();\n    Channel1.saveState();\n    Channel2.saveState();\n    Channel3.saveState();\n    Channel4.saveState();\n    // Reset hasStarted, since we are now reset\n    setHasCoreStarted(false);\n    // Don't want to reset cycles here, as this does not reset the emulator\n}\n// Function to load state from memory for all of our classes\nfunction loadState() {\n    Cpu.loadState();\n    Graphics.loadState();\n    Interrupts.loadState();\n    Joypad.loadState();\n    Memory.loadState();\n    Timers.loadState();\n    Sound.loadState();\n    Channel1.loadState();\n    Channel2.loadState();\n    Channel3.loadState();\n    Channel4.loadState();\n    // Reset hasStarted, since we are now reset\n    setHasCoreStarted(false);\n    // Reset our cycles ran\n    resetCycles();\n    resetSteps();\n}\n\n// Functions to get information about the emulator for debugging purposes\nfunction getRegisterA() {\n    return Cpu.registerA;\n}\nfunction getRegisterB() {\n    return Cpu.registerB;\n}\nfunction getRegisterC() {\n    return Cpu.registerC;\n}\nfunction getRegisterD() {\n    return Cpu.registerD;\n}\nfunction getRegisterE() {\n    return Cpu.registerE;\n}\nfunction getRegisterH() {\n    return Cpu.registerH;\n}\nfunction getRegisterL() {\n    return Cpu.registerL;\n}\nfunction getRegisterF() {\n    return Cpu.registerF;\n}\nfunction getProgramCounter() {\n    return Cpu.programCounter;\n}\nfunction getStackPointer() {\n    return Cpu.stackPointer;\n}\nfunction getOpcodeAtProgramCounter() {\n    return eightBitLoadFromGBMemory(Cpu.programCounter);\n}\n\n// Functions to debug graphical output\n// Some Simple internal getters\nfunction getLY() {\n    return Graphics.scanlineRegister;\n}\nfunction getScrollX() {\n    return Graphics.scrollX;\n}\nfunction getScrollY() {\n    return Graphics.scrollY;\n}\nfunction getWindowX() {\n    return Graphics.windowX;\n}\nfunction getWindowY() {\n    return Graphics.windowY;\n}\n// TODO: Render by tile, rather than by pixel\nfunction drawBackgroundMapToWasmMemory(showColor) {\n    // http://www.codeslinger.co.uk/pages/projects/gameboy/graphics.html\n    // Bit 7 - LCD Display Enable (0=Off, 1=On)\n    // Bit 6 - Window Tile Map Display Select (0=9800-9BFF, 1=9C00-9FFF)\n    // Bit 5 - Window Display Enable (0=Off, 1=On)\n    // Bit 4 - BG & Window Tile Data Select (0=8800-97FF, 1=8000-8FFF)\n    // Bit 3 - BG Tile Map Display Select (0=9800-9BFF, 1=9C00-9FFF)\n    // Bit 2 - OBJ (Sprite) Size (0=8x8, 1=8x16)\n    // Bit 1 - OBJ (Sprite) Display Enable (0=Off, 1=On)\n    // Bit 0 - BG Display (for CGB see below) (0=Off, 1=On)\n    // Get our seleted tile data memory location\n    var tileDataMemoryLocation = Graphics.memoryLocationTileDataSelectZeroStart;\n    if (Lcd.bgWindowTileDataSelect) {\n        tileDataMemoryLocation = Graphics.memoryLocationTileDataSelectOneStart;\n    }\n    var tileMapMemoryLocation = Graphics.memoryLocationTileMapSelectZeroStart;\n    if (Lcd.bgTileMapDisplaySelect) {\n        tileMapMemoryLocation = Graphics.memoryLocationTileMapSelectOneStart;\n    }\n    for (var y = 0; y < 256; y++) {\n        for (var x = 0; x < 256; x++) {\n            // Get our current Y\n            var pixelYPositionInMap = y;\n            // Get our Current X position of our pixel on the on the 160x144 camera\n            // this is done by getting the current scroll X position,\n            // and adding it do what X Value the scanline is drawing on the camera.\n            var pixelXPositionInMap = x;\n            // Divide our pixel position by 8 to get our tile.\n            // Since, there are 256x256 pixels, and 32x32 tiles.\n            // 256 / 8 = 32.\n            // Also, bitshifting by 3, do do a division by 8\n            // Need to use u16s, as they will be used to compute an address, which will cause weird errors and overflows\n            var tileXPositionInMap = pixelXPositionInMap >> 3;\n            var tileYPositionInMap = pixelYPositionInMap >> 3;\n            // Get our tile address on the tileMap\n            // NOTE: (tileMap represents where each tile is displayed on the screen)\n            // NOTE: (tile map represents the entire map, now just what is within the \"camera\")\n            // For instance, if we have y pixel 144. 144 / 8 = 18. 18 * 32 = line address in map memory.\n            // And we have x pixel 160. 160 / 8 = 20.\n            // * 32, because remember, this is NOT only for the camera, the actual map is 32x32. Therefore, the next tile line of the map, is 32 byte offset.\n            // Think like indexing a 2d array, as a 1d array and it make sense :)\n            var tileMapAddress = tileMapMemoryLocation + tileYPositionInMap * 32 + tileXPositionInMap;\n            // Get the tile Id on the Tile Map\n            var tileIdFromTileMap = loadFromVramBank(tileMapAddress, 0);\n            // Now get our tileDataAddress for the corresponding tileID we found in the map\n            // Read the comments in _getTileDataAddress() to see what's going on.\n            // tl;dr if we had the tile map of \"a b c d\", and wanted tileId 2.\n            // This funcitons returns the start of memory locaiton for the tile 'c'.\n            var tileDataAddress = getTileDataAddress(tileDataMemoryLocation, tileIdFromTileMap);\n            // Now we can process the the individual bytes that represent the pixel on a tile\n            // Get the y pixel of the 8 by 8 tile.\n            // Simply modulo the scanline.\n            // For instance, let's say we are printing the first line of pixels on our camera,\n            // And the first line of pixels on our tile.\n            // yPixel = 1. 1 % 8 = 1.\n            // And for the last line\n            // yPixel = 144. 144 % 8 = 0.\n            // 0 Represents last line of pixels in a tile, 1 represents first. 1 2 3 4 5 6 7 0.\n            // Because remember, we are counting lines on the display NOT including zero\n            var pixelYInTile = pixelYPositionInMap % 8;\n            // Same logic as pixelYInTile.\n            // However, We need to reverse our byte,\n            // As pixel 0 is on byte 7, and pixel 1 is on byte 6, etc...\n            // Therefore, is pixelX was 2, then really is need to be 5\n            // So 2 - 7 = -5, * 1 = 5\n            // Or to simplify, 7 - 2 = 5 haha!\n            var pixelXInTile = pixelXPositionInMap % 8;\n            pixelXInTile = 7 - pixelXInTile;\n            // Get the GB Map Attributes\n            // Bit 0-2  Background Palette number  (BGP0-7)\n            // Bit 3    Tile VRAM Bank number      (0=Bank 0, 1=Bank 1)\n            // Bit 4    Not used\n            // Bit 5    Horizontal Flip            (0=Normal, 1=Mirror horizontally)\n            // Bit 6    Vertical Flip              (0=Normal, 1=Mirror vertically)\n            // Bit 7    BG-to-OAM Priority         (0=Use OAM priority bit, 1=BG Priority)\n            var bgMapAttributes = 0;\n            if (Cpu.GBCEnabled && showColor > 0) {\n                bgMapAttributes = loadFromVramBank(tileMapAddress, 1);\n            }\n            if (checkBitOnByte(6, bgMapAttributes)) {\n                // We are mirroring the tile, therefore, we need to opposite byte\n                // So if our pizel was 0 our of 8, it wild become 7 :)\n                // TODO: This may be wrong :p\n                pixelYInTile = 7 - pixelYInTile;\n            }\n            // Remember to represent a single line of 8 pixels on a tile, we need two bytes.\n            // Therefore, we need to times our modulo by 2, to get the correct line of pixels on the tile.\n            // But we need to load the time from a specific Vram bank\n            var vramBankId = 0;\n            if (checkBitOnByte(3, bgMapAttributes)) {\n                vramBankId = 1;\n            }\n            // Remember to represent a single line of 8 pixels on a tile, we need two bytes.\n            // Therefore, we need to times our modulo by 2, to get the correct line of pixels on the tile.\n            // Again, think like you had to map a 2d array as a 1d.\n            var byteOneForLineOfTilePixels = loadFromVramBank(tileDataAddress + pixelYInTile * 2, vramBankId);\n            var byteTwoForLineOfTilePixels = loadFromVramBank(tileDataAddress + pixelYInTile * 2 + 1, vramBankId);\n            // Now we can get the color for that pixel\n            // Colors are represented by getting X position of ByteTwo, and X positon of Byte One\n            // To Get the color Id.\n            // For example, the result of the color id is 0000 00[xPixelByteTwo][xPixelByteOne]\n            // See: How to draw a tile/sprite from memory: http://www.codeslinger.co.uk/pages/projects/gameboy/graphics.html\n            var paletteColorId = 0;\n            if (checkBitOnByte(pixelXInTile, byteTwoForLineOfTilePixels)) {\n                // Byte one represents the second bit in our color id, so bit shift\n                paletteColorId += 1;\n                paletteColorId = paletteColorId << 1;\n            }\n            if (checkBitOnByte(pixelXInTile, byteOneForLineOfTilePixels)) {\n                paletteColorId += 1;\n            }\n            // FINALLY, RENDER THAT PIXEL!\n            var pixelStart = (y * 256 + x) * 3;\n            if (Cpu.GBCEnabled && showColor > 0) {\n                // Finally lets add some, C O L O R\n                // Want the botom 3 bits\n                var bgPalette = bgMapAttributes & 0x07;\n                // Call the helper function to grab the correct color from the palette\n                var rgbColorPalette = getRgbColorFromPalette(bgPalette, paletteColorId, false);\n                // Split off into red green and blue\n                var red = getColorComponentFromRgb(0, rgbColorPalette);\n                var green = getColorComponentFromRgb(1, rgbColorPalette);\n                var blue = getColorComponentFromRgb(2, rgbColorPalette);\n                var offset = BACKGROUND_MAP_LOCATION + pixelStart;\n                store(offset, red);\n                store(offset + 1, green);\n                store(offset + 2, blue);\n            }\n            else {\n                // Only rendering camera for now, so coordinates are for the camera.\n                // Get the rgb value for the color Id, will be repeated into R, G, B (if not colorized)\n                var hexColor = getColorizedGbHexColorFromPalette(paletteColorId, Graphics.memoryLocationBackgroundPalette);\n                var offset = BACKGROUND_MAP_LOCATION + pixelStart;\n                // Red\n                store(offset + 0, getRedFromHexColor(hexColor));\n                // Green\n                store(offset + 1, getGreenFromHexColor(hexColor));\n                // Blue\n                store(offset + 2, getBlueFromHexColor(hexColor));\n            }\n        }\n    }\n}\nfunction drawTileDataToWasmMemory() {\n    for (var tileDataMapGridY = 0; tileDataMapGridY < 0x17; tileDataMapGridY++) {\n        for (var tileDataMapGridX = 0; tileDataMapGridX < 0x1f; tileDataMapGridX++) {\n            // Get Our VramBankID\n            var vramBankId = 0;\n            if (tileDataMapGridX > 0x0f) {\n                vramBankId = 1;\n            }\n            // Get our tile ID\n            var tileId = tileDataMapGridY;\n            if (tileDataMapGridY > 0x0f) {\n                tileId -= 0x0f;\n            }\n            tileId = tileId << 4;\n            if (tileDataMapGridX > 0x0f) {\n                tileId = tileId + (tileDataMapGridX - 0x0f);\n            }\n            else {\n                tileId = tileId + tileDataMapGridX;\n            }\n            // Finally get our tile Data location\n            var tileDataMemoryLocation = Graphics.memoryLocationTileDataSelectOneStart;\n            if (tileDataMapGridY > 0x0f) {\n                tileDataMemoryLocation = Graphics.memoryLocationTileDataSelectZeroStart;\n            }\n            // Let's see if we have C O L O R\n            // Set the map and sprite attributes to -1\n            // Meaning, we will draw monochrome\n            var paletteLocation = Graphics.memoryLocationBackgroundPalette;\n            var bgMapAttributes = -1;\n            var spriteAttributes = -1;\n            // Let's see if the tile is being used by a sprite\n            for (var spriteRow = 0; spriteRow < 8; spriteRow++) {\n                for (var spriteColumn = 0; spriteColumn < 5; spriteColumn++) {\n                    var spriteIndex = spriteColumn * 8 + spriteRow;\n                    // Sprites occupy 4 bytes in the sprite attribute table\n                    var spriteTableIndex = spriteIndex * 4;\n                    var spriteTileId = eightBitLoadFromGBMemory(Graphics.memoryLocationSpriteAttributesTable + spriteTableIndex + 2);\n                    if (tileId === spriteTileId) {\n                        var currentSpriteAttributes = eightBitLoadFromGBMemory(Graphics.memoryLocationSpriteAttributesTable + spriteTableIndex + 3);\n                        var spriteVramBankId = 0;\n                        if (Cpu.GBCEnabled && checkBitOnByte(3, currentSpriteAttributes)) {\n                            spriteVramBankId = 1;\n                        }\n                        if (spriteVramBankId === vramBankId) {\n                            spriteAttributes = currentSpriteAttributes;\n                            spriteRow = 8;\n                            spriteColumn = 5;\n                            // Set our paletteLocation\n                            paletteLocation = Graphics.memoryLocationSpritePaletteOne;\n                            if (checkBitOnByte(4, spriteAttributes)) {\n                                paletteLocation = Graphics.memoryLocationSpritePaletteTwo;\n                            }\n                        }\n                    }\n                }\n            }\n            // If we didn't find a sprite,\n            // Let's see if the tile is on the bg tile map\n            // If so, use that bg map for attributes\n            if (Cpu.GBCEnabled && spriteAttributes < 0) {\n                var tileMapMemoryLocation = Graphics.memoryLocationTileMapSelectZeroStart;\n                if (Lcd.bgTileMapDisplaySelect) {\n                    tileMapMemoryLocation = Graphics.memoryLocationTileMapSelectOneStart;\n                }\n                // Loop through the tileMap, and find if we have our current ID\n                var foundTileMapAddress = -1;\n                for (var x = 0; x < 32; x++) {\n                    for (var y = 0; y < 32; y++) {\n                        var tileMapAddress = tileMapMemoryLocation + y * 32 + x;\n                        var tileIdFromTileMap = loadFromVramBank(tileMapAddress, 0);\n                        // Check if we found our tileId\n                        if (tileId === tileIdFromTileMap) {\n                            foundTileMapAddress = tileMapAddress;\n                            x = 32;\n                            y = 32;\n                        }\n                    }\n                }\n                if (foundTileMapAddress >= 0) {\n                    bgMapAttributes = loadFromVramBank(foundTileMapAddress, 1);\n                }\n            }\n            // Draw each Y line of the tile\n            for (var tileLineY = 0; tileLineY < 8; tileLineY++) {\n                drawPixelsFromLineOfTile(tileId, // tileId\n                tileDataMemoryLocation, // Graphics.memoryLocationTileDataSelect\n                vramBankId, // Vram Bank\n                0, // Tile Line X Start\n                7, // Tile Line X End\n                tileLineY, // Tile Line Y\n                tileDataMapGridX * 8, // Output line X\n                tileDataMapGridY * 8 + tileLineY, // Output line Y\n                0x1f * 8, // Output Width\n                TILE_DATA_LOCATION, // Wasm Memory Start\n                false, // shouldRepresentMonochromeColorByColorId\n                paletteLocation, // paletteLocation\n                bgMapAttributes, // bgMapAttributes\n                spriteAttributes // spriteAttributes\n                );\n            }\n        }\n    }\n}\nfunction drawOamToWasmMemory() {\n    // Draw all 40 sprites\n    // Going to be like BGB and do 8 x 5 sprites\n    for (var spriteRow = 0; spriteRow < 8; spriteRow++) {\n        for (var spriteColumn = 0; spriteColumn < 5; spriteColumn++) {\n            var spriteIndex = spriteColumn * 8 + spriteRow;\n            // Sprites occupy 4 bytes in the sprite attribute table\n            var spriteTableIndex = spriteIndex * 4;\n            // Y positon is offset by 16, X position is offset by 8\n            var spriteYPosition = eightBitLoadFromGBMemory(Graphics.memoryLocationSpriteAttributesTable + spriteTableIndex);\n            var spriteXPosition = eightBitLoadFromGBMemory(Graphics.memoryLocationSpriteAttributesTable + spriteTableIndex + 1);\n            var spriteTileId = eightBitLoadFromGBMemory(Graphics.memoryLocationSpriteAttributesTable + spriteTableIndex + 2);\n            var tilesToDraw = 1;\n            if (Lcd.tallSpriteSize) {\n                // @binji says in 8x16 mode, even tileId always drawn first\n                // This will fix shantae sprites which always uses odd numbered indexes\n                // TODO: Do the actual Pandocs thing:\n                // \"In 8x16 mode, the lower bit of the tile number is ignored. Ie. the upper 8x8 tile is \"NN AND FEh\", and the lower 8x8 tile is \"NN OR 01h\".\"\n                // So just knock off the last bit? :)\n                if (spriteTileId % 2 === 1) {\n                    spriteTileId -= 1;\n                }\n                tilesToDraw += 1;\n            }\n            // Get our sprite attributes since we know we shall be drawing the tile\n            var spriteAttributes = eightBitLoadFromGBMemory(Graphics.memoryLocationSpriteAttributesTable + spriteTableIndex + 3);\n            // Find which VRAM Bank to load from\n            var vramBankId = 0;\n            if (Cpu.GBCEnabled && checkBitOnByte(3, spriteAttributes)) {\n                vramBankId = 1;\n            }\n            // Find which monochrome palette we should use\n            var paletteLocation = Graphics.memoryLocationSpritePaletteOne;\n            if (checkBitOnByte(4, spriteAttributes)) {\n                paletteLocation = Graphics.memoryLocationSpritePaletteTwo;\n            }\n            // Start Drawing our tiles\n            for (var i = 0; i < tilesToDraw; i++) {\n                // Draw each Y line of the tile\n                for (var tileLineY = 0; tileLineY < 8; tileLineY++) {\n                    drawPixelsFromLineOfTile(spriteTileId + i, // tileId\n                    Graphics.memoryLocationTileDataSelectOneStart, // Graphics.memoryLocationTileDataSelect\n                    vramBankId, // VRAM Bank\n                    0, // Tile Line X Start\n                    7, // Tile Line X End\n                    tileLineY, // Tile Line Y\n                    spriteRow * 8, // Output line X\n                    spriteColumn * 16 + tileLineY + i * 8, // Output line Y\n                    8 * 8, // Output Width\n                    OAM_TILES_LOCATION, // Wasm Memory Start\n                    false, // shouldRepresentMonochromeColorByColorId\n                    paletteLocation, // paletteLocation\n                    -1, // bgMapAttributes\n                    spriteAttributes // spriteAttributes\n                    );\n                }\n            }\n        }\n    }\n}\n\nfunction getDIV() {\n    return Timers.dividerRegister;\n}\nfunction getTIMA() {\n    return Timers.timerCounter;\n}\nfunction getTMA() {\n    return Timers.timerModulo;\n}\nfunction getTAC() {\n    var response = Timers.timerInputClock;\n    if (Timers.timerEnabled) {\n        response = setBitOnByte(2, response);\n    }\n    return response;\n}\n\n// Functions to debug internal gameboy memory\nfunction updateDebugGBMemory() {\n    for (var i = 0; i < DEBUG_GAMEBOY_MEMORY_SIZE; i++) {\n        store(DEBUG_GAMEBOY_MEMORY_LOCATION + i, eightBitLoadFromGBMemoryWithTraps(i));\n    }\n    // Since we are debugging, we don't want to be responsible for tripping the breakpoints\n    Breakpoints.reachedBreakpoint = false;\n}\n\n// Public Exports\n\nexport { config, hasCoreStarted, saveState, loadState, isGBC, getStepsPerStepSet, getStepSets, getSteps, executeMultipleFrames, executeFrame, executeFrameAndCheckAudio, executeUntilCondition, executeStep, getCyclesPerCycleSet, getCycleSets, getCycles, setJoypadState, getNumberOfSamplesInAudioBuffer, clearAudioBuffer, setManualColorizationPalette, WASMBOY_MEMORY_LOCATION, WASMBOY_MEMORY_SIZE, WASMBOY_WASM_PAGES, ASSEMBLYSCRIPT_MEMORY_LOCATION, ASSEMBLYSCRIPT_MEMORY_SIZE, WASMBOY_STATE_LOCATION, WASMBOY_STATE_SIZE, GAMEBOY_INTERNAL_MEMORY_LOCATION, GAMEBOY_INTERNAL_MEMORY_SIZE, VIDEO_RAM_LOCATION, VIDEO_RAM_SIZE, WORK_RAM_LOCATION, WORK_RAM_SIZE, OTHER_GAMEBOY_INTERNAL_MEMORY_LOCATION, OTHER_GAMEBOY_INTERNAL_MEMORY_SIZE, GRAPHICS_OUTPUT_LOCATION, GRAPHICS_OUTPUT_SIZE, GBC_PALETTE_LOCATION, GBC_PALETTE_SIZE, BG_PRIORITY_MAP_LOCATION, BG_PRIORITY_MAP_SIZE, FRAME_LOCATION, FRAME_SIZE, BACKGROUND_MAP_LOCATION, BACKGROUND_MAP_SIZE, TILE_DATA_LOCATION, TILE_DATA_SIZE, OAM_TILES_LOCATION, OAM_TILES_SIZE, AUDIO_BUFFER_LOCATION, AUDIO_BUFFER_SIZE, CHANNEL_1_BUFFER_LOCATION, CHANNEL_1_BUFFER_SIZE, CHANNEL_2_BUFFER_LOCATION, CHANNEL_2_BUFFER_SIZE, CHANNEL_3_BUFFER_LOCATION, CHANNEL_3_BUFFER_SIZE, CHANNEL_4_BUFFER_LOCATION, CHANNEL_4_BUFFER_SIZE, CARTRIDGE_RAM_LOCATION, CARTRIDGE_RAM_SIZE, BOOT_ROM_LOCATION, BOOT_ROM_SIZE, CARTRIDGE_ROM_LOCATION, CARTRIDGE_ROM_SIZE, DEBUG_GAMEBOY_MEMORY_LOCATION, DEBUG_GAMEBOY_MEMORY_SIZE, getWasmBoyOffsetFromGameBoyOffset, setProgramCounterBreakpoint, resetProgramCounterBreakpoint, setReadGbMemoryBreakpoint, resetReadGbMemoryBreakpoint, setWriteGbMemoryBreakpoint, resetWriteGbMemoryBreakpoint, getRegisterA, getRegisterB, getRegisterC, getRegisterD, getRegisterE, getRegisterH, getRegisterL, getRegisterF, getProgramCounter, getStackPointer, getOpcodeAtProgramCounter, getLY, getScrollX, getScrollY, getWindowX, getWindowY, drawBackgroundMapToWasmMemory, drawTileDataToWasmMemory, drawOamToWasmMemory, getDIV, getTIMA, getTMA, getTAC, updateDebugGBMemory };\n","import * as WasmBoyCore from '../../dist/core/core.esm';\n\nconst getWasmBoyTsCore = async () => {\n  const response = {\n    instance: {\n      exports: WasmBoyCore\n    },\n    byteMemory: WasmBoyCore.memory.wasmByteMemory,\n    type: 'TypeScript'\n  };\n  return response;\n};\n\nexport default getWasmBoyTsCore;\n"],"names":["wasmboyMemorySize","wasmByteMemory","Uint8ClampedArray","memory","size","grow","load","offset","store","value","abs","Math","ceil","ASSEMBLYSCRIPT_MEMORY_LOCATION","ASSEMBLYSCRIPT_MEMORY_SIZE","WASMBOY_STATE_LOCATION","WASMBOY_STATE_SIZE","VIDEO_RAM_LOCATION","VIDEO_RAM_SIZE","WORK_RAM_LOCATION","WORK_RAM_SIZE","OTHER_GAMEBOY_INTERNAL_MEMORY_LOCATION","OTHER_GAMEBOY_INTERNAL_MEMORY_SIZE","GAMEBOY_INTERNAL_MEMORY_LOCATION","GAMEBOY_INTERNAL_MEMORY_SIZE","GBC_PALETTE_LOCATION","GBC_PALETTE_SIZE","BG_PRIORITY_MAP_LOCATION","BG_PRIORITY_MAP_SIZE","FRAME_LOCATION","FRAME_SIZE","BACKGROUND_MAP_LOCATION","BACKGROUND_MAP_SIZE","TILE_DATA_LOCATION","TILE_DATA_SIZE","OAM_TILES_LOCATION","OAM_TILES_SIZE","GRAPHICS_OUTPUT_LOCATION","GRAPHICS_OUTPUT_SIZE","CHANNEL_1_BUFFER_LOCATION","CHANNEL_1_BUFFER_SIZE","CHANNEL_2_BUFFER_LOCATION","CHANNEL_2_BUFFER_SIZE","CHANNEL_3_BUFFER_LOCATION","CHANNEL_3_BUFFER_SIZE","CHANNEL_4_BUFFER_LOCATION","CHANNEL_4_BUFFER_SIZE","AUDIO_BUFFER_LOCATION","AUDIO_BUFFER_SIZE","CARTRIDGE_RAM_LOCATION","CARTRIDGE_RAM_SIZE","BOOT_ROM_LOCATION","BOOT_ROM_SIZE","CARTRIDGE_ROM_LOCATION","CARTRIDGE_ROM_SIZE","DEBUG_GAMEBOY_MEMORY_LOCATION","DEBUG_GAMEBOY_MEMORY_SIZE","WASMBOY_MEMORY_LOCATION","WASMBOY_MEMORY_SIZE","WASMBOY_WASM_PAGES","Config","enableBootRom","useGbcWhenAvailable","audioBatchProcessing","graphicsBatchProcessing","timersBatchProcessing","graphicsDisableScanlineRendering","audioAccumulateSamples","tileRendering","tileCaching","enableAudioDebugging","u8Portable","param","u16Portable","i8Portable","i32Portable","setFlagBit","flagBit","flagValue","bitwiseOperand","Cpu","registerF","setZeroFlag$$1","setSubtractFlag","setHalfCarryFlag","setCarryFlag","getZeroFlag$$1","getSubtractFlag","getHalfCarryFlag","getCarryFlag$$1","checkAndSetEightBitHalfCarryFlag","amountToAdd","result","checkAndSetEightBitCarryFlag","checkAndSetSixteenBitFlagsAddOverflow","valueOne","valueTwo","useStackPointerBits","signedValueOne","flagXor","halfCarryXor","halfCarryAnd","WasmBoyGBColors","bgWhite","bgLightGrey","bgDarkGrey","bgBlack","obj0White","obj0LightGrey","obj0DarkGrey","obj0Black","obj1White","obj1LightGrey","obj1DarkGrey","obj1Black","GreenColors","OrangeColors","BrownColors","InvertedColors","GrayscaleColors","PastelMixColors","DarkBrownColors","DarkGreenColors","DarkBlueColors","RedColors","BlueColors","YellowColors","Table00Entry08Colors","Table01Entry0BColors","Table01Entry10Colors","Table03Entry0AColors","Table05Entry00Colors","Table05Entry01Colors","Table05Entry02Colors","Table05Entry08Colors","Table05Entry09Colors","Table05Entry11Colors","Table05Entry14Colors","Table05Entry15Colors","Colors","initializeColors","setManualColorizationPalette","GBCEnabled","BootROMEnabled","titleChecksum","i","eightBitLoadFromGBMemory","hash","setHashColorizationPalette","getRedFromHexColor","color","getGreenFromHexColor","getBlueFromHexColor","colorizationId","concatenateBytes","highByte","lowByte","splitHighByte","groupedByte","splitLowByte","rotateByteLeft","rotateByteLeftThroughCarry","rotateByteRight","rotateByteRightThroughCarry","setBitOnByte","bitPosition","byte","resetBitOnByte","checkBitOnByte","Palette","memoryLocationBackgroundPaletteIndex","memoryLocationBackgroundPaletteData","memoryLocationSpritePaletteIndex","memoryLocationSpritePaletteData","memoryLocationBackgroundPalette","memoryLocationSpritePaletteOne","memoryLocationSpritePaletteTwo","initializePalette","eightBitStoreIntoGBMemory","getMonochromeColorFromPalette","colorId","paletteMemoryLocation","shouldRepresentColorByColorId","rgbColor","getColorizedGbHexColorFromPalette","hexColor","writeColorPaletteToMemory","paletteIndex","isSprite","storePaletteByteInWasmMemory","incrementPaletteIndexIfSet","getRgbColorFromPalette","paletteId","paletteHighByte","loadPaletteByteFromWasmMemory","paletteLowByte","getColorComponentFromRgb","colorRgb","bitMask","colorValue","paletteIndexByte","addPriorityforPixel","x","y","hasGbcBgPriority","bgPriorityByte","getPixelStart","getPriorityforPixel","clearPriorityMap","TileCache","tileId","horizontalFlip","nextXIndexToPerformCacheCheck","resetTileCache","drawPixelsFromLineOfTile","tileDataMemoryLocation","vramBankId","tileLineXStart","tileLineXEnd","tileLineY","outputLineX","outputLineY","outputWidth","wasmMemoryStart","shouldRepresentMonochromeColorByColorId","paletteLocation","bgMapAttributes","spriteAttributes","pixelsDrawn","tileDataAddress","getTileDataAddress","byteOneForLineOfTilePixels","loadFromVramBank","byteTwoForLineOfTilePixels","iteratedOutputX","pixelXInTile","paletteColorId","red","green","blue","bgPalette","rgbColorPalette","Graphics","monochromeColor","pixelStart","getTilePixelStart","gbcBgPriority","tileIdFromTileMap","memoryLocationTileDataSelectZeroStart","isDutyCycleClockPositiveOrNegativeForWaveform","channelDuty","waveFormPositionOnDuty","Channel1","updateNRx0","oldSweepNegate","NRx0Negate","NRx0SweepPeriod","NRx0SweepShift","sweepNegateShouldDisableChannelOnClear","isEnabled","updateNRx1","NRx1Duty","NRx1LengthLoad","lengthCounter","MAX_LENGTH","updateNRx2","NRx2EnvelopePeriod","isEnvelopeAutomaticUpdating","volume","NRx2EnvelopeAddMode","NRx2StartingVolume","isDacEnabled","updateNRx3","NRx3FrequencyLSB","frequency","NRx4FrequencyMSB","updateNRx4","frequencyMSB","frameSequencer","Sound","doesNextFrameSequencerUpdateLength","isBeingLengthEnabled","NRx4LengthEnabled","trigger","saveState","getSaveStateMemoryOffset","saveStateSlot","cycleCounter","storeBooleanDirectlyToWasmMemory","frequencyTimer","envelopeCounter","dutyCycle","isSweepEnabled","sweepCounter","sweepShadowFrequency","loadState","loadBooleanDirectlyFromWasmMemory","initialize","memoryLocationNRx0","memoryLocationNRx1","memoryLocationNRx2","memoryLocationNRx3","memoryLocationNRx4","getSampleFromCycleCounter","accumulatedCycles","getSample","resetTimer","GBCDoubleSpeed","numberOfCycles","overflowAmount","outputVolume","sample","didCalculatedSweepOverflow","calculateSweep","willChannelUpdate","updateSweep","newFrequency","setFrequency","updateLength","updateEnvelope","passedFrequencyHighBits","passedFrequencyLowBits","register4","newRegister4","channelNumber","oldFrequency","calculatedSweep","Channel2","Channel3","sampleBuffer","NRx2VolumeCode","waveTablePosition","volumeCode","volumeCodeChanged","handleWaveRamRead","readCurrentSampleByteFromWaveRam","handleWaveRamWrite","positionIndexToAdd","memoryLocationWaveSample","memoryLocationWaveTable","getSampleFromSampleBufferForWaveTablePosition","advanceWavePositionAndSampleBuffer","Channel4","divisorCode","NRx3ClockShift","NRx3WidthMode","NRx3DivisorCode","divisor","linearFeedbackShiftRegister","getNoiseChannelFrequencyPeriod","lfsrBitZero","lfsrBitOne","xorLfsrBitZeroOne","response","SoundAccumulator","channel1Sample","channel2Sample","channel3Sample","channel4Sample","channel1DacEnabled","channel2DacEnabled","channel3DacEnabled","channel4DacEnabled","leftChannelSampleUnsignedByte","rightChannelSampleUnsignedByte","mixerVolumeChanged","mixerEnabledChanged","needToRemixSamples","initializeSoundAccumulator","accumulateSound","channel1WillUpdate","didChannelDacChange","channel2WillUpdate","channel3WillUpdate","channel4WillUpdate","downSampleCycleCounter","maxDownSampleCycles","mixChannelSamples","setLeftAndRightOutputForAudioQueue","audioQueueIndex","maxIndex","wasmBoyMemoryMaxBufferSize","channel1EnabledChanged","channel2EnabledChanged","channel3EnabledChanged","channel4EnabledChanged","batchProcessCycles","updateNR50","NR50LeftMixerVolume","NR50RightMixerVolume","updateNR51","NR51IsChannel4EnabledOnLeftOutput","NR51IsChannel3EnabledOnLeftOutput","NR51IsChannel2EnabledOnLeftOutput","NR51IsChannel1EnabledOnLeftOutput","NR51IsChannel4EnabledOnRightOutput","NR51IsChannel3EnabledOnRightOutput","NR51IsChannel2EnabledOnRightOutput","NR51IsChannel1EnabledOnRightOutput","updateNR52","NR52IsSoundEnabled","maxFrameSequenceCycles","CLOCK_SPEED","sampleRate","frameSequenceCycleCounter","clearAudioBuffer","currentCycles","memoryLocationNR50","memoryLocationNR51","memoryLocationNR52","memoryLocationChannel3LoadRegisterStart","initializeSound","batchProcessAudio","updateSound","frameSequencerUpdated","updateFrameSequencer","calculateSound","getNumberOfSamplesInAudioBuffer","mixedSample","leftChannelSample","rightChannelSample","getSampleAsUnsignedByte","mixerVolume","precision","convertedSample","maxDivider","leftVolume","rightVolume","bufferLocation","audioQueueOffset","SoundRegisterWriteTraps","wasNR52Enabled","eightBitStoreIntoGBMemoryWithTraps","SoundRegisterReadTraps","register","registerNR52","Interrupts","updateInterruptEnabled","isVBlankInterruptEnabled","bitPositionVBlankInterrupt","isLcdInterruptEnabled","bitPositionLcdInterrupt","isTimerInterruptEnabled","bitPositionTimerInterrupt","isSerialInterruptEnabled","bitPositionSerialInterrupt","isJoypadInterruptEnabled","bitPositionJoypadInterrupt","interruptsEnabledValue","updateInterruptRequested","isVBlankInterruptRequested","isLcdInterruptRequested","isTimerInterruptRequested","isSerialInterruptRequested","isJoypadInterruptRequested","interruptsRequestedValue","areInterruptsPending","masterInterruptSwitch","masterInterruptSwitchDelay","memoryLocationInterruptEnabled","memoryLocationInterruptRequest","initializeInterrupts","checkInterrupts","isAnInterruptRequestedAndEnabledValue","wasInterruptHandled","isHaltNoJump","_handleInterrupt","interuptHandlerCycles","isHalted","exitHaltAndStop","setInterrupts","interruptRequest","stackPointer","sixteenBitStoreIntoGBMemory","programCounter","_requestInterrupt","requestVBlankInterrupt","requestLcdInterrupt","requestTimerInterrupt","requestJoypadInterrupt","requestSerialInterrupt","Timers","updateDividerRegister","oldDividerRegister","dividerRegister","memoryLocationDividerRegister","timerEnabled","_checkDividerRegisterFallingEdgeDetector","_incrementTimerCounter","updateTimerCounter","timerCounterWasReset","timerCounterOverflowDelay","timerCounter","updateTimerModulo","timerModulo","updateTimerControl","oldTimerEnabled","newTimerInputClock","oldTimerCounterMaskBit","_getTimerCounterMaskBit","timerInputClock","newTimerCounterMaskBit","shouldIncrementTimerCounter","timerCounterMask","memoryLocationTimerCounter","memoryLocationTimerModulo","memoryLocationTimerControl","initializeTimers","batchProcessTimers","updateTimers","cyclesIncreased","curDividerRegister","counter","newDividerRegister","timerCounterMaskBit","Serial","updateTransferControl","isShiftClockInternal","isClockSpeedFast","transferStartFlag","memoryLocationSerialTransferData","memoryLocationSerialTransferControl","numberOfBitsTransferred","initializeSerial","updateSerial","oldCycles","curCycles","_checkFallingEdgeDetector","transferData","transferControl","newCycles","maskBit","_getFallingEdgeMaskBit","Joypad","updateJoypad","joypadRegisterFlipped","isDpadType","isButtonType","up","down","left","right","a","b","select","start","memoryLocationJoypadRegister","getJoypadState","joypadRegister","setJoypadState","_pressJoypadButton","_releaseJoypadButton","buttonId","isStopped","isButtonStateChanging","_getJoypadButtonStateFromButtonId","_setJoypadButtonStateFromButtonId","isDpadTypeButton","shouldRequestInterrupt","isPressed","handleBanking","Memory","isRomOnly","isMBC1","isMBC2","romEnableByte","isRamBankingEnabled","isMBC5","currentRomBank","romBankLowerBits","isMBC3","isMBC1RomModeEnabled","romBankHigherBits","ramBankBits","currentRamBank","getRomBankAddress","gameboyOffset","switchableCartridgeRomLocation","getRamBankAddress","cartridgeRamLocation","initializeDma","startDmaTransfer","sourceAddressOffset","sourceAddress","spriteInformationByte","spriteInformationAddress","spriteInformationTableLocation","DMACycles","startHdmaTransfer","hdmaTriggerByteToBeWritten","isHblankHdmaActive","hdmaTriggerByte","memoryLocationHdmaTrigger","hdmaSource","getHdmaSourceFromMemory","hdmaDestination","getHdmaDestinationFromMemory","transferLength","hblankHdmaTransferLengthRemaining","hblankHdmaSource","hblankHdmaDestination","hdmaTransfer","updateHblankHdma","bytesToTransfer","remainingTransferLength","transferLengthAsByte","sourceByte","eightBitLoadFromGBMemoryWithTraps","hdmaDestinationWithWrapping","hdmaCycles","hdmaSourceHigh","memoryLocationHdmaSourceHigh","hdmaSourceLow","memoryLocationHdmaSourceLow","hdmaDestinationHigh","memoryLocationHdmaDestinationHigh","hdmaDestinationLow","memoryLocationHdmaDestinationLow","videoRamLocation","checkWriteTraps","memoryLocationSpeedSwitch","memoryLocationBootROMSwitch","echoRamLocation","wramOffset","spriteInformationTableLocationEnd","Lcd","currentLcdMode","unusableMemoryLocation","unusableMemoryEndLocation","memoryLocationLcdControl","memoryLocationWindowX","updateLcdControl","memoryLocationLcdStatus","updateLcdStatus","memoryLocationScanlineRegister","scanlineRegister","memoryLocationCoincidenceCompare","coincidenceCompare","memoryLocationDmaTransfer","memoryLocationScrollX","scrollX","memoryLocationScrollY","scrollY","windowX","memoryLocationWindowY","windowY","memoryLocationGBCWRAMBank","memoryLocationGBCVRAMBank","getWasmBoyOffsetFromGameBoyOffset","gameboyOffsetHighByte","internalRamBankZeroLocation","wramBankId","Breakpoints","readGbMemory","writeGbMemory","reachedBreakpoint","setProgramCounterBreakpoint","breakpoint","resetProgramCounterBreakpoint","setReadGbMemoryBreakpoint","resetReadGbMemoryBreakpoint","setWriteGbMemoryBreakpoint","resetWriteGbMemoryBreakpoint","sixteenBitStoreIntoGBMemoryWithTraps","nextOffset","currentLcdStatus","valueNoBottomBits","lcdStatusOnlyBottomBits","wasLcdEnabled","enabled","windowTileMapDisplaySelect","windowDisplayEnabled","bgWindowTileDataSelect","bgTileMapDisplaySelect","tallSpriteSize","spriteDisplayEnable","bgDisplayEnabled","resetLcd","shouldBlankScreen","scanlineCycleCounter","lcdStatus","setLcdStatus","lcdMode","newLcdMode","MIN_CYCLES_SPRITES_LCD_MODE","checkCoincidence","renderBackground","tileMapMemoryLocation","pixelYPositionInMap","drawBackgroundWindowScanline","renderWindow","xOffset","iStart","tileYPositionInMap","pixelXPositionInMap","tileXPositionInMap","tileMapAddress","usedTileCache","drawLineOfTileFromTileCache","drawLineOfTileFromTileId","drawColorPixelFromTileId","drawMonochromePixelFromTileId","xPixel","yPixel","pixelYInTile","setPixelOnFrame","wasLastTileHorizontallyFlipped","isCurrentTileHorizontallyFlipped","tileCacheIndex","xPos","previousXPixel","previousTilePixelLocation","getRgbPixelStart","pixelPriority","xOffsetTileWidthRemainder","tileXStart","tileXEnd","renderSprites","useLargerSprites","spriteTableIndex","index","memoryLocationSpriteAttributesTable","spriteYPosition","spriteXPosition","spriteTileId","spriteHeight","isSpritePriorityBehindWindowAndBackground","flipSpriteY","flipSpriteX","currentSpriteLine","spriteTileAddressStart","memoryLocationTileDataSelectOneStart","spriteTileAddress","spriteDataByteOneForLineOfTilePixels","spriteDataByteTwoForLineOfTilePixels","tilePixel","spritePixelXInTile","spriteColorId","spriteXPixelLocationInCameraView","shouldShowFromLcdcPriority","shouldHideFromOamPriority","shouldHideFromBgPriority","bgColorFromPriorityByte","spritePaletteLocation","MAX_CYCLES_PER_SCANLINE","MIN_CYCLES_TRANSFER_DATA_LCD_MODE","memoryLocationTileMapSelectZeroStart","memoryLocationTileMapSelectOneStart","batchProcessGraphics","updateGraphics","initializeGraphics","_drawScanline","_renderEntireFrame","wasmBoyAddress","checkReadTraps","currentSpeedSwitchRegister","upperDividerRegisterBits","readTrapResult","sixteenBitLoadFromGBMemory","lowByteReadTrapResult","highByteReadTrapResult","cartridgeRomLocation","internalRamBankOneLocation","initializeCartridge","cartridgeType","MAX_CYCLES_PER_FRAME","enableHalt","isHaltNormal","haltTypeValue","isHaltBug","registerA","registerB","registerC","registerD","registerE","registerH","registerL","initializeCpu","addARegister","addAThroughCarryRegister","overflowedResult","subARegister","negativeRegister","subAThroughCarryRegister","carryRegisterCheck","andARegister","xorARegister","orARegister","cpARegister","tempResult","rotateRegisterLeft","rotateRegisterRight","rotateRegisterLeftThroughCarry","hasHighbit","rotateRegisterRightThroughCarry","hasLowBit","shiftLeftRegister","shiftRightArithmeticRegister","hasLowbit","swapNibblesOnRegister","highNibble","lowNibble","shiftRightLogicalRegister","testBitOnRegister","testByte","setBitOnRegister","bitValue","setByte","relativeJump","relativeJumpOffset","handleCbOpcode","cbOpcode","handledOpcode","instructionRegisterValue","instructionRegisterResult","registerNumber","eightBitLoadSyncCycles","opcodeHighNibble","eightBitStoreSyncCycles","executeOpcode$$1","opcode","handleOpcode0x","handleOpcode1x","handleOpcode2x","handleOpcode3x","handleOpcode4x","handleOpcode5x","handleOpcode6x","handleOpcode7x","handleOpcode8x","handleOpcode9x","handleOpcodeAx","handleOpcodeBx","handleOpcodeCx","handleOpcodeDx","handleOpcodeEx","handleOpcodeFx","syncCycles","sixteenBitLoadSyncCycles","sixteenBitStoreSyncCycles","getDataByteOne","getDataByteTwo","getConcatenatedDataByte","concatenatedDataByte","registerBC3","registerHL","registerBC9","registerBCB","speedSwitch","registerDE3","registerDE9","registerDEA","registerDEB","sixteenBitDataByte","registerHL2","registerHL3","adjustedRegister","adjustment","registerHL9","registerHLA","registerHLB","registerHL4","valueAtHL4","incrementer","registerHL5","valueAtHL5","valueAtHL6","valueAtHLE","registerBC1","cbCycles","registerDE1","largeDataByteOne","registerHL1","signedDataByteOne","registerAF1","Cycles","cyclesPerCycleSet","cycleSets","cycles","getCyclesPerCycleSet","getCycleSets","getCycles","trackCyclesRan","resetCycles","Execute","stepsPerStepSet","stepSets","steps","RESPONSE_CONDITION_ERROR","RESPONSE_CONDITION_FRAME","RESPONSE_CONDITION_AUDIO","RESPONSE_CONDITION_BREAKPOINT","getStepsPerStepSet","getStepSets","getSteps","trackStepsRan","esteps","resetSteps","executeMultipleFrames","numberOfFrames","frameResponse","framesRun","executeFrame","executeUntilCondition","executeFrameAndCheckAudio","maxAudioBuffer","checkMaxCyclesPerFrame","audioBufferSize","errorCondition","frameCondition","audioBufferCondition","executeStep","setHasCoreStarted","haltBugOpcode","haltBugCycles","interruptCycles","hasStarted","hasCoreStarted","config","gbcType","initializeVarious","isGBC","getRegisterA","getRegisterB","getRegisterC","getRegisterD","getRegisterE","getRegisterH","getRegisterL","getRegisterF","getProgramCounter","getStackPointer","getOpcodeAtProgramCounter","getLY","getScrollX","getScrollY","getWindowX","getWindowY","drawBackgroundMapToWasmMemory","showColor","drawTileDataToWasmMemory","tileDataMapGridY","tileDataMapGridX","spriteRow","spriteColumn","spriteIndex","currentSpriteAttributes","spriteVramBankId","foundTileMapAddress","drawOamToWasmMemory","tilesToDraw","getDIV","getTIMA","getTMA","getTAC","updateDebugGBMemory","getWasmBoyTsCore","instance","exports","WasmBoyCore","byteMemory","type"],"mappings":"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"}